# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:22:28+00:00

from __future__ import annotations

from datetime import datetime as datetime_aliased
from enum import Enum
from ipaddress import IPv6Address
from typing import Any, Dict, List, Literal, Optional, Union
from uuid import UUID

from pydantic import (
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    SecretStr,
    conint,
    constr,
)


class BillingSource(Enum):
    akamai = 'akamai'
    linode = 'linode'


class CreditCard(BaseModel):
    expiry: Optional[str] = Field(
        None,
        description='The expiration month and year of the credit card.',
        examples=['11/2022'],
    )
    last_four: Optional[str] = Field(
        None,
        description='The last four digits of the credit card associated with this Account.\n',
        examples=[1111],
    )


class ObjectStorage(Enum):
    disabled = 'disabled'
    suspended = 'suspended'
    active = 'active'


class AccountSettings(BaseModel):
    backups_enabled: Optional[bool] = Field(
        None,
        description='Account-wide backups default.  If `true`, all Linodes created will automatically be enrolled in the Backups service.  If `false`, Linodes will not be enrolled by default, but may still be enrolled on creation or later.\n',
        examples=[True],
    )
    longview_subscription: Optional[str] = Field(
        None,
        description='The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](/docs/api/longview/#longview-subscriptions-list) ID or `null` for Longview Free.\n',
        examples=['longview-3'],
    )
    managed: Optional[bool] = Field(
        None,
        description="Our 24/7 incident response service. This robust, multi-homed monitoring system distributes monitoring checks to ensure that your servers remain online and available at all times. Linode Managed can monitor any service or software stack reachable over TCP or HTTP. Once you add a service to Linode Managed, we'll monitor it for connectivity, response, and total request time.\n",
        examples=[True],
    )
    network_helper: Optional[bool] = Field(
        None,
        description='Enables network helper across all users by default for new Linodes and Linode Configs.\n',
        examples=[False],
    )
    object_storage: Optional[ObjectStorage] = Field(
        'disabled',
        description="A string describing the status of this account's Object Storage service enrollment.\n",
        examples=['active'],
    )


class AuthorizedApp(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this app was authorized.',
        examples=['2018-01-01T00:01:01'],
    )
    expiry: Optional[datetime_aliased] = Field(
        None,
        description="When the app's access to your account expires. If `null`, the app's access must be revoked manually.\n",
        examples=['2018-01-15T00:01:01'],
    )
    id: Optional[int] = Field(
        None,
        description="This authorization's ID, used for revoking access.\n",
        examples=[123],
    )
    label: Optional[str] = Field(
        None,
        description="The name of the application you've authorized.\n",
        examples=['example-app'],
    )
    scopes: Optional[str] = Field(
        None,
        description='The OAuth scopes this app was authorized with.  This defines what parts of your Account the app is allowed to access.\n',
        examples=['linodes:read_only'],
    )
    thumbnail_url: Optional[str] = Field(
        None,
        description="The URL at which this app's thumbnail may be accessed.\n",
        examples=[None],
    )
    website: Optional[str] = Field(
        None,
        description='The website where you can get more information about this app.\n',
        examples=['example.org'],
    )


class Status(Enum):
    paused = 'paused'
    pending = 'pending'
    running = 'running'
    needsPostProcessing = 'needsPostProcessing'
    successful = 'successful'
    failed = 'failed'
    userAborted = 'userAborted'


class Type(Enum):
    auto = 'auto'
    snapshot = 'snapshot'


class CreditCard1(BaseModel):
    card_number: constr(min_length=14, max_length=24) = Field(
        ...,
        description='Your credit card number. No spaces or dashes allowed.',
        examples=[4111111111111111],
    )
    cvv: constr(min_length=3, max_length=4) = Field(
        ...,
        description='CVV (Card Verification Value) of the credit card, typically found on the back of the card.\n',
        examples=['123'],
    )
    expiry_month: conint(ge=1, le=12) = Field(
        ...,
        description='A value from 1-12 representing the expiration month of your credit card.\n\n  * 1 = January\n  * 2 = February\n  * 3 = March\n  * Etc.\n',
        examples=[12],
    )
    expiry_year: int = Field(
        ...,
        description='A four-digit integer representing the expiration year of\nyour credit card.\n\nThe combination of `expiry_month` and `expiry_year`\nmust result in a month/year combination of the current month or in\nthe future. An expiration date set in the past is invalid.\n',
        examples=[2020],
    )


class CreditCardData(BaseModel):
    card_type: Optional[str] = Field(
        None, description='The type of credit card.', examples=['Discover']
    )
    expiry: Optional[str] = Field(
        None,
        description='The expiration month and year of the credit card.',
        examples=['06/2022'],
    )
    last_four: Optional[str] = Field(
        None,
        description='The last four digits of the credit card number.',
        examples=['1234'],
    )
    type: Literal['CreditCardData']


class ClusterSize(Enum):
    integer_1 = 1
    integer_3 = 3


class Engine(Enum):
    mongodb = 'mongodb'
    mysql = 'mysql'
    postgresql = 'postgresql'


class Hosts(BaseModel):
    primary: Optional[str] = Field(
        None,
        description='The primary host for the Managed Database.',
        examples=['lin-123-456-mysql-mysql-primary.servers.linodedb.net'],
    )
    secondary: Optional[str] = Field(
        None,
        description='The secondary/private network host for the Managed Database.\n\nA private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.\n\n**Note**: The secondary hostname is publicly viewable and accessible.\n',
        examples=['lin-123-456-mysql-primary-private.servers.linodedb.net'],
    )


class Status1(Enum):
    provisioning = 'provisioning'
    active = 'active'
    suspending = 'suspending'
    suspended = 'suspended'
    resuming = 'resuming'
    restoring = 'restoring'
    failed = 'failed'
    degraded = 'degraded'
    updating = 'updating'
    backing_up = 'backing_up'


class Frequency(Enum):
    weekly = 'weekly'
    monthly = 'monthly'


class Updates(BaseModel):
    day_of_week: Optional[conint(ge=1, le=7)] = Field(
        None,
        description='The day to perform maintenance. 1=Monday, 2=Tuesday, etc.',
        examples=[1],
    )
    duration: Optional[conint(ge=1, le=3)] = Field(
        None, description='The maximum maintenance window time in hours.', examples=[3]
    )
    frequency: Optional[Frequency] = Field(
        'weekly',
        description='Whether maintenance occurs on a weekly or monthly basis.',
        examples=['weekly'],
    )
    hour_of_day: Optional[conint(ge=0, le=23)] = Field(
        None,
        description='The hour to begin maintenance based in UTC time.',
        examples=[0],
    )
    week_of_month: Optional[conint(ge=1, le=4)] = Field(
        None,
        description='The week of the month to perform `monthly` frequency updates. Defaults to `null`.\n\n* Required for `monthly` frequency updates.\n\n* Must be `null` for `weekly` frequency updates.\n',
        examples=[None],
    )


class Database(BaseModel):
    allow_list: Optional[
        List[
            constr(
                pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
            )
        ]
    ] = Field(
        None,
        description='A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n\nBy default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.\n\nIf `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.\n',
        examples=[['203.0.113.1/32', '192.0.1.0/24']],
    )
    cluster_size: Optional[ClusterSize] = Field(
        1,
        description='The number of Linode Instance nodes deployed to the Managed Database.\n\nChoosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.\n',
        examples=[3],
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Managed Database was created.',
        examples=['2022-01-01T00:01:01'],
    )
    encrypted: Optional[bool] = Field(
        False,
        description='Whether the Managed Databases is encrypted.',
        examples=[False],
    )
    engine: Optional[Engine] = Field(
        None, description='The Managed Database engine type.', examples=['mysql']
    )
    hosts: Optional[Hosts] = Field(
        None,
        description='The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.',
    )
    id: Optional[int] = Field(
        None,
        description='A unique ID that can be used to identify and reference the Managed Database.',
        examples=[123],
    )
    instance_uri: Optional[str] = Field(
        None,
        description='Append this to `https://api.linode.com` to run commands for the Managed Database.\n',
        examples=['/v4/databases/mysql/instances/123'],
    )
    label: Optional[constr(min_length=3, max_length=32)] = Field(
        None,
        description='A unique, user-defined string referring to the Managed Database.',
        examples=['example-db'],
    )
    region: Optional[str] = Field(
        None,
        description='The [Region](/docs/api/regions/) ID for the Managed Database.',
        examples=['us-east'],
    )
    status: Optional[Status1] = Field(
        None,
        description='The operating status of the Managed Database.',
        examples=['active'],
    )
    type: Optional[str] = Field(
        None,
        description='The Linode Instance type used by the Managed Database for its nodes.',
        examples=['g6-dedicated-2'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Managed Database was last updated.',
        examples=['2022-01-01T00:01:01'],
    )
    updates: Optional[Updates] = Field(
        None,
        description='Configuration settings for automated patch update maintenance for the Managed Database.',
    )
    version: Optional[str] = Field(
        None, description='The Managed Database engine version.', examples=['8.0.26']
    )


class Type1(Enum):
    snapshot = 'snapshot'
    auto = 'auto'


class DatabaseBackup(BaseModel):
    created: Optional[str] = Field(
        None,
        description='A time value given in a combined date and time format that represents when the database backup was created.',
        examples=['2022-01-01T00:01:01'],
    )
    id: Optional[int] = Field(
        None, description='The ID of the database backup object.', examples=[123]
    )
    label: Optional[constr(max_length=30)] = Field(
        None,
        description="The database backup's label, for display purposes only.\n\nMust include only ASCII letters or numbers.\n",
        examples=['Scheduled - 02/04/22 11:11 UTC-XcCRmI'],
    )
    type: Optional[Type1] = Field(
        None,
        description='The type of database backup, determined by how the backup was created.',
        examples=['auto'],
    )


class Target(Enum):
    primary = 'primary'
    secondary = 'secondary'


class DatabaseBackupSnapshot(BaseModel):
    label: constr(min_length=1, max_length=30) = Field(
        ...,
        description='The label for the Database snapshot backup.\n\n* Must include only ASCII letters or numbers.\n* Must be unique among other backup labels for this Database.\n',
        examples=['db-snapshot'],
    )
    target: Optional[Target] = Field(
        'primary',
        description='The Database cluster target.\nIf the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.\n',
        examples=['primary'],
    )


class DatabaseCredentials(BaseModel):
    password: Optional[str] = Field(
        None,
        description='The randomly-generated root password for the Managed Database instance.',
        examples=['s3cur3P@ssw0rd'],
    )
    username: Optional[str] = Field(
        None,
        description='The root username for the Managed Database instance.',
        examples=['linroot'],
    )


class DatabaseEngine(BaseModel):
    engine: Optional[str] = Field(
        None, description='The Managed Database engine type.', examples=['mysql']
    )
    id: Optional[str] = Field(
        None,
        description='The Managed Database engine ID in engine/version format.',
        examples=['mysql/8.0.26'],
    )
    version: Optional[str] = Field(
        None, description='The Managed Database engine version.', examples=['8.0.26']
    )


class CompressionType(Enum):
    none = 'none'
    snappy = 'snappy'
    zlip = 'zlip'


class Hosts1(BaseModel):
    primary: Optional[str] = Field(
        None,
        description='The primary host for the Managed Database.',
        examples=['lin-0000-0000.servers.linodedb.net'],
    )
    secondary: Optional[str] = Field(
        None,
        description='The secondary/private network host for the Managed Database.\n\nA private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.\n\n**Note**: The secondary hostname is publicly viewable and accessible.\n',
        examples=[None],
    )


class StorageEngine(Enum):
    mmapv1 = 'mmapv1'
    wiredtiger = 'wiredtiger'


class ReplicationType(Enum):
    none = 'none'
    asynch = 'asynch'
    semi_synch = 'semi_synch'


class Hosts2(BaseModel):
    primary: Optional[str] = Field(
        None,
        description='The primary host for the Managed Database.',
        examples=['lin-0000-000-pgsql-primary.servers.linodedb.net'],
    )
    secondary: Optional[str] = Field(
        None,
        description='The secondary/private network host for the Managed Database.\n\nA private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.\n\n**Note**: The secondary hostname is publicly viewable and accessible.\n',
        examples=['lin-0000-000-pgsql-primary-private.servers.linodedb.net'],
    )


class ReplicationCommitType(Enum):
    on = 'on'
    local = 'local'
    remote_write = 'remote_write'
    remote_apply = 'remote_apply'
    off = 'off'


class DatabaseSSL(BaseModel):
    ca_certificate: Optional[str] = Field(
        None,
        description='The base64-encoded SSL CA certificate for the Managed Database instance.',
        examples=['LS0tLS1CRUdJ...=='],
    )


class Price(BaseModel):
    hourly: Optional[float] = Field(
        None,
        description='Cost (in US dollars) per hour for this subscription tier.',
        examples=[0.03],
    )
    monthly: Optional[float] = Field(
        None,
        description='Maximum cost (in US dollars) per month for this subscription tier.',
        examples=[20],
    )


class Quantity(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class DatabaseTypeEngine(BaseModel):
    price: Optional[Price] = Field(
        None,
        description='Cost in US dollars, broken down into hourly and monthly charges.',
    )
    quantity: Optional[Quantity] = Field(
        None,
        description='The number of nodes for the Managed Database cluster for this subscription tier.',
        examples=[1],
    )


class Device(BaseModel):
    disk_id: Optional[int] = Field(
        None,
        description='The Disk ID, or `null` if a Volume is assigned to this slot.',
        examples=[124458],
    )
    volume_id: Optional[int] = Field(
        None,
        description='The Volume ID, or `null` if a Disk is assigned to this slot.',
        examples=[None],
    )


class Devices(BaseModel):
    sda: Optional[Device] = None
    sdb: Optional[Device] = None
    sdc: Optional[Device] = None
    sdd: Optional[Device] = None
    sde: Optional[Device] = None
    sdf: Optional[Device] = None
    sdg: Optional[Device] = None
    sdh: Optional[Device] = None


class Filesystem(Enum):
    raw = 'raw'
    swap = 'swap'
    ext3 = 'ext3'
    ext4 = 'ext4'
    initrd = 'initrd'


class Status2(Enum):
    ready = 'ready'
    not_ready = 'not ready'
    deleting = 'deleting'


class Disk1(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Disk was created.',
        examples=['2018-01-01T00:01:01'],
    )
    filesystem: Optional[Filesystem] = Field(
        None,
        description='The Disk filesystem can be one of:\n\n  * raw - No filesystem, just a raw binary stream.\n  * swap - Linux swap area.\n  * ext3 - The ext3 journaling filesystem for Linux.\n  * ext4 - The ext4 journaling filesystem for Linux.\n  * initrd - initrd (uncompressed initrd, ext2, max 32 MB).\n',
        examples=['ext4'],
    )
    id: Optional[int] = Field(
        None,
        description="This Disk's ID which must be provided for all operations impacting this Disk.\n",
        examples=[25674],
    )
    label: Optional[constr(min_length=1, max_length=48)] = Field(
        None,
        description="The Disk's label is for display purposes only.\n",
        examples=['Debian 9 Disk'],
    )
    size: Optional[int] = Field(
        None, description='The size of the Disk in MB.', examples=[48640]
    )
    status: Optional[Status2] = Field(
        None,
        description="A brief description of this Disk's current state. This field may change without direct action from you, as a result of operations performed to the Disk or the Linode containing the Disk.\n",
        examples=['ready'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Disk was last updated.',
        examples=['2018-01-01T00:01:01'],
    )


class Status3(Enum):
    disabled = 'disabled'
    active = 'active'


class Type2(Enum):
    master = 'master'
    slave = 'slave'


class Domain(BaseModel):
    axfr_ips: Optional[List[str]] = Field(
        None,
        description='The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.\n\n**Note**: This is potentially dangerous, and should be set to an empty list unless you intend to use it.\n',
        examples=[[]],
    )
    description: Optional[constr(min_length=1, max_length=253)] = Field(
        None,
        description='A description for this Domain. This is for display purposes only.\n',
        examples=[None],
    )
    domain: Optional[
        constr(
            pattern=r'\A(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)\Z',
            min_length=1,
            max_length=253,
        )
    ] = Field(
        None,
        description="The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.\n",
        examples=['example.org'],
    )
    expire_sec: Optional[int] = Field(
        0,
        description='The amount of time in seconds that may pass before this Domain is no longer\nauthoritative.\n\n* Valid values are\n0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.\n\n* Any other value is rounded up to the nearest valid value.\n\n* A value of 0 is equivalent to the default value of 1209600.\n',
        examples=[300],
    )
    group: Optional[constr(min_length=1, max_length=50)] = Field(
        None,
        description='The group this Domain belongs to.  This is for display purposes only.\n',
        examples=[None],
    )
    id: Optional[int] = Field(
        None, description="This Domain's unique ID", examples=[1234]
    )
    master_ips: Optional[List[str]] = Field(
        None,
        description='The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.\n',
        examples=[[]],
    )
    refresh_sec: Optional[int] = Field(
        0,
        description='The amount of time in seconds before this Domain should be refreshed.\n\n* Valid values are\n0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.\n\n* Any other value is rounded up to the nearest valid value.\n\n* A value of 0 is equivalent to the default value of 14400.\n',
        examples=[300],
    )
    retry_sec: Optional[int] = Field(
        0,
        description='The interval, in seconds, at which a failed refresh should be retried.\n\n* Valid values are\n0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.\n\n* Any other value is rounded up to the nearest valid value.\n\n* A value of 0 is equivalent to the default value of 14400.\n',
        examples=[300],
    )
    soa_email: Optional[EmailStr] = Field(
        None,
        description='Start of Authority email address. This is required for `type` master Domains.\n',
        examples=['admin@example.org'],
    )
    status: Optional[Status3] = Field(
        'active',
        description='Used to control whether this Domain is currently being rendered.\n',
        examples=['active'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='An array of tags applied to this object.  Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )
    ttl_sec: Optional[int] = Field(
        0,
        description='"Time to Live" - the amount of time in seconds that this Domain\'s records may be cached by resolvers or other domain servers.\n* Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.\n* Any other value is rounded up to the nearest valid value.\n* A value of 0 is equivalent to the default value of 86400.\n',
        examples=[300],
    )
    type: Literal['Domain'] = Field(
        ...,
        description='Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").\n',
        examples=['master'],
    )


class Tag(Enum):
    issue = 'issue'
    issuewild = 'issuewild'
    iodef = 'iodef'


class Type3(Enum):
    A = 'A'
    AAAA = 'AAAA'
    NS = 'NS'
    MX = 'MX'
    CNAME = 'CNAME'
    TXT = 'TXT'
    SRV = 'SRV'
    PTR = 'PTR'
    CAA = 'CAA'


class DomainRecord(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Domain Record was created.',
        examples=['2018-01-01T00:01:01'],
    )
    id: Optional[int] = Field(
        None, description="This Record's unique ID.", examples=[123456]
    )
    name: Optional[constr(min_length=1, max_length=100)] = Field(
        None,
        description='The name of this Record. For requests, this property\'s actual usage and whether it is required depends\non the type of record this represents:\n\n`A` and `AAAA`: The hostname or FQDN of the Record.\n\n`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.\n\n`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`\nDomain. Must be an empty string (`""`) for a Null MX Record.\n\n`CNAME`: The hostname. Must be unique. Required.\n\n`TXT`: The hostname.\n\n`SRV`: Unused. Use the `service` property to set the service name for this record.\n\n`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.\n\n`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS\n(rDNS)](/docs/guides/configure-rdns/).\n',
        examples=['test'],
    )
    port: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='The port this Record points to. Only valid and required for SRV record requests.\n',
        examples=[80],
    )
    priority: Optional[conint(ge=0, le=255)] = Field(
        None,
        description='The priority of the target host for this Record. Lower values are preferred. Only valid for\nMX and SRV record requests. Required for SRV record requests.\n\nDefaults to `0` for MX record requests. Must be `0` for Null MX records.\n',
        examples=[50],
    )
    protocol: Optional[str] = Field(
        None,
        description="The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.\n",
        examples=[None],
    )
    service: Optional[str] = Field(
        None,
        description='The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.\n',
        examples=[None],
    )
    tag: Optional[Tag] = Field(
        None,
        description='The tag portion of a CAA record. Only valid and required for CAA record requests.\n',
        examples=[None],
    )
    target: Optional[constr(max_length=65535)] = Field(
        None,
        description='The target for this Record. For requests, this property\'s actual usage and whether it is required depends\non the type of record this represents:\n\n`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.\n\n`NS`: The name server. Must be a valid domain. Required.\n\n`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. To create a\n[Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first\n[remove](/docs/api/domains/#domain-record-delete) any additional MX records, create an MX record with empty strings\n(`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created. Required.\n\n`CNAME`: The alias. Must be a valid domain. Required.\n\n`TXT`: The value. Required.\n\n`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.\nTo configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for\n`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a\ntarget set to `sample.com`. Required.\n\n`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`\ntag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:\n  * `issue`: The domain of your certificate issuer. Must be a valid domain.\n  * `issuewild`: Must begin with `*`.\n  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.\n\n`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS\n(rDNS)](/docs/guides/configure-rdns/).\n\nWith the exception of A, AAAA, and CAA records, this field accepts a trailing period.\n',
        examples=['192.0.2.0'],
    )
    ttl_sec: Optional[int] = Field(
        None,
        description='"Time to Live" - the amount of time in seconds that this Domain\'s records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n',
        examples=[604800],
    )
    type: Optional[Type3] = Field(
        None,
        description='The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).\n',
        examples=['A'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Domain Record was last updated.',
        examples=['2018-01-01T00:01:01'],
    )
    weight: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.\n',
        examples=[50],
    )


class Entities(BaseModel):
    linodes: Optional[List[int]] = Field(
        None,
        description='An array containing the IDs of each of the Linodes included in this transfer.\n',
        examples=[[111, 222]],
    )


class Status4(Enum):
    accepted = 'accepted'
    cancelled = 'cancelled'
    completed = 'completed'
    failed = 'failed'
    pending = 'pending'
    stale = 'stale'


class EntityTransfer(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this transfer was created.\n',
        examples=['2021-02-11T16:37:03'],
    )
    entities: Optional[Entities] = Field(
        None,
        description='A collection of the entities to include in this transfer request, separated by type.\n',
    )
    expiry: Optional[datetime_aliased] = Field(
        None,
        description='When this transfer expires. Transfers will automatically expire 24 hours after creation.\n',
        examples=['2021-02-12T16:37:03'],
    )
    is_sender: Optional[bool] = Field(
        None,
        description='If the requesting account created this transfer.\n',
        examples=[True],
    )
    status: Optional[Status4] = Field(
        None,
        description='The status of the transfer request.\n\n`accepted`: The transfer has been accepted by another user and is currently in progress. Transfers can take up to 3 hours to complete.\n\n`cancelled`: The transfer has been cancelled by the sender.\n\n`completed`: The transfer has completed successfully.\n\n`failed`: The transfer has failed after initiation.\n\n`pending`: The transfer is ready to be accepted.\n\n`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or cancelled.\n',
        examples=['pending'],
    )
    token: Optional[UUID] = Field(
        None,
        description='The token used to identify and accept or cancel this transfer.\n',
        examples=['123E4567-E89B-12D3-A456-426614174000'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this transfer was last updated.\n',
        examples=['2021-02-11T16:37:03'],
    )


class ErrorObject(BaseModel):
    field: Optional[str] = Field(
        None,
        description='The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as "null" if the error is not specific to any single element of the request.\n',
        examples=['fieldname'],
    )
    reason: Optional[str] = Field(
        None,
        description='What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [open a Support Ticket](/docs/api/support/#support-ticket-open) or perform some other action before you can complete the request successfully.\n',
        examples=['fieldname must be a valid value'],
    )


class Action(Enum):
    account_update = 'account_update'
    account_settings_update = 'account_settings_update'
    backups_enable = 'backups_enable'
    backups_cancel = 'backups_cancel'
    backups_restore = 'backups_restore'
    community_question_reply = 'community_question_reply'
    community_like = 'community_like'
    credit_card_updated = 'credit_card_updated'
    disk_create = 'disk_create'
    disk_delete = 'disk_delete'
    disk_update = 'disk_update'
    disk_duplicate = 'disk_duplicate'
    disk_imagize = 'disk_imagize'
    disk_resize = 'disk_resize'
    dns_record_create = 'dns_record_create'
    dns_record_delete = 'dns_record_delete'
    dns_record_update = 'dns_record_update'
    dns_zone_create = 'dns_zone_create'
    dns_zone_delete = 'dns_zone_delete'
    dns_zone_import = 'dns_zone_import'
    dns_zone_update = 'dns_zone_update'
    entity_transfer_accept = 'entity_transfer_accept'
    entity_transfer_cancel = 'entity_transfer_cancel'
    entity_transfer_create = 'entity_transfer_create'
    entity_transfer_fail = 'entity_transfer_fail'
    entity_transfer_stale = 'entity_transfer_stale'
    firewall_create = 'firewall_create'
    firewall_delete = 'firewall_delete'
    firewall_disable = 'firewall_disable'
    firewall_enable = 'firewall_enable'
    firewall_update = 'firewall_update'
    firewall_device_add = 'firewall_device_add'
    firewall_device_remove = 'firewall_device_remove'
    host_reboot = 'host_reboot'
    image_delete = 'image_delete'
    image_update = 'image_update'
    image_upload = 'image_upload'
    ipaddress_update = 'ipaddress_update'
    lassie_reboot = 'lassie_reboot'
    lish_boot = 'lish_boot'
    linode_addip = 'linode_addip'
    linode_boot = 'linode_boot'
    linode_clone = 'linode_clone'
    linode_create = 'linode_create'
    linode_delete = 'linode_delete'
    linode_update = 'linode_update'
    linode_deleteip = 'linode_deleteip'
    linode_migrate = 'linode_migrate'
    linode_migrate_datacenter = 'linode_migrate_datacenter'
    linode_migrate_datacenter_create = 'linode_migrate_datacenter_create'
    linode_mutate = 'linode_mutate'
    linode_mutate_create = 'linode_mutate_create'
    linode_reboot = 'linode_reboot'
    linode_rebuild = 'linode_rebuild'
    linode_resize = 'linode_resize'
    linode_resize_create = 'linode_resize_create'
    linode_shutdown = 'linode_shutdown'
    linode_snapshot = 'linode_snapshot'
    linode_config_create = 'linode_config_create'
    linode_config_delete = 'linode_config_delete'
    linode_config_update = 'linode_config_update'
    lke_node_create = 'lke_node_create'
    longviewclient_create = 'longviewclient_create'
    longviewclient_delete = 'longviewclient_delete'
    longviewclient_update = 'longviewclient_update'
    managed_disabled = 'managed_disabled'
    managed_enabled = 'managed_enabled'
    managed_service_create = 'managed_service_create'
    managed_service_delete = 'managed_service_delete'
    nodebalancer_create = 'nodebalancer_create'
    nodebalancer_delete = 'nodebalancer_delete'
    nodebalancer_update = 'nodebalancer_update'
    nodebalancer_config_create = 'nodebalancer_config_create'
    nodebalancer_config_delete = 'nodebalancer_config_delete'
    nodebalancer_config_update = 'nodebalancer_config_update'
    nodebalancer_node_create = 'nodebalancer_node_create'
    nodebalancer_node_delete = 'nodebalancer_node_delete'
    nodebalancer_node_update = 'nodebalancer_node_update'
    oauth_client_create = 'oauth_client_create'
    oauth_client_delete = 'oauth_client_delete'
    oauth_client_secret_reset = 'oauth_client_secret_reset'
    oauth_client_update = 'oauth_client_update'
    password_reset = 'password_reset'
    payment_method_add = 'payment_method_add'
    payment_submitted = 'payment_submitted'
    profile_update = 'profile_update'
    stackscript_create = 'stackscript_create'
    stackscript_delete = 'stackscript_delete'
    stackscript_update = 'stackscript_update'
    stackscript_publicize = 'stackscript_publicize'
    stackscript_revise = 'stackscript_revise'
    tag_create = 'tag_create'
    tag_delete = 'tag_delete'
    tfa_disabled = 'tfa_disabled'
    tfa_enabled = 'tfa_enabled'
    ticket_attachment_upload = 'ticket_attachment_upload'
    ticket_create = 'ticket_create'
    ticket_update = 'ticket_update'
    token_create = 'token_create'
    token_delete = 'token_delete'
    token_update = 'token_update'
    user_create = 'user_create'
    user_update = 'user_update'
    user_delete = 'user_delete'
    user_ssh_key_add = 'user_ssh_key_add'
    user_ssh_key_delete = 'user_ssh_key_delete'
    user_ssh_key_update = 'user_ssh_key_update'
    vlan_attach = 'vlan_attach'
    vlan_detach = 'vlan_detach'
    volume_attach = 'volume_attach'
    volume_clone = 'volume_clone'
    volume_create = 'volume_create'
    volume_delete = 'volume_delete'
    volume_update = 'volume_update'
    volume_detach = 'volume_detach'
    volume_resize = 'volume_resize'


class Type4(Enum):
    account = 'account'
    backups = 'backups'
    community = 'community'
    disks = 'disks'
    domain = 'domain'
    entity_transfer = 'entity_transfer'
    firewall = 'firewall'
    image = 'image'
    ipaddress = 'ipaddress'
    linode = 'linode'
    longview = 'longview'
    managed_service = 'managed_service'
    nodebalancer = 'nodebalancer'
    oauth_client = 'oauth_client'
    profile = 'profile'
    stackscript = 'stackscript'
    tag = 'tag'
    ticket = 'ticket'
    token = 'token'
    user = 'user'
    user_ssh_key = 'user_ssh_key'
    volume = 'volume'


class Entity(BaseModel):
    id: Optional[int] = Field(
        None,
        description="The unique ID for an Event's entity.\n\n\nSome Event entities do not have IDs associated with them, so they\nwill not be returned when filtering by ID. These Events include:\n  * `account`\n  * `profile`\n\nEntities for some Events are assigned the ID of the Linode they correspond to.\nWhen filtering by ID for these Events, use the corresponding Linode's ID.\nThese Events include:\n  * `disks`\n  * `backups`\n\n\nTag Events use a tag's name for the entity ID field. When filtering by ID\nfor tag Events, supply the name of the tag.\n",
        examples=[11111],
    )
    label: Optional[str] = Field(
        None,
        description='The current label of this object. The label may reflect changes that occur with this Event.\n',
        examples=['Problem booting my Linode'],
    )
    type: Optional[Type4] = Field(
        None,
        description='The type of entity that is being referenced by the Event.\n',
        examples=['ticket'],
    )
    url: Optional[str] = Field(
        None,
        description='The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.\n',
        examples=['/v4/support/tickets/11111'],
    )


class SecondaryEntity(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The ID of the object that is the secondary entity.\n',
        examples=['linode/debian9'],
    )
    label: Optional[str] = Field(
        None, description='The label of this object.\n', examples=['linode1234']
    )
    type: Optional[str] = Field(
        None,
        description='The type of entity that is being referenced by the Event.\n',
        examples=['linode'],
    )
    url: Optional[str] = Field(
        None,
        description='The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.\n',
        examples=['/v4/linode/instances/1234'],
    )


class Status5(Enum):
    failed = 'failed'
    finished = 'finished'
    notification = 'notification'
    scheduled = 'scheduled'
    started = 'started'


class Event(BaseModel):
    action: Optional[Action] = Field(
        None,
        description='The action that caused this Event. New actions may be added in the future.\n',
        examples=['ticket_create'],
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Event was created.',
        examples=['2018-01-01T00:01:01'],
    )
    duration: Optional[float] = Field(
        None,
        description='The total duration in seconds that it takes for the Event to complete.\n',
        examples=[300.56],
    )
    entity: Optional[Entity] = Field(
        None,
        description="Detailed information about the Event's entity, including ID, type, label, and URL used to access it.\n",
    )
    id: Optional[int] = Field(
        None, description='The unique ID of this Event.', examples=[123]
    )
    message: Optional[str] = Field(
        None,
        description='Provides additional information about the event. Additional information may include, but is not limited to, a more detailed representation of events which can help diagnose non-obvious failures.\n',
        examples=['None'],
    )
    percent_complete: Optional[int] = Field(
        None,
        description='A percentage estimating the amount of time remaining for an Event.\nReturns `null` for notification events.\n',
        examples=[None],
    )
    rate: Optional[str] = Field(
        None,
        description='The rate of completion of the Event. Only some Events will return rate; for example, migration and resize Events.\n',
        examples=[None],
    )
    read: Optional[bool] = Field(
        None, description='If this Event has been read.', examples=[True]
    )
    secondary_entity: Optional[SecondaryEntity] = Field(
        None,
        description="Detailed information about the Event's secondary entity, which provides additional information\nfor events such as, but not limited to, `linode_boot`, `linode_reboot`, `linode_create`, and `linode_clone` Event actions.\n",
    )
    seen: Optional[bool] = Field(
        None, description='If this Event has been seen.', examples=[True]
    )
    status: Optional[Status5] = Field(
        None, description='The current status of this Event.'
    )
    time_remaining: Optional[str] = Field(
        None,
        description='The estimated time remaining until the completion of this Event. This value is only returned for some in-progress migration events. For all other in-progress events, the `percent_complete` attribute will indicate about how much more work is to be done.\n',
        examples=[None],
    )
    username: Optional[str] = Field(
        None,
        description='The username of the User who caused the Event.\n',
        examples=['exampleUser'],
    )


class InboundPolicy(Enum):
    ACCEPT = 'ACCEPT'
    DROP = 'DROP'


class OutboundPolicy(Enum):
    ACCEPT = 'ACCEPT'
    DROP = 'DROP'


class Status6(Enum):
    enabled = 'enabled'
    disabled = 'disabled'
    deleted = 'deleted'


class Type5(Enum):
    linode = 'linode'


class Entity1(BaseModel):
    id: Optional[int] = Field(None, description="The entity's ID", examples=[123])
    label: Optional[str] = Field(
        None, description="The entity's label.", examples=['my-linode']
    )
    type: Optional[Type5] = Field(
        None, description="The entity's type.", examples=['linode']
    )
    url: Optional[str] = Field(
        None,
        description='The URL you can use to access this entity.\n',
        examples=['/v4/linode/instances/123'],
    )


class FirewallDevices(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Device was created.\n',
        examples=['2018-01-01T00:01:01'],
    )
    entity: Optional[Entity1] = Field(
        None, description='The Linode service that this Firewall has been applied to.\n'
    )
    id: Optional[int] = Field(
        None, description="The Device's unique ID\n", examples=[123]
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Device was last updated.\n',
        examples=['2018-01-02T00:01:01'],
    )


class Action1(Enum):
    ACCEPT = 'ACCEPT'
    DROP = 'DROP'


class Addresses(BaseModel):
    ipv4: Optional[List[str]] = Field(
        None,
        description='A list of IPv4 addresses or networks. Must be in IP/mask format.',
        examples=[['192.0.2.0/24']],
    )
    ipv6: Optional[List[str]] = Field(
        None,
        description='A list of IPv6 addresses or networks. Must be in IP/mask format.',
        examples=[['2001:DB8::/32']],
    )


class Protocol(Enum):
    TCP = 'TCP'
    UDP = 'UDP'
    ICMP = 'ICMP'
    IPENCAP = 'IPENCAP'


class FirewallRuleConfig(BaseModel):
    action: Optional[Action1] = Field(
        None,
        description="Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's `inbound_policy` if this is an inbound rule, or the `outbound_policy` if this is an outbound rule.\n",
        examples=['ACCEPT'],
    )
    addresses: Optional[Addresses] = Field(
        None,
        description='Allowed IPv4 or IPv6 addresses. A Rule can have up to 255 addresses or networks listed across its IPv4 and IPv6 arrays. A network and a single IP are treated as equivalent when accounting for this limit.\n',
    )
    description: Optional[constr(min_length=1, max_length=100)] = Field(
        None,
        description='Used to describe this rule. For display purposes only.\n',
        examples=['An example firewall rule description.'],
    )
    label: Optional[constr(min_length=3, max_length=32)] = Field(
        None,
        description='Used to identify this rule. For display purposes only.\n',
        examples=['firewallrule123'],
    )
    ports: Optional[str] = Field(
        None,
        description='A string representing the port or ports on which traffic will be allowed:\n\n- The string may be a single port, a range of ports, or a comma-separated list of single ports and port ranges. A space is permitted following each comma.\n- A range of ports is inclusive of the start and end values for the range. The end value of the range must be greater than the start value.\n- Ports must be within 1 and 65535, and may not contain any leading zeroes. For example, port "080" is not allowed.\n- Ports may not be specified if a rule\'s protocol is `ICMP` or `IPENCAP`.\n- At least one port must be specified if a rule\'s protocol is `TCP` or `UDP`.\n- The ports string can have up to 15 *pieces*, where a single port is treated as one piece, and a port range is treated as two pieces. For example, the string "22-24, 80, 443" has four pieces.\n',
        examples=['22-24, 80, 443'],
    )
    protocol: Optional[Protocol] = Field(
        None, description='The type of network traffic to allow.\n', examples=['TCP']
    )


class GooglePayData(BaseModel):
    card_type: Optional[str] = Field(
        None, description='The type of credit card.', examples=['Discover']
    )
    expiry: Optional[str] = Field(
        None,
        description='The expiration month and year of the credit card.',
        examples=['06/2022'],
    )
    last_four: Optional[str] = Field(
        None,
        description='The last four digits of the credit card number.',
        examples=['1234'],
    )
    type: Literal['GooglePayData']


class Permissions(Enum):
    read_only = 'read_only'
    read_write = 'read_write'


class Grant(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The ID of the entity this grant applies to.\n',
        examples=[123],
    )
    label: Optional[str] = Field(
        None,
        description='The current label of the entity this grant applies to, for display purposes.\n',
        examples=['example-entity'],
    )
    permissions: Optional[Permissions] = Field(
        None,
        description='The level of access this User has to this entity.  If null, this User has no access.\n',
        examples=['read_only'],
    )


class AccountAccess(Enum):
    read_only = 'read_only'
    read_write = 'read_write'


class Global(BaseModel):
    account_access: Optional[AccountAccess] = Field(
        None,
        description='The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.\n',
        examples=['read_only'],
    )
    add_databases: Optional[bool] = Field(
        None,
        description='if true, this User may add Managed Databases.',
        examples=[True],
    )
    add_domains: Optional[bool] = Field(
        None, description='If true, this User may add Domains.', examples=[True]
    )
    add_firewalls: Optional[bool] = Field(
        None, description='If true, this User may add Firewalls.', examples=[True]
    )
    add_images: Optional[bool] = Field(
        None, description='If true, this User may add Images.', examples=[True]
    )
    add_linodes: Optional[bool] = Field(
        None, description='If true, this User may create Linodes.', examples=[True]
    )
    add_longview: Optional[bool] = Field(
        None,
        description='If true, this User may create Longview clients and view the current plan.',
        examples=[True],
    )
    add_nodebalancers: Optional[bool] = Field(
        None, description='If true, this User may add NodeBalancers.', examples=[True]
    )
    add_stackscripts: Optional[bool] = Field(
        None, description='If true, this User may add StackScripts.', examples=[True]
    )
    add_volumes: Optional[bool] = Field(
        None, description='If true, this User may add Volumes.', examples=[True]
    )
    cancel_account: Optional[bool] = Field(
        None,
        description='If true, this User may cancel the entire Account.',
        examples=[False],
    )
    longview_subscription: Optional[bool] = Field(
        None,
        description="If true, this User may manage the Account's Longview subscription.",
        examples=[True],
    )


class GrantsResponse(BaseModel):
    database: Optional[List[Grant]] = Field(
        None,
        description='The grants this User has for each Database that is owned by this Account.\n',
    )
    domain: Optional[List[Grant]] = Field(
        None,
        description='The grants this User has for each Domain that is owned by this Account.\n',
    )
    global_: Optional[Global] = Field(
        None,
        alias='global',
        description='A structure containing the Account-level grants a User has.\n',
    )
    image: Optional[List[Grant]] = Field(
        None,
        description='The grants this User has for each Image that is owned by this Account.\n',
    )
    linode: Optional[List[Grant]] = Field(
        None,
        description='The grants this User has for each Linode that is owned by this Account.\n',
    )
    longview: Optional[List[Grant]] = Field(
        None,
        description='The grants this User has for each Longview Client that is owned by this Account.\n',
    )
    nodebalancer: Optional[List[Grant]] = Field(
        None,
        description='The grants this User has for each NodeBalancer that is owned by this Account.\n',
    )
    stackscript: Optional[List[Grant]] = Field(
        None,
        description='The grants this User has for each StackScript that is owned by this Account.\n',
    )
    volume: Optional[List[Grant]] = Field(
        None,
        description='The grants this User has for each Block Storage Volume that is owned by this Account.\n',
    )


class Type6(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'
    ipv6_pool = 'ipv6/pool'
    ipv6_range = 'ipv6/range'


class IPAddress(BaseModel):
    address: Optional[str] = Field(
        None, description='The IP address.\n', examples=['97.107.143.141']
    )
    gateway: Optional[str] = Field(
        None,
        description='The default gateway for this address.\n',
        examples=['97.107.143.1'],
    )
    linode_id: Optional[int] = Field(
        None,
        description='The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [/networking/ipv4/assign](/docs/api/networking/#ips-to-linodes-assign) endpoint. For SLAAC and link-local addresses, this value may not be changed.\n',
        examples=[123],
    )
    prefix: Optional[int] = Field(
        None, description='The number of bits set in the subnet mask.\n', examples=[24]
    )
    public: Optional[bool] = Field(
        None,
        description='Whether this is a public or private IP address.\n',
        examples=[True],
    )
    rdns: Optional[str] = Field(
        None,
        description='The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.\n',
        examples=['test.example.org'],
    )
    region: Optional[str] = Field(
        None,
        description='The Region this IP address resides in.\n',
        examples=['us-east'],
    )
    subnet_mask: Optional[str] = Field(
        None,
        description='The mask that separates host bits from network bits for this address.\n',
        examples=['255.255.255.0'],
    )
    type: Optional[Type6] = Field(
        None, description='The type of address this is.\n', examples=['ipv4']
    )


class IPAddressPrivate(BaseModel):
    address: Optional[str] = Field(
        None, description='The private IPv4 address.\n', examples=['192.168.133.234']
    )
    gateway: Optional[str] = Field(
        None, description='The default gateway for this address.\n', examples=[None]
    )
    linode_id: Optional[int] = Field(
        None,
        description='The ID of the Linode this address currently belongs to.\n',
        examples=[123],
    )
    prefix: Optional[int] = Field(
        None, description='The number of bits set in the subnet mask.\n', examples=[17]
    )
    public: Optional[bool] = Field(
        None,
        description='Whether this is a public or private IP address.\n',
        examples=[False],
    )
    rdns: Optional[str] = Field(
        None, description='The reverse DNS assigned to this address.\n', examples=[None]
    )
    region: Optional[str] = Field(
        None, description='The Region this address resides in.\n', examples=['us-east']
    )
    subnet_mask: Optional[str] = Field(
        None,
        description='The mask that separates host bits from network bits for this address.\n',
        examples=['255.255.128.0'],
    )
    type: Optional[str] = Field(
        None, description='The type of address this is.\n', examples=['ipv4']
    )


class IPAddressV6LinkLocal(BaseModel):
    address: Optional[str] = Field(
        None,
        description='The IPv6 link-local address.\n',
        examples=['fe80::f03c:91ff:fe24:3a2f'],
    )
    gateway: Optional[str] = Field(
        None,
        description='The default gateway for this address.\n',
        examples=['fe80::1'],
    )
    linode_id: Optional[int] = Field(
        None,
        description='The ID of the Linode this address currently belongs to.\n',
        examples=[123],
    )
    prefix: Optional[int] = Field(
        None, description='The network prefix.\n', examples=[64]
    )
    public: Optional[bool] = Field(
        None,
        description='Whether this is a public or private IP address.\n',
        examples=[False],
    )
    rdns: Optional[str] = Field(
        None, description='The reverse DNS assigned to this address.\n', examples=[None]
    )
    region: Optional[str] = Field(
        None, description='The Region this address resides in.\n', examples=['us-east']
    )
    subnet_mask: Optional[str] = Field(
        None,
        description='The subnet mask.\n',
        examples=['ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'],
    )
    type: Optional[str] = Field(
        None, description='The type of address this is.\n', examples=['ipv6']
    )


class IPAddressV6Slaac(BaseModel):
    address: Optional[str] = Field(
        None, description='The address.\n', examples=['2600:3c03::f03c:91ff:fe24:3a2f']
    )
    gateway: Optional[str] = Field(
        None,
        description='The default gateway for this address.\n',
        examples=['fe80::1'],
    )
    linode_id: Optional[int] = Field(
        None,
        description='The ID of the Linode this address currently belongs to.\n',
        examples=[123],
    )
    prefix: Optional[int] = Field(
        None, description='The network prefix.\n', examples=[64]
    )
    public: Optional[bool] = Field(
        None,
        description='Whether this is a public or private IP address.\n',
        examples=[True],
    )
    rdns: Optional[str] = Field(
        None, description='The reverse DNS assigned to this address.\n', examples=[None]
    )
    region: Optional[str] = Field(
        None, description='The Region this address resides in.\n', examples=['us-east']
    )
    subnet_mask: Optional[str] = Field(
        None,
        description='The subnet mask.\n',
        examples=['ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'],
    )
    type: Optional[str] = Field(
        None, description='The type of address this is.\n', examples=['ipv6']
    )


class Assignment(BaseModel):
    address: Optional[str] = Field(
        None,
        description="The IPv4 address or IPv6 range for this assignment.\n* Must be an IPv4 address or an IPv6 range you can access in the Region specified.\n* IPv6 ranges must include a prefix length of `/56` or `/64`, for example: `2001:db8:3c4d:15::/64`.\n* Assignment of an IPv6 range to a Linode updates the route target of the range to the assigned Linode's SLAAC address.\n* May be a public or private address.\n",
        examples=['192.0.2.1'],
    )
    linode_id: Optional[int] = Field(
        None,
        description="The ID of the Linode to assign this address to. The IP's previous Linode will lose this address, and must end up with at least one public address and no more than one private address once all assignments have been made.\n",
        examples=[123],
    )


class IPAddressesAssignRequest(BaseModel):
    assignments: List[Assignment] = Field(
        ...,
        description='The list of assignments to make. You must have read_write access to all IPs being assigned and all Linodes being assigned to in order for the assignments to succeed.\n',
    )
    region: str = Field(
        ...,
        description='The ID of the Region in which these assignments are to take place. All IPs and Linodes must exist in this Region.\n',
        examples=['us-east'],
    )


class IPAddressesShareRequest(BaseModel):
    ips: List[str] = Field(
        ...,
        description='A list of secondary Linode IPs to share with the primary Linode.\n* Can include both IPv4 addresses and IPv6 ranges (omit /56 and /64 prefix lengths)\n* Can include both private and public IPv4 addresses.\n* You must have access to all of these addresses and they must be in the same Region as the primary Linode.\n* Enter an empty array to remove all shared IP addresses.\n',
        examples=[['192.0.2.1', '2001:db8:3c4d:15::']],
    )
    linode_id: int = Field(
        ...,
        description='The ID of the primary Linode that the addresses will be shared with.\n',
        examples=[123],
    )


class IPv6Pool(BaseModel):
    prefix: Optional[int] = Field(
        None,
        description='The prefix length of the address, denoting how many addresses can be assigned from this pool calculated as 2 <sup>128-prefix</sup>.\n',
        examples=[124],
    )
    range: Optional[str] = Field(
        None,
        description='The IPv6 range of addresses in this pool.\n',
        examples=['2600:3c01::2:5000:0'],
    )
    region: Optional[str] = Field(
        None,
        description='The region for this pool of IPv6 addresses.\n',
        examples=['us-east'],
    )
    route_target: Optional[str] = Field(
        None,
        description='The last address in this block of IPv6 addresses.\n',
        examples=['2600:3c01::2:5000:f'],
    )


class IPv6Range(BaseModel):
    prefix: Optional[int] = Field(
        None,
        description='The prefix length of the address, denoting how many addresses can be assigned from this range calculated as 2 <sup>128-prefix</sup>.\n',
        examples=[64],
    )
    range: Optional[str] = Field(
        None,
        description='The IPv6 range of addresses in this pool.\n',
        examples=['2600:3c01::'],
    )
    region: Optional[str] = Field(
        None,
        description='The region for this range of IPv6 addresses.\n',
        examples=['us-east'],
    )
    route_target: Optional[str] = Field(
        None,
        description='The last address in this block of IPv6 addresses.\n',
        examples=['2600:3c01::ffff:ffff:ffff:ffff'],
    )


class IPv6RangeBGP(BaseModel):
    is_bgp: Optional[bool] = Field(
        None, description='Whether this IPv6 range is shared.\n', examples=[False]
    )
    linodes: Optional[List[int]] = Field(
        None,
        description='A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.\n',
        examples=[[123]],
    )
    prefix: Optional[int] = Field(
        None,
        description='The prefix length of the address, denoting how many addresses can be assigned from this range calculated as 2 <sup>128-prefix</sup>.\n',
        examples=[64],
    )
    range: Optional[str] = Field(
        None,
        description='The IPv6 range of addresses in this pool.\n',
        examples=['2600:3c01::'],
    )
    region: Optional[str] = Field(
        None,
        description='The region for this range of IPv6 addresses.\n',
        examples=['us-east'],
    )


class Status7(Enum):
    creating = 'creating'
    pending_upload = 'pending_upload'
    available = 'available'


class Type7(Enum):
    manual = 'manual'
    automatic = 'automatic'


class Image(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Image was created.',
        examples=['2021-08-14T22:44:02'],
    )
    created_by: Optional[str] = Field(
        None,
        description='The name of the User who created this Image, or "linode" for public Images.\n',
        examples=['linode'],
    )
    deprecated: Optional[bool] = Field(
        None,
        description='Whether or not this Image is deprecated. Will only be true for deprecated public Images.\n',
        examples=[False],
    )
    description: Optional[constr(min_length=1, max_length=65000)] = Field(
        None,
        description='A detailed description of this Image.',
        examples=['Example Image description.'],
    )
    eol: Optional[datetime_aliased] = Field(
        None,
        description="The date of the public Image's planned end of life. `None` for private Images.\n",
        examples=['2026-07-01T04:00:00'],
    )
    expiry: Optional[datetime_aliased] = Field(
        None,
        description='Only Images created automatically from a deleted Linode (type=automatic) will expire.\n',
        examples=[None],
    )
    id: Optional[str] = Field(
        None, description='The unique ID of this Image.', examples=['linode/debian11']
    )
    is_public: Optional[bool] = Field(
        None,
        description='True if the Image is a public distribution image. False if Image is private Account-specific Image.',
        examples=[True],
    )
    label: Optional[str] = Field(
        None, description='A short description of the Image.\n', examples=['Debian 11']
    )
    size: Optional[int] = Field(
        None,
        description='The minimum size this Image needs to deploy. Size is in MB.\n',
        examples=[2500],
    )
    status: Optional[Status7] = Field(
        None,
        description='The current status of this Image.\n\nOnly Images in an "available" status can be deployed. Images in a "creating" status are being created from a Linode Disk, and will become "available" shortly. Images in a "pending_upload" status are waiting for data to be [uploaded](/docs/api/images/#image-upload), and become "available" after the upload and processing are complete.\n\nThe "+order_by" and "+order" operators are not available for [filtering](/docs/api/#filtering-and-sorting) on this key.\n',
        examples=['available'],
    )
    type: Optional[Type7] = Field(
        None,
        description='How the Image was created.\n\n"Manual" Images can be created at any time.\n\n"Automatic" Images are created automatically from a deleted Linode.\n',
        examples=['manual'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Image was last updated.',
        examples=['2021-08-14T22:44:02'],
    )
    vendor: Optional[str] = Field(
        None,
        description='The upstream distribution vendor. `None` for private Images.\n',
        examples=['Debian'],
    )


class TaxSummaryItem(BaseModel):
    name: Optional[str] = Field(
        None, description='The source of this tax subtotal.', examples=['PA STATE TAX']
    )
    tax: Optional[float] = Field(
        None,
        description='The amount of tax subtotal attributable to this source.',
        examples=[12.25],
    )


class Invoice(BaseModel):
    date: Optional[datetime_aliased] = Field(
        None,
        description='When this Invoice was generated.',
        examples=['2018-01-01T00:01:01'],
    )
    id: Optional[int] = Field(
        None, description="The Invoice's unique ID.", examples=[123]
    )
    label: Optional[str] = Field(
        None, description="The Invoice's display label.", examples=['Invoice']
    )
    subtotal: Optional[float] = Field(
        None,
        description='The amount of the Invoice before taxes in US Dollars.',
        examples=[120.25],
    )
    tax: Optional[float] = Field(
        None,
        description='The amount of tax levied on the Invoice in US Dollars.',
        examples=[12.25],
    )
    tax_summary: Optional[List[TaxSummaryItem]] = Field(
        None, description='The amount of tax broken down into subtotals by source.'
    )
    total: Optional[float] = Field(
        None,
        description='The amount of the Invoice after taxes in US Dollars.',
        examples=[132.5],
    )


class Type8(Enum):
    hourly = 'hourly'
    misc = 'misc'


class InvoiceItem(BaseModel):
    amount: Optional[float] = Field(
        None,
        description='The price, in US dollars, of the Invoice Item. Equal to the unit price multiplied by quantity.',
        examples=[20.2],
    )
    from_: Optional[datetime_aliased] = Field(
        None,
        alias='from',
        description='The date the Invoice Item started, based on month.',
        examples=['2018-01-01T00:01:01'],
    )
    label: Optional[str] = Field(
        None, description="The Invoice Item's display label.", examples=['Linode 123']
    )
    quantity: Optional[int] = Field(
        None,
        description='The quantity of this Item for the specified Invoice.',
        examples=[4],
    )
    tax: Optional[float] = Field(
        None,
        description='The amount of tax levied on this Item in US Dollars.',
        examples=[1.25],
    )
    to: Optional[datetime_aliased] = Field(
        None,
        description='The date the Invoice Item ended, based on month.',
        examples=['2018-01-31T11:59:59'],
    )
    total: Optional[float] = Field(
        None,
        description='The price of this Item after taxes in US Dollars.',
        examples=[21.45],
    )
    type: Optional[Type8] = Field(
        None,
        description='The type of service, ether `hourly` or `misc`.',
        examples=['hourly'],
    )
    unit_price: Optional[str] = Field(
        None,
        description='The monthly service fee in US Dollars for this Item.',
        examples=[5.05],
    )


class Architecture(Enum):
    x86_64 = 'x86_64'
    i386 = 'i386'


class Kernel(BaseModel):
    architecture: Optional[Architecture] = Field(
        None, description='The architecture of this Kernel.', examples=['x86_64']
    )
    built: Optional[datetime_aliased] = Field(
        None,
        description='The date on which this Kernel was built.',
        examples=['2018-01-01T00:01:01'],
    )
    deprecated: Optional[bool] = Field(
        None,
        description='If this Kernel is marked as deprecated, this field has a value of true; otherwise, this field is false.',
        examples=[False],
    )
    id: Optional[str] = Field(
        None,
        description='The unique ID of this Kernel.',
        examples=['linode/latest-64bit'],
    )
    kvm: Optional[bool] = Field(
        None, description='If this Kernel is suitable for KVM Linodes.', examples=[True]
    )
    label: Optional[str] = Field(
        None,
        description='The friendly name of this Kernel.',
        examples=['Latest 64 bit (4.15.7-x86_64-linode102)'],
    )
    pvops: Optional[bool] = Field(
        None,
        description='If this Kernel is suitable for paravirtualized operations.',
        examples=[False],
    )
    version: Optional[str] = Field(
        None, description='Linux Kernel version.', examples=['4.15.7']
    )
    xen: Optional[bool] = Field(
        None,
        description='If this Kernel is suitable for Xen Linodes.',
        examples=[False],
    )


class ControlPlane(BaseModel):
    high_availability: Optional[bool] = Field(
        None,
        description='Defines whether High Availability is enabled for the Control Plane Components of the cluster. Defaults to `false`.\n',
        examples=[True],
    )


class LKECluster(BaseModel):
    control_plane: Optional[ControlPlane] = Field(
        None,
        description='Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Avaialability for LKE is an **irreversible** change.\n',
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Kubernetes cluster was created.',
        examples=['2019-09-12T21:25:30Z'],
    )
    id: Optional[int] = Field(
        None, description="This Kubernetes cluster's unique ID.", examples=[1234]
    )
    k8s_version: Optional[str] = Field(
        None,
        description='The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.\n',
        examples=['1.25'],
    )
    label: Optional[constr(min_length=1, max_length=32)] = Field(
        None,
        description='This Kubernetes cluster\'s unique label for display purposes only.\nLabels have the following constraints:\n\n  * UTF-8 characters will be returned by the API using escape\n    sequences of their Unicode code points. For example, the\n    Japanese character *か* is 3 bytes in UTF-8 (`0xE382AB`). Its\n    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this\n    character and the API will return it as the escape sequence\n    using six 1 byte characters which represent 2 bytes of Unicode\n    code point (`"\\u30ab"`).\n  * 4 byte UTF-8 characters are not supported.\n  * If the label is entirely composed of UTF-8 characters, the API\n    response will return the code points using up to 193 1 byte\n    characters.\n',
        examples=['lkecluster12345'],
    )
    region: Optional[str] = Field(
        None, description="This Kubernetes cluster's location.", examples=['us-central']
    )
    tags: Optional[List[str]] = Field(
        None,
        description='An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.\n',
        examples=[['ecomm', 'blogs']],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Kubernetes cluster was updated.',
        examples=['2019-09-13T21:24:16Z'],
    )


class Autoscaler(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Whether autoscaling is enabled for this Node Pool. Defaults to `false`.',
        examples=[True],
    )
    max: Optional[conint(ge=1, le=100)] = Field(
        None,
        description="The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`.",
        examples=[12],
    )
    min: Optional[conint(ge=1, le=100)] = Field(
        None,
        description="The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`.",
        examples=[3],
    )


class Type9(Enum):
    raw = 'raw'
    ext4 = 'ext4'


class Disk2(BaseModel):
    size: Optional[int] = Field(
        None,
        description="The size of this custom disk partition in MB.\n\n  * The size of this disk partition must not exceed the capacity of the node's plan type.\n",
        examples=[1024],
    )
    type: Optional[Type9] = Field(
        None,
        description="This custom disk partition's filesystem type.\n",
        examples=['ext-4'],
    )


class Autoscaler1(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Whether autoscaling is enabled for this Node Pool. Defaults to `false`.',
        examples=[True],
    )
    max: Optional[conint(ge=1, le=100)] = Field(
        None,
        description="The maximum number of nodes to autoscale to. Defaults to the Node Pool's `count`. Defaults to the value provided by the `count` field.\n",
        examples=[12],
    )
    min: Optional[conint(ge=1, le=100)] = Field(
        None,
        description="The minimum number of nodes to autoscale to. Defaults to the Node Pool's `count`.",
        examples=[3],
    )


class Status8(Enum):
    ready = 'ready'
    not_ready = 'not_ready'


class LKENodeStatus(BaseModel):
    id: Optional[str] = Field(None, description="The Node's ID.\n", examples=['123456'])
    instance_id: Optional[str] = Field(
        None,
        description="The Linode's ID. When no Linode is currently provisioned for this Node, this will be null.\n",
        examples=[123458],
    )
    status: Optional[Status8] = Field(
        None,
        description="The Node's status as it pertains to being a Kubernetes node.\n",
        examples=['ready'],
    )


class LKEVersion(BaseModel):
    id: Optional[str] = Field(
        None,
        description='A Kubernetes version number available for deployment to a Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version.\n',
        examples=['1.25'],
    )


class Alerts(BaseModel):
    cpu: Optional[int] = Field(
        None,
        description="The percentage of CPU usage required to trigger an alert.\nIf the average CPU usage over two hours exceeds this value, we'll send you an alert.\nYour Linode's total CPU capacity is represented as 100%, multiplied by its number of\ncores.\n\nFor example, a two core Linode's CPU capacity is represented as 200%. If you want\nto be alerted at 90% of a two core Linode's CPU capacity, set the alert value to `180`.\n\nThe default value is 90% multiplied by the number of cores.\n\nIf the value is set to `0` (zero), the alert is disabled.\n",
        examples=[180],
    )
    io: Optional[int] = Field(
        None,
        description="The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to `0` (zero), this alert is disabled.\n",
        examples=[10000],
    )
    network_in: Optional[int] = Field(
        None,
        description="The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.\n",
        examples=[10],
    )
    network_out: Optional[int] = Field(
        None,
        description="The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to `0` (zero), the alert is disabled.\n",
        examples=[10],
    )
    transfer_quota: Optional[int] = Field(
        None,
        description="The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to `0` (zero), the alert is disabled.\n",
        examples=[80],
    )


class Day(Enum):
    Scheduling = 'Scheduling'
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'


class Window(Enum):
    Scheduling = 'Scheduling'
    W0 = 'W0'
    W2 = 'W2'
    W4 = 'W4'
    W6 = 'W6'
    W8 = 'W8'
    W10 = 'W10'
    W12 = 'W12'
    W14 = 'W14'
    W16 = 'W16'
    W18 = 'W18'
    W20 = 'W20'
    W22 = 'W22'


class Schedule(BaseModel):
    day: Optional[Day] = Field(
        None,
        description="The day of the week that your Linode's weekly Backup is taken.\nIf not set manually, a day will be chosen for you. Backups\nare taken every day, but backups taken on this day are\npreferred when selecting backups to retain for a longer period.\n\n\nIf not set manually, then when backups are initially enabled, this\nmay come back as `Scheduling` until the `day` is automatically selected.\n",
        examples=['Saturday'],
    )
    window: Optional[Window] = Field(
        None,
        description='The window in which your backups will be taken, in UTC. A\nbackups window is a two-hour span of time in which the backup\nmay occur.\n\n\nFor example, `W10` indicates that your backups should be\ntaken between 10:00 and 12:00. If you do not choose a backup\nwindow, one will be selected for you automatically.\n\n\nIf not set manually, when backups are initially enabled this\nmay come back as `Scheduling` until the `window` is automatically selected.\n',
        examples=['W22'],
    )


class Backups(BaseModel):
    available: Optional[bool] = Field(
        None,
        description='Whether Backups for this Linode are available for restoration.\n\nBackups undergoing maintenance are not available for restoration.\n',
        examples=[True],
    )
    enabled: Optional[bool] = Field(
        None,
        description='If this Linode has the Backup service enabled. To enable backups, see [POST /linode/instances/{linodeId}/backups/enable](/docs/api/linode-instances/#backups-enable).\n',
        examples=[True],
    )
    last_successful: Optional[datetime_aliased] = Field(
        None,
        description="The last successful backup date. 'null' if there was no previous backup.",
        examples=['2018-01-01T00:01:01'],
    )
    schedule: Optional[Schedule] = None


class Hypervisor(Enum):
    kvm = 'kvm'


class Specs(BaseModel):
    disk: Optional[int] = Field(
        None,
        description="The amount of storage space, in MB, this Linode has access to. A typical Linode will divide this space between a primary disk with an `image` deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an `image` through [POST /linode/instances](/docs/api/linode-instances/#linode-create). While this configuration is suitable for 99% of use cases, if you need finer control over your Linode's disks, see the [/linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disks-list) endpoints.\n",
        examples=[81920],
    )
    memory: Optional[int] = Field(
        None,
        description='The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile, see the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.\n',
        examples=[4096],
    )
    transfer: Optional[int] = Field(
        None,
        description='The amount of network transfer this Linode is allotted each month.',
        examples=[4000],
    )
    vcpus: Optional[int] = Field(
        None,
        description='The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile, see the [/linode/instances/{linodeId}/configs](/docs/api/linode-instances/#configuration-profiles-list) endpoints and the LinodeConfig object for more information.\n',
        examples=[2],
    )


class Status9(Enum):
    running = 'running'
    offline = 'offline'
    booting = 'booting'
    rebooting = 'rebooting'
    shutting_down = 'shutting_down'
    provisioning = 'provisioning'
    deleting = 'deleting'
    migrating = 'migrating'
    rebuilding = 'rebuilding'
    cloning = 'cloning'
    restoring = 'restoring'
    stopped = 'stopped'


class Helpers(BaseModel):
    devtmpfs_automount: Optional[bool] = Field(
        None,
        description='Populates the /dev directory early during boot without udev.  Defaults to false.\n',
        examples=[False],
    )
    distro: Optional[bool] = Field(
        None,
        description='Helps maintain correct inittab/upstart console device.',
        examples=[True],
    )
    modules_dep: Optional[bool] = Field(
        None,
        description='Creates a modules dependency file for the Kernel you run.',
        examples=[True],
    )
    network: Optional[bool] = Field(
        None, description='Automatically configures static networking.', examples=[True]
    )
    updatedb_disabled: Optional[bool] = Field(
        None,
        description='Disables updatedb cron job to avoid disk thrashing.',
        examples=[True],
    )


class RunLevel(Enum):
    default = 'default'
    single = 'single'
    binbash = 'binbash'


class VirtMode(Enum):
    paravirt = 'paravirt'
    fullvirt = 'fullvirt'


class Purpose(Enum):
    public = 'public'
    vlan = 'vlan'


class LinodeConfigInterface(BaseModel):
    ipam_address: Optional[str] = Field(
        None,
        description="This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.\n\nOnly used for `vlan` purpose interfaces. Must be an empty string or `null` for `public` purpose interfaces.\n\nThe Linode is configured to use this address for the associated interface upon reboot if Network Helper is enabled. If Network Helper is disabled, the address can be enabled with [manual static IP configuration](/docs/guides/manual-network-configuration/).\n\nMust be unique among the Linode's interfaces.\n",
        examples=['10.0.0.1/24'],
    )
    label: Optional[constr(pattern=r'/[a-z0-9-]+/', min_length=1, max_length=64)] = (
        Field(
            None,
            description="The name of this interface.\n\nRequired for `vlan` purpose interfaces. Must be an empty string or `null` for `public` purpose interfaces.\n\nIf the VLAN label is new, a VLAN is created. Up to 10 VLANs can be created in each data center region. To view your active VLANs, use the [VLANs List](/docs/api/networking/#vlans-list) endpoint.\n\nMay only consist of ASCII letters, numbers, and dashes (`-`).\n\nMust be unique among the Linode's interfaces.\n",
            examples=['example-interface'],
        )
    )
    purpose: Optional[Purpose] = Field(
        None,
        description="The type of interface.\n\n* `public`\n  * Only one `public` interface per Linode can be defined.\n  * The Linode's default public IPv4 address is assigned to the `public` interface.\n  * A Linode must have a public interface in the first/eth0 position to be reachable via the public internet upon boot without additional system configuration. If no `public` interface is configured, the Linode is not directly reachable via the public internet. In this case, access can only be established via LISH or other Linodes connected to the same VLAN.\n\n* `vlan`\n  * Configuring a `vlan` purpose interface attaches this Linode to the VLAN with the specified `label`.\n  * The Linode is configured to use the specified `ipam_address`, if any.\n",
        examples=['vlan'],
    )


class LinodeConfigInterfaces(RootModel[List[LinodeConfigInterface]]):
    root: List[LinodeConfigInterface] = Field(
        ...,
        description="An array of Network Interfaces to add to this Linode's Configuration Profile.\n\nUp to three interface objects can be entered in this array. The position in the array determines the interface to which the settings apply:\n\n- First/0:  eth0\n- Second/1: eth1\n- Third/2:  eth2\n\nWhen updating a Linode's interfaces, *each interface must be redefined*. An empty interfaces array results in a default public interface configuration only.\n\nIf no public interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.\n\n**Note:** Changes to Linode interface configurations can be enabled by rebooting the Linode.\n\n**Note:** Only Next Generation Network (NGN) data centers support VLANs. Use the Regions ([/regions](/docs/api/regions/)) endpoint to view the capabilities of data center regions.\nIf a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center,\nthe migration or cloning will not initiate. If a Linode cannot be migrated because of an incompatibility,\nyou will be prompted to select a different data center or contact support.\n\n**Note:** See the [VLANs Overview](/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.\n",
    )


class Io(BaseModel):
    io: Optional[List[List[float]]] = Field(None, description='Block/s written.')
    swap: Optional[List[List[float]]] = Field(None, description='Block/s written.')


class Netv4(BaseModel):
    in_: Optional[List[List[float]]] = Field(
        None,
        alias='in',
        description='Input stats for IPv4, measured in bits/s (bits/second).',
    )
    out: Optional[List[List[float]]] = Field(
        None, description='Output stats for IPv4, measured in bits/s (bits/second).'
    )
    private_in: Optional[List[List[float]]] = Field(
        None,
        description='Private IPv4 input statistics, measured in bits/s (bits/second).',
    )
    private_out: Optional[List[List[float]]] = Field(
        None,
        description='Private IPv4 output statistics, measured in bits/s (bits/second).',
    )


class Netv6(BaseModel):
    in_: Optional[List[List[float]]] = Field(
        None,
        alias='in',
        description='Input stats for IPv6, measured in bits/s (bits/second).',
    )
    out: Optional[List[List[float]]] = Field(
        None, description='Output stats for IPv6, measured in bits/s (bits/second).'
    )
    private_in: Optional[List[List[float]]] = Field(
        None,
        description='Private IPv6 input statistics, measured in bits/s (bits/second).',
    )
    private_out: Optional[List[List[float]]] = Field(
        None,
        description='Private IPv6 output statistics, measured in bits/s (bits/second).',
    )


class LinodeStats(BaseModel):
    cpu: Optional[List[List[float]]] = Field(
        None, description='Percentage of CPU used.\n'
    )
    io: Optional[Io] = Field(None, description='Input/Output statistics.')
    netv4: Optional[Netv4] = Field(None, description='IPv4 statistics.')
    netv6: Optional[Netv6] = Field(None, description='IPv6 statistics.')
    title: Optional[str] = Field(
        None,
        description='The title for this data set.',
        examples=['linode.com - my-linode (linode123456) - day (5 min avg)'],
    )


class Price1(BaseModel):
    hourly: Optional[int] = Field(
        None,
        description='The cost (in US dollars) per hour to add Backups service.\n',
        examples=[0.008],
    )
    monthly: Optional[int] = Field(
        None,
        description='The cost (in US dollars) per month to add Backups service.\n',
        examples=[5],
    )


class Backups1(BaseModel):
    price: Optional[Price1] = Field(
        None, description='Cost of enabling Backups for this Linode Type.'
    )


class Addons(BaseModel):
    backups: Optional[Backups1] = Field(
        None,
        description='Information about the optional Backup service offered for Linodes.\n',
    )


class Class(Enum):
    nanode = 'nanode'
    standard = 'standard'
    dedicated = 'dedicated'
    gpu = 'gpu'
    highmem = 'highmem'


class Price2(BaseModel):
    hourly: Optional[int] = Field(
        None, description='Cost (in US dollars) per hour.', examples=[0.03]
    )
    monthly: Optional[int] = Field(
        None, description='Cost (in US dollars) per month.', examples=[20]
    )


class LinodeType(BaseModel):
    addons: Optional[Addons] = Field(
        None,
        description='A list of optional add-on services for Linodes and their associated costs.\n',
    )
    class_: Optional[Class] = Field(
        None,
        alias='class',
        description="The class of the Linode Type. We currently offer five classes of Linodes:\n\n  * nanode - Nanode instances are good for low-duty workloads,\n    where performance isn't critical. **Note:** As of June 16th, 2020, Nanodes became\n    1 GB Linodes in the Cloud Manager, however, the API, the CLI, and billing will\n    continue to refer to these instances as Nanodes.\n  * standard - Standard Shared instances are good for medium-duty workloads and\n    are a good mix of performance, resources, and price. **Note:** As of June 16th, 2020,\n    Standard Linodes in the Cloud Manager became Shared Linodes, however, the API, the CLI, and\n    billing will continue to refer to these instances as Standard Linodes.\n  * dedicated - Dedicated CPU instances are good for full-duty workloads\n    where consistent performance is important.\n  * gpu - Linodes with dedicated NVIDIA Quadro &reg; RTX 6000 GPUs accelerate highly\n    specialized applications such as machine learning, AI, and video transcoding.\n  * highmem - High Memory instances favor RAM over other resources, and can be\n    good for memory hungry use cases like caching and in-memory databases.\n    All High Memory plans contain dedicated CPU cores.\n",
        examples=['standard'],
    )
    disk: Optional[int] = Field(
        None,
        description='The Disk size, in MB, of the Linode Type.\n',
        examples=[81920],
    )
    gpus: Optional[int] = Field(
        None, description='The number of GPUs this Linode Type offers.\n', examples=[0]
    )
    id: Optional[str] = Field(
        None,
        description='The ID representing the Linode Type.',
        examples=['g6-standard-2'],
    )
    label: Optional[str] = Field(
        None,
        description="The Linode Type's label is for display purposes only.\n",
        examples=['Linode 4GB'],
    )
    memory: Optional[int] = Field(
        None,
        description='Amount of RAM included in this Linode Type.\n',
        examples=[4096],
    )
    network_out: Optional[int] = Field(
        None, description='The Mbits outbound bandwidth allocation.\n', examples=[1000]
    )
    price: Optional[Price2] = Field(
        None,
        description='Cost in US dollars, broken down into hourly and monthly charges.\n',
    )
    successor: Optional[str] = Field(
        None,
        description='The Linode Type that a [mutate](/docs/api/linode-instances/#linode-upgrade) will upgrade to for a Linode of this type.  If "null", a Linode of this type may not mutate.\n',
        examples=[None],
    )
    transfer: Optional[int] = Field(
        None,
        description='The monthly outbound transfer amount, in MB.\n',
        examples=[4000],
    )
    vcpus: Optional[int] = Field(
        None,
        description='The number of VCPU cores this Linode Type offers.\n',
        examples=[2],
    )


class Login(BaseModel):
    datetime: Optional[datetime_aliased] = Field(
        None,
        description='When the login was initiated.\n',
        examples=['2018-01-01T00:01:01'],
    )
    id: Optional[int] = Field(
        None, description='The unique ID of this login object.\n', examples=[1234]
    )
    ip: Optional[str] = Field(
        None,
        description='The remote IP address that requested the login.\n',
        examples=['192.0.2.0'],
    )
    restricted: Optional[bool] = Field(
        None,
        description='True if the User that was logged into was a restricted User, false otherwise.\n',
        examples=[True],
    )
    username: Optional[str] = Field(
        None,
        description='The username of the User that was logged into.\n',
        examples=['example_user'],
    )


class Apps(BaseModel):
    apache: Optional[bool] = Field(
        None,
        description='If True, the Apache Longview Client module is monitoring Apache on your server.\n',
        examples=[True],
    )
    mysql: Optional[bool] = Field(
        None,
        description='If True, the MySQL Longview Client modules is monitoring MySQL on your server.\n',
        examples=[True],
    )
    nginx: Optional[bool] = Field(
        None,
        description='If True, the Nginx Longview Client module is monitoring Nginx on your server.\n',
        examples=[False],
    )


class LongviewClient(BaseModel):
    api_key: Optional[str] = Field(
        None,
        description='The API key for this Client, used when configuring the Longview\nClient application on your Linode.\n\nReturns as `[REDACTED]` if you do not have read-write access to this client.\n',
        examples=['BD1B4B54-D752-A76D-5A9BD8A17F39DB61'],
    )
    apps: Optional[Apps] = Field(
        None,
        description='The apps this Client is monitoring on your Linode. This is configured when you install the Longview Client application, and is present here for information purposes only.\n',
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Longview Client was created.\n',
        examples=['2018-01-01T00:01:01'],
    )
    id: Optional[int] = Field(
        None, description="This Client's unique ID.\n", examples=[789]
    )
    install_code: Optional[str] = Field(
        None,
        description='The install code for this Client, used when configuring the Longview\nClient application on your Linode.\n\nReturns as `[REDACTED]` if you do not have read-write access to this client.\n',
        examples=['BD1B5605-BF5E-D385-BA07AD518BE7F321'],
    )
    label: Optional[
        constr(pattern=r'[a-zA-Z0-9-_]{3,32}', min_length=3, max_length=32)
    ] = Field(
        None,
        description="This Client's unique label. This is for display purposes only.\n",
        examples=['client789'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Longview Client was last updated.\n',
        examples=['2018-01-01T00:01:01'],
    )


class LongviewSubscription(Enum):
    longview_3 = 'longview-3'
    longview_10 = 'longview-10'
    longview_40 = 'longview-40'
    longview_100 = 'longview-100'


class LongviewPlan(BaseModel):
    longview_subscription: Optional[LongviewSubscription] = Field(
        None,
        description='The subscription ID for a particular Longview plan. A value of `null` corresponds to Longview Free.\n\nYou can send a request to the [List Longview Subscriptions](/docs/api/longview/#longview-subscriptions-list) endpoint to receive the details of each plan.\n',
        examples=['longview-10'],
    )


class Id1(Enum):
    longview_3 = 'longview-3'
    longview_10 = 'longview-10'
    longview_40 = 'longview-40'
    longview_100 = 'longview-100'


class Price3(BaseModel):
    hourly: Optional[float] = Field(
        None,
        description='The hourly price, in US dollars, for this Subscription tier.\n',
        examples=[0.06],
    )
    monthly: Optional[float] = Field(
        None,
        description='The maximum monthly price in US Dollars for this Subscription tier. You will never be charged more than this amount per month for this subscription.\n',
        examples=[40],
    )


class LongviewSubscription1(BaseModel):
    clients_included: Optional[int] = Field(
        None,
        description='The number of Longview Clients that may be created with this Subscription tier.\n',
        examples=[10],
    )
    id: Optional[Id1] = Field(
        None,
        description='The unique ID of this Subscription tier.\n',
        examples=['longview-10'],
    )
    label: Optional[str] = Field(
        None,
        description='A display name for this Subscription tier.\n',
        examples=['Longview Pro 10 pack'],
    )
    price: Optional[Price3] = Field(
        None, description='Pricing information about this Subscription tier.\n'
    )


class Entity2(BaseModel):
    id: Optional[float] = Field(
        None,
        description='The id of the entity being affected by maintenance.\n',
        examples=[1234],
    )
    label: Optional[str] = Field(
        None,
        description='The label of the entity being affected by maintenance.\n',
        examples=['demo-linode'],
    )
    type: Optional[str] = Field(
        None, description='The type of entity.\n', examples=['Linode']
    )
    url: Optional[str] = Field(
        None,
        description='The API endpoint prefix to use in combination with the entity id to find specific information about the entity.\n',
        examples=['https://api.linode.com/v4/linode/instances/{linodeId}'],
    )


class Status10(Enum):
    completed = 'completed'
    pending = 'pending'
    started = 'started'


class Type10(Enum):
    reboot = 'reboot'
    cold_migration = 'cold_migration'
    live_migration = 'live_migration'


class Maintenance(BaseModel):
    entity: Optional[Entity2] = Field(
        None, description='The entity being affected by maintenance.\n'
    )
    reason: Optional[str] = Field(
        None,
        description='The reason maintenance is being performed.\n',
        examples=[
            "This maintenance will allow us to update the BIOS on the host's motherboard."
        ],
    )
    status: Optional[Status10] = Field(
        None,
        description='The maintenance status.\n\nMaintenance progresses in the following sequence: pending, started, then completed.\n',
        examples=['started'],
    )
    type: Optional[Type10] = Field(
        None, description='The type of maintenance.\n', examples=['reboot']
    )
    when: Optional[datetime_aliased] = Field(
        None,
        description='When the maintenance will begin.\n\n[Filterable](/docs/api/#filtering-and-sorting) with the following parameters:\n\n* A single value in date-time string format ("%Y-%m-%dT%H:%M:%S"), which returns only matches to that value.\n\n* A dictionary containing pairs of inequality operator string keys ("+or", "+gt", "+gte", "+lt", "+lte",\nor "+neq") and single date-time string format values ("%Y-%m-%dT%H:%M:%S"). "+or" accepts an array of values that\nmay consist of single date-time strings or dictionaries of inequality operator pairs.\n',
        examples=['2020-07-09T00:01:01'],
    )


class Phone(BaseModel):
    primary: Optional[str] = Field(
        None,
        description="This Contact's primary phone number.\n",
        examples=['123-456-7890'],
    )
    secondary: Optional[str] = Field(
        None, description="This Contact's secondary phone number.\n", examples=[None]
    )


class ManagedContact(BaseModel):
    email: Optional[EmailStr] = Field(
        None,
        description='The address to email this Contact to alert them of issues.\n',
        examples=['john.doe@example.org'],
    )
    group: Optional[constr(min_length=2, max_length=50)] = Field(
        None,
        description='A grouping for this Contact. This is for display purposes only.\n',
        examples=['on-call'],
    )
    id: Optional[int] = Field(
        None, description="This Contact's unique ID.\n", examples=[567]
    )
    name: Optional[
        constr(pattern=r'[a-zA-Z0-9-_ ]{2,64}', min_length=2, max_length=64)
    ] = Field(None, description='The name of this Contact.\n', examples=['John Doe'])
    phone: Optional[Phone] = Field(
        None, description='Information about how to reach this Contact by phone.\n'
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Contact was last updated.\n',
        examples=['2018-01-01T00:01:01'],
    )


class ManagedCredential(BaseModel):
    id: Optional[int] = Field(
        None, description="This Credential's unique ID.\n", examples=[9991]
    )
    label: Optional[
        constr(pattern=r'[a-zA-Z0-9-_ \.]{2,75}', min_length=2, max_length=75)
    ] = Field(
        None,
        description='The unique label for this Credential. This is for display purposes only.\n',
        examples=['prod-password-1'],
    )
    last_decrypted: Optional[datetime_aliased] = Field(
        None,
        description='The date this Credential was last decrypted by a member of Linode special forces.\n',
        examples=['2018-01-01T00:01:01'],
    )


class Type11(Enum):
    ticket = 'ticket'


class Entity3(BaseModel):
    id: Optional[int] = Field(None, description="This ticket's ID\n", examples=[98765])
    label: Optional[str] = Field(
        None,
        description='The summary for this Ticket.\n',
        examples=['Managed Issue opened!'],
    )
    type: Optional[Type11] = Field(
        None,
        description='The type of entity this is. In this case, it is always a Ticket.\n',
        examples=['ticket'],
    )
    url: Optional[str] = Field(
        None,
        description='The relative URL where you can access this Ticket.\n',
        examples=['/support/tickets/98765'],
    )


class ManagedIssue(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Issue was created. Issues are created in response to issues detected with Managed Services, so this is also when the Issue was detected.\n',
        examples=['2018-01-01T00:01:01'],
    )
    entity: Optional[Entity3] = Field(
        None, description='The ticket this Managed Issue opened.\n'
    )
    id: Optional[int] = Field(
        None, description="This Issue's unique ID.\n", examples=[823]
    )
    services: Optional[List[int]] = Field(
        None,
        description='An array of Managed Service IDs that were affected by this Issue.\n',
    )


class Ssh(BaseModel):
    access: Optional[bool] = Field(
        True,
        description='If true, Linode special forces may access this Linode over ssh to respond to Issues.\n',
        examples=[True],
    )
    ip: Optional[str] = Field(
        'any',
        description="The IP Linode special forces should use to access this Linode\nwhen responding to an Issue.\n\nBy default, any of a Linode's IP addresses can be used for incident response access.\n",
        examples=['203.0.113.1'],
    )
    port: Optional[conint(ge=1, le=65535)] = Field(
        None,
        description='The port Linode special forces should use to access this Linode\nover ssh to respond to an Issue.\n\nThe default `null` value corresponds to port 22.\n',
        examples=[22],
    )
    user: Optional[constr(min_length=0, max_length=32)] = Field(
        None,
        description="The specific user, if any, Linode's special forces should use when accessing this\nLinode to respond to an issue.\n\nThe default `null` value corresponds to the root user.\n",
        examples=['linode'],
    )


class ManagedLinodeSettings(BaseModel):
    group: Optional[str] = Field(
        None,
        description='The group of the Linode these Settings are for. This is for display purposes only.\n',
        examples=['linodes'],
    )
    id: Optional[int] = Field(
        None,
        description='The ID of the Linode these Settings are for.\n',
        examples=[123],
    )
    label: Optional[str] = Field(
        None,
        description='The label of the Linode these Settings are for.\n',
        examples=['linode123'],
    )
    ssh: Optional[Ssh] = Field(None, description='The SSH settings for this Linode.\n')


class ServiceType(Enum):
    url = 'url'
    tcp = 'tcp'


class Status11(Enum):
    disabled = 'disabled'
    pending = 'pending'
    ok = 'ok'
    problem = 'problem'


class ManagedService(BaseModel):
    address: Optional[constr(min_length=3, max_length=100)] = Field(
        None,
        description='The URL at which this Service is monitored.\n\nURL parameters such as `?no-cache=1` are preserved.\n\nURL fragments/anchors such as `#monitor` are **not** preserved.\n',
        examples=['https://example.org'],
    )
    body: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description='What to expect to find in the response body for the Service to be considered up.\n',
        examples=['it worked'],
    )
    consultation_group: Optional[constr(min_length=0, max_length=50)] = Field(
        None,
        description='The group of ManagedContacts who should be notified or consulted with when an Issue is detected.\n',
        examples=['on-call'],
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Managed Service was created.',
        examples=['2018-01-01T00:01:01'],
    )
    credentials: Optional[List[int]] = Field(
        None,
        description='An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.\n',
    )
    id: Optional[int] = Field(
        None, description="This Service's unique ID.\n", examples=[9944]
    )
    label: Optional[
        constr(pattern=r'[a-zA-Z0-9-_ \.]{3,64}', min_length=3, max_length=64)
    ] = Field(
        None,
        description='The label for this Service. This is for display purposes only.\n',
        examples=['prod-1'],
    )
    notes: Optional[str] = Field(
        None,
        description='Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.\n',
        examples=['The service name is my-cool-application'],
    )
    region: Optional[str] = Field(
        None,
        description='The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.\n',
        examples=[None],
    )
    service_type: Optional[ServiceType] = Field(
        None, description='How this Service is monitored.\n', examples=['url']
    )
    status: Optional[Status11] = Field(
        None, description='The current status of this Service.\n', examples=['ok']
    )
    timeout: Optional[conint(ge=1, le=255)] = Field(
        None,
        description='How long to wait, in seconds, for a response before considering the Service to be down.\n',
        examples=[30],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Managed Service was last updated.',
        examples=['2018-03-01T00:01:01'],
    )


class Transfer(BaseModel):
    in_: Optional[float] = Field(
        None,
        alias='in',
        description='The total outbound transfer, in MB, used for this NodeBalancer this month.\n',
        examples=[28.91200828552246],
    )
    out: Optional[float] = Field(
        None,
        description='The total inbound transfer, in MB, used for this NodeBalancer this month.\n',
        examples=[3.5487728118896484],
    )
    total: Optional[float] = Field(
        None,
        description='The total transfer, in MB, used by this NodeBalancer this month.\n',
        examples=[32.46078109741211],
    )


class NodeBalancer(BaseModel):
    client_conn_throttle: Optional[conint(ge=0, le=20)] = Field(
        None,
        description='Throttle connections per second.  Set to 0 (zero) to disable throttling.\n',
        examples=[0],
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this NodeBalancer was created.\n',
        examples=['2018-01-01T00:01:01'],
    )
    hostname: Optional[str] = Field(
        None,
        description="This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.\n",
        examples=['192.0.2.1.ip.linodeusercontent.com'],
    )
    id: Optional[int] = Field(
        None, description="This NodeBalancer's unique ID.\n", examples=[12345]
    )
    ipv4: Optional[str] = Field(
        None,
        description="This NodeBalancer's public IPv4 address.\n",
        examples=['203.0.113.1'],
    )
    ipv6: Optional[str] = Field(
        None, description="This NodeBalancer's public IPv6 address.\n", examples=[None]
    )
    label: Optional[
        constr(pattern=r'[a-zA-Z0-9-_]{3,32}', min_length=3, max_length=32)
    ] = Field(
        None,
        description="This NodeBalancer's label. These must be unique on your Account.\n",
        examples=['balancer12345'],
    )
    region: Optional[str] = Field(
        None,
        description='The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.\n',
        examples=['us-east'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='An array of Tags applied to this object.  Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )
    transfer: Optional[Transfer] = Field(
        None,
        description='Information about the amount of transfer this NodeBalancer has had so far this month.\n',
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this NodeBalancer was last updated.\n',
        examples=['2018-03-01T00:01:01'],
    )
    type: Literal['NodeBalancer']


class Algorithm(Enum):
    roundrobin = 'roundrobin'
    leastconn = 'leastconn'
    source = 'source'


class Check(Enum):
    none = 'none'
    connection = 'connection'
    http = 'http'
    http_body = 'http_body'


class CipherSuite(Enum):
    recommended = 'recommended'
    legacy = 'legacy'


class NodesStatus(BaseModel):
    down: Optional[int] = Field(
        None,
        description='The number of backends considered to be "DOWN" and unhealthy.  These are not in rotation, and not serving requests.\n',
        examples=[0],
    )
    up: Optional[int] = Field(
        None,
        description='The number of backends considered to be "UP" and healthy, and that are serving requests.\n',
        examples=[4],
    )


class Protocol1(Enum):
    http = 'http'
    https = 'https'
    tcp = 'tcp'


class ProxyProtocol(Enum):
    none = 'none'
    v1 = 'v1'
    v2 = 'v2'


class Stickiness(Enum):
    none = 'none'
    table = 'table'
    http_cookie = 'http_cookie'


class NodeBalancerConfig(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        'roundrobin',
        description='What algorithm this NodeBalancer should use for routing traffic to backends.\n',
        examples=['roundrobin'],
    )
    check: Optional[Check] = Field(
        'none',
        description='The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.\n* If `none` no check is performed.\n* `connection` requires only a connection to the backend to succeed.\n* `http` and `http_body` rely on the backend serving HTTP, and that\n  the response returned matches what is expected.\n',
        examples=['http_body'],
    )
    check_attempts: Optional[conint(ge=1, le=30)] = Field(
        3,
        description='How many times to attempt a check before considering a backend to be down.\n',
        examples=[3],
    )
    check_body: Optional[str] = Field(
        None,
        description='This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.\n',
        examples=['it works'],
    )
    check_interval: Optional[int] = Field(
        31,
        description='How often, in seconds, to check that backends are up and serving requests.\n\nMust be greater than `check_timeout`.\n',
        examples=[90],
    )
    check_passive: Optional[bool] = Field(
        True,
        description='If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.\n',
        examples=[True],
    )
    check_path: Optional[constr(pattern=r'^[a-zA-Z0-9\/\-%?&=.]*$')] = Field(
        None,
        description='The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n',
        examples=['/test'],
    )
    check_timeout: Optional[conint(ge=1, le=30)] = Field(
        30,
        description='How long, in seconds, to wait for a check attempt before considering it failed.\n\nMust be less than `check_interval`.\n',
        examples=[10],
    )
    cipher_suite: Optional[CipherSuite] = Field(
        'recommended',
        description='What ciphers to use for SSL connections served by this NodeBalancer.\n\n* `legacy` is considered insecure and should only be used if necessary.\n',
        examples=['recommended'],
    )
    id: Optional[int] = Field(
        None, description="This config's unique ID", examples=[4567]
    )
    nodebalancer_id: Optional[int] = Field(
        None,
        description='The ID for the NodeBalancer this config belongs to.\n',
        examples=[12345],
    )
    nodes_status: Optional[NodesStatus] = Field(
        None,
        description='A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.\n',
    )
    port: Optional[conint(ge=1, le=65535)] = Field(
        80,
        description="The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.\n",
        examples=[80],
    )
    protocol: Optional[Protocol1] = Field(
        'http',
        description='The protocol this port is configured to serve.\n\n* The `http` and `tcp` protocols do not support `ssl_cert` and `ssl_key`.\n\n* The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.\n\nReview our guide on [Available Protocols](/docs/products/networking/nodebalancers/guides/protocols/) for information on protocol features.\n',
        examples=['http'],
    )
    proxy_protocol: Optional[ProxyProtocol] = Field(
        'none',
        description="ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled.\n\n* If ommited, or set to `none`, the NodeBalancer doesn't send any auxilary data over TCP connections. This is the default.\n* If set to `v1`, the human-readable header format (Version 1) is used. Requires `tcp` protocol.\n* If set to `v2`, the binary header format (Version 2) is used. Requires `tcp` protocol.\n",
        examples=['none'],
    )
    ssl_cert: Optional[str] = Field(
        None,
        description='The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL\ncertificate and Certificate Authority chain) that should be served on this\nNodeBalancerConfig\'s port.\n\nLine breaks must be represented as "\\n" in the string for requests (but not when using the Linode CLI).\n\n[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.\n\nThe contents of this field will not be shown in any responses that display\nthe NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field\nappears.\n\nThe read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig\nresponse are automatically derived from your certificate. Please refer to these fields to\nverify that the appropriate certificate was assigned to your NodeBalancerConfig.\n',
        examples=['<REDACTED>'],
    )
    ssl_commonname: Optional[str] = Field(
        None,
        description='The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n',
        examples=['www.example.com'],
    )
    ssl_fingerprint: Optional[str] = Field(
        None,
        description='The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n',
        examples=['00:01:02:03:04:05:06:07:08:09:0A:0B:0C:0D:0E:0F:10:11:12:13'],
    )
    ssl_key: Optional[str] = Field(
        None,
        description='The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.\n\nLine breaks must be represented as "\\n" in the string for requests (but not when using the Linode CLI).\n\nThe contents of this field will not be shown in any responses that display\nthe NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field\nappears.\n\nThe read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig\nresponse are automatically derived from your certificate. Please refer to these fields to\nverify that the appropriate certificate was assigned to your NodeBalancerConfig.\n',
        examples=['<REDACTED>'],
    )
    stickiness: Optional[Stickiness] = Field(
        'none',
        description='Controls how session stickiness is handled on this port.\n* If set to `none` connections will always be assigned a backend based on the algorithm configured.\n* If set to `table` sessions from the same remote address will be routed to the same\n  backend.\n\n* For HTTP or HTTPS clients, `http_cookie` allows sessions to be\n  routed to the same backend based on a cookie set by the NodeBalancer.\n',
        examples=['http_cookie'],
    )


class Mode(Enum):
    accept = 'accept'
    reject = 'reject'
    drain = 'drain'
    backup = 'backup'


class Status12(Enum):
    unknown = 'unknown'
    UP = 'UP'
    DOWN = 'DOWN'


class NodeBalancerNode(BaseModel):
    address: Optional[str] = Field(
        None,
        description='The private IP Address where this backend can be reached. This _must_ be a private IP address.\n',
        examples=['192.168.210.120:80'],
    )
    config_id: Optional[int] = Field(
        None,
        description='The NodeBalancer Config ID that this Node belongs to.\n',
        examples=[4567],
    )
    id: Optional[int] = Field(
        None, description="This node's unique ID.", examples=[54321]
    )
    label: Optional[
        constr(pattern=r'[a-zA-Z0-9-_.]{3,32}', min_length=3, max_length=32)
    ] = Field(
        None,
        description='The label for this node.  This is for display purposes only.\n',
        examples=['node54321'],
    )
    mode: Optional[Mode] = Field(
        None,
        description='The mode this NodeBalancer should use when sending traffic to this backend.\n* If set to `accept` this backend is accepting traffic.\n* If set to `reject` this backend will not receive traffic.\n* If set to `drain` this backend will not receive _new_ traffic, but connections already\n  pinned to it will continue to be routed to it.\n\n* If set to `backup`, this backend will only receive traffic if all `accept` nodes\n  are down.\n',
        examples=['accept'],
    )
    nodebalancer_id: Optional[int] = Field(
        None,
        description='The NodeBalancer ID that this Node belongs to.\n',
        examples=[12345],
    )
    status: Optional[Status12] = Field(
        None,
        description='The current status of this node, based on the configured checks of its NodeBalancer Config.\n',
        examples=['UP'],
    )
    weight: Optional[conint(ge=1, le=255)] = Field(
        None,
        description='Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.\n',
        examples=[50],
    )


class Traffic(BaseModel):
    in_: Optional[List[float]] = Field(
        None,
        alias='in',
        description='An array of key/value pairs representing unix timestamp and reading for inbound traffic.\n',
    )
    out: Optional[List[float]] = Field(
        None,
        description='An array of key/value pairs representing unix timestamp and reading for outbound traffic.\n',
    )


class Data(BaseModel):
    connections: Optional[List[float]] = Field(
        None,
        description='An array of key/value pairs representing unix timestamp and reading for connections to this NodeBalancer.\n',
    )
    traffic: Optional[Traffic] = Field(
        None, description='Traffic statistics for this NodeBalancer.\n'
    )


class NodeBalancerStats(BaseModel):
    data: Optional[Data] = Field(
        None, description='The data returned about this NodeBalancers.\n'
    )
    title: Optional[str] = Field(
        None,
        description='The title for the statistics generated in this response.\n',
        examples=['linode.com - balancer12345 (12345) - day (5 min avg)'],
    )


class Entity4(BaseModel):
    id: Optional[int] = Field(
        None,
        description="The unique ID of the Notification's entity, based on the entity type.\n",
        examples=[3456],
    )
    label: Optional[str] = Field(
        None,
        description="The current label for this Notification's entity.\n",
        examples=['Linode not booting.'],
    )
    type: Optional[str] = Field(
        None, description='The type of entity this is related to.', examples=['ticket']
    )
    url: Optional[str] = Field(
        None,
        description='The URL where you can access the object this Notification is for. If a relative URL, it is relative to the domain you retrieved the Notification from.\n',
        examples=['/support/tickets/3456'],
    )


class Severity(Enum):
    minor = 'minor'
    major = 'major'
    critical = 'critical'


class Type12(Enum):
    migration_scheduled = 'migration_scheduled'
    migration_imminent = 'migration_imminent'
    migration_pending = 'migration_pending'
    reboot_scheduled = 'reboot_scheduled'
    outage = 'outage'
    payment_due = 'payment_due'
    ticket_important = 'ticket_important'
    ticket_abuse = 'ticket_abuse'
    notice = 'notice'
    maintenance = 'maintenance'
    promotion = 'promotion'


class Notification(BaseModel):
    body: Optional[str] = Field(
        None,
        description='A full description of this Notification, in markdown format.  Not all Notifications include bodies.\n',
        examples=[None],
    )
    entity: Optional[Entity4] = Field(
        None, description='Detailed information about the Notification.'
    )
    label: Optional[str] = Field(
        None,
        description='A short description of this Notification.\n',
        examples=['You have an important ticket open!'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable description of the Notification.',
        examples=['You have an important ticket open!'],
    )
    severity: Optional[Severity] = Field(
        None,
        description='The severity of this Notification.  This field can be used to decide how prominently to display the Notification, what color to make the display text, etc.\n',
        examples=['major'],
    )
    type: Optional[Type12] = Field(
        None,
        description='The type of Notification this is.',
        examples=['ticket_important'],
    )
    until: Optional[datetime_aliased] = Field(
        None,
        description='If this Notification has a duration, this will be the ending time for the Event/action. For example, if there is scheduled maintenance for one of our systems, `until` would be set to the end of the maintenance window.\n',
        examples=[None],
    )
    when: Optional[datetime_aliased] = Field(
        None,
        description='If this Notification is of an Event that will happen at a fixed, future time, this is when the named action will be taken. For example, if a Linode is to be migrated in response to a Security Advisory, this field will contain the approximate time the Linode will be taken offline for migration.\n',
        examples=[None],
    )


class Status13(Enum):
    active = 'active'
    disabled = 'disabled'
    suspended = 'suspended'


class OAuthClient(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The OAuth Client ID.  This is used to identify the client, and is a publicly-known value (it is not a secret).\n',
        examples=['2737bf16b39ab5d7b4a1'],
    )
    label: Optional[constr(min_length=1, max_length=512)] = Field(
        None,
        description='The name of this application.  This will be presented to users when they are asked to grant it access to their Account.\n',
        examples=['Test_Client_1'],
    )
    public: Optional[bool] = Field(
        False,
        description='If this is a public or private OAuth Client.  Public clients have a slightly different authentication workflow than private clients.  See the <a target="_top" href="https://oauth.net/2/">OAuth spec</a> for more details.\n',
        examples=[False],
    )
    redirect_uri: Optional[str] = Field(
        None,
        description='The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.\n',
        examples=['https://example.org/oauth/callback'],
    )
    secret: Optional[str] = Field(
        None,
        description='The OAuth Client secret, used in the OAuth exchange.  This is returned as `<REDACTED>` except when an OAuth Client is created or its secret is reset.  This is a secret, and should not be shared or disclosed publicly.\n',
        examples=['<REDACTED>'],
    )
    status: Optional[Status13] = Field(
        None,
        description='The status of this application.  `active` by default.\n',
        examples=['active'],
    )
    thumbnail_url: Optional[str] = Field(
        None,
        description="The URL where this client's thumbnail may be viewed, or `null` if this client does not have a thumbnail set.\n",
        examples=[
            'https://api.linode.com/v4/account/clients/2737bf16b39ab5d7b4a1/thumbnail'
        ],
    )


class ObjectStorageBucket(BaseModel):
    cluster: Optional[str] = Field(
        None,
        description='The ID of the Object Storage Cluster this bucket is in.',
        examples=['us-east-1'],
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this bucket was created.',
        examples=['2019-01-01T01:23:45'],
    )
    hostname: Optional[str] = Field(
        None,
        description='The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made public.\n',
        examples=['example-bucket.us-east-1.linodeobjects.com'],
    )
    label: Optional[str] = Field(
        None, description='The name of this bucket.', examples=['example-bucket']
    )
    objects: Optional[int] = Field(
        None, description='The number of objects stored in this bucket.\n', examples=[4]
    )
    size: Optional[int] = Field(
        None, description='The size of the bucket in bytes.', examples=[188318981]
    )


class Status14(Enum):
    available = 'available'
    unavailable = 'unavailable'


class ObjectStorageCluster(BaseModel):
    domain: Optional[str] = Field(
        None,
        description='The base URL for this cluster, used for connecting with third-party clients.',
        examples=['us-east-1.linodeobjects.com'],
    )
    id: Optional[str] = Field(
        None, description='The unique ID for this cluster.', examples=['us-east-1']
    )
    region: Optional[str] = Field(
        None,
        description='The region where this cluster is located.',
        examples=['us-east'],
    )
    static_site_domain: Optional[str] = Field(
        None,
        description='The base URL for this cluster used when hosting static sites.',
        examples=['website-us-east-1.linodeobjects.com'],
    )
    status: Optional[Status14] = Field(
        None, description="This cluster's status.", examples=['available']
    )


class Permissions1(Enum):
    read_write = 'read_write'
    read_only = 'read_only'


class BucketAcces(BaseModel):
    bucket_name: Optional[str] = Field(
        None,
        description='The unique label of the bucket to which the key will grant limited access.',
        examples=['example-bucket'],
    )
    cluster: Optional[str] = Field(
        None,
        description='The Object Storage cluster where a bucket to which the key is granting access is hosted.',
        examples=['ap-south-1'],
    )
    permissions: Optional[Permissions1] = Field(
        None,
        description="This Limited Access Key's permissions for the selected bucket.",
        examples=['read_only'],
    )


class ObjectStorageKey(BaseModel):
    access_key: Optional[str] = Field(
        None,
        description="This keypair's access key. This is not secret.",
        examples=['KVAKUTGBA4WTR2NSJQ81'],
    )
    bucket_access: Optional[List[BucketAcces]] = Field(
        None,
        description="Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key's access to only the bucket(s) declared in this array and define their bucket-level permissions.\n\n\n  Limited Access Keys can:\n\n  * [list all buckets](/docs/api/object-storage/#object-storage-buckets-list) available on this Account, but cannot perform any actions on a bucket unless it has access to the bucket.\n\n\n  * [create new buckets](/docs/api/object-storage/#object-storage-bucket-create), but do not have any access to the buckets it creates, unless explicitly given access to them.\n\n\n  **Note:** You can create an Object Storage Limited Access Key without access to any buckets.\n  This is achieved by sending a request with an empty `bucket_access` array.\n\n\n  **Note:** If this field is omitted, a regular unlimited access key is issued.\n",
    )
    id: Optional[int] = Field(
        None, description="This keypair's unique ID", examples=[123]
    )
    label: Optional[str] = Field(
        None,
        description='The label given to this key. For display purposes only.',
        examples=['my-key'],
    )
    limited: Optional[bool] = Field(
        None,
        description="Whether or not this key is a limited access key. Will return `false` if this key grants full access to all buckets on the user's account.",
        examples=[True],
    )
    secret_key: Optional[str] = Field(
        None,
        description="This keypair's secret key. Only returned on key creation.",
        examples=['OiA6F5r0niLs3QA2stbyq7mY5VCV7KqOzcmitmHw'],
    )


class ObjectStorageObject(BaseModel):
    etag: Optional[str] = Field(
        None,
        description='An MD-5 hash of the object. `null` if this object represents a prefix.\n',
        examples=['9f254c71e28e033bf9e0e5262e3e72ab'],
    )
    is_truncated: Optional[bool] = Field(
        None,
        description='Designates if there is another page of bucket objects.',
        examples=[True],
    )
    last_modified: Optional[datetime_aliased] = Field(
        None,
        description='The date and time this object was last modified. `null` if this object represents a prefix.\n',
        examples=['2019-01-01T01:23:45'],
    )
    name: Optional[str] = Field(
        None, description='The name of this object or prefix.\n', examples=['example']
    )
    next_marker: Optional[str] = Field(
        None,
        description='Returns the value you should pass to the `marker` query parameter to get the next page of objects. If there is no next page, `null` will be returned.\n',
        examples=['bd021c21-e734-4823-97a4-58b41c2cd4c8.892602.184'],
    )
    owner: Optional[str] = Field(
        None,
        description='The owner of this object, as a UUID. `null` if this object represents a prefix.\n',
        examples=['bfc70ab2-e3d4-42a4-ad55-83921822270c'],
    )
    size: Optional[int] = Field(
        None,
        description='The size of this object, in bytes. `null` if this object represents a prefix.\n',
        examples=[123],
    )


class ObjectStorageSSL(BaseModel):
    certificate: str = Field(
        ...,
        description='Your Base64 encoded and PEM formatted SSL certificate.\n\nLine breaks must be represented as "\\n" in the string for requests (but not when using the Linode CLI)\n',
        examples=[
            '-----BEGIN CERTIFICATE-----\nCERTIFICATE_INFORMATION\n-----END CERTIFICATE-----'
        ],
    )
    private_key: str = Field(
        ...,
        description='The private key associated with this TLS/SSL certificate.\n\nLine breaks must be represented as "\\n" in the string for requests (but not when using the Linode CLI)\n',
        examples=[
            '-----BEGIN PRIVATE KEY-----\nPRIVATE_KEY_INFORMATION\n-----END PRIVATE KEY-----'
        ],
    )


class ObjectStorageSSLResponse(BaseModel):
    ssl: Optional[bool] = Field(
        None,
        description='A boolean indicating if this Bucket has a corresponding TLS/SSL certificate that was uploaded by an Account user.\n',
        examples=[True],
    )


class PaginationEnvelope(BaseModel):
    page: Optional[int] = Field(
        None, description='The current [page](/docs/api/#pagination).', examples=[1]
    )
    pages: Optional[int] = Field(
        None,
        description='The total number of [pages](/docs/api/#pagination).',
        examples=[1],
    )
    results: Optional[int] = Field(
        None, description='The total number of results.', examples=[1]
    )


class PayPal(BaseModel):
    cancel_url: str = Field(
        ...,
        description='The URL to have PayPal redirect to when Payment is cancelled.',
        examples=['https://example.org'],
    )
    redirect_url: str = Field(
        ...,
        description='The URL to have PayPal redirect to when Payment is approved.',
        examples=['https://example.org'],
    )
    usd: str = Field(
        ...,
        description="The payment amount in USD. Minimum accepted value of $5 USD. Maximum accepted value of $500 USD or credit card payment limit; whichever value is highest. PayPal's maximum transaction limit is $10,000 USD.",
        examples=['120.50'],
    )


class PayPalData(BaseModel):
    email: Optional[str] = Field(
        None,
        description='The email address associated with your PayPal account.',
        examples=['example@linode.com'],
    )
    paypal_id: Optional[str] = Field(
        None,
        description='PayPal Merchant ID associated with your PayPal account.',
        examples=['ABC1234567890'],
    )
    type: Literal['PayPalData']


class PayPalExecute(BaseModel):
    payer_id: str = Field(
        ...,
        description='The PayerID returned by PayPal during the transaction authorization process.\n',
        examples=['ABCDEFGHIJKLM'],
    )
    payment_id: str = Field(
        ...,
        description='The PaymentID returned from [POST /account/payments/paypal](/docs/api/account/#paypal-payment-stage) that has been approved with PayPal.\n',
        examples=['PAY-1234567890ABCDEFGHIJKLMN'],
    )


class Payment(BaseModel):
    date: Optional[datetime_aliased] = Field(
        None, description='When the Payment was made.', examples=['2018-01-15T00:01:01']
    )
    id: Optional[int] = Field(
        None, description='The unique ID of the Payment.', examples=[123]
    )
    usd: Optional[int] = Field(
        None,
        description='The amount, in US dollars, of the Payment.',
        examples=['120.50'],
    )


class Type13(Enum):
    credit_card = 'credit_card'
    google_pay = 'google_pay'
    paypal = 'paypal'


class PaymentMethod(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When the Payment Method was added to the Account.',
        examples=['2018-01-15T00:01:01'],
    )
    data: Optional[Union[CreditCardData, GooglePayData, PayPalData]] = Field(
        None, discriminator='type'
    )
    id: Optional[int] = Field(
        None, description='The unique ID of this Payment Method.', examples=[123]
    )
    is_default: Optional[bool] = Field(
        None,
        description='Whether this Payment Method is the default method for automatically processing service charges.\n',
        examples=[True],
    )
    type: Optional[Type13] = Field(
        None, description='The type of Payment Method.', examples=['credit_card']
    )


class PaymentRequest(BaseModel):
    cvv: Optional[str] = Field(
        None,
        description='CVV (Card Verification Value) of the credit card to be used for the Payment. Required if paying by credit card.\n',
        examples=['123'],
    )
    payment_method_id: Optional[int] = Field(
        None,
        description='The ID of the Payment Method to apply to the Payment.\n',
        examples=[123],
    )
    usd: constr(pattern=r'^\$?\d+\.\d{2}$') = Field(
        ...,
        description='The amount in US Dollars of the Payment.\n\n* Can begin with or without `$`.\n* Commas (`,`) are not accepted.\n* Must end with a decimal expression, such as `.00` or `.99`.\n* Minimum: `$5.00` or the Account balance, whichever is lower.\n* Maximum: `$2000.00` or the Account balance up to `$50000.00`, whichever is greater.\n',
        examples=['$120.50'],
    )


class PersonalAccessToken(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='The date and time this token was created.\n',
        examples=['2018-01-01T00:01:01'],
    )
    expiry: Optional[datetime_aliased] = Field(
        None,
        description='When this token will expire.  Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated.  Tokens may be created with "null" as their expiry and will never expire unless revoked.\n',
        examples=['2018-01-01T13:46:32'],
    )
    id: Optional[int] = Field(
        None,
        description="This token's unique ID, which can be used to revoke it.\n",
        examples=[123],
    )
    label: Optional[constr(min_length=1, max_length=100)] = Field(
        None,
        description="This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.\n",
        examples=['linode-cli'],
    )
    scopes: Optional[str] = Field(
        None,
        description='The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the <a target="_top" href="https://github.com/linode/linode-cli">Linode CLI</a>, require tokens with access to `*`. Tokens with more restrictive scopes are generally more secure.\n',
        examples=['*'],
    )
    token: Optional[str] = Field(
        None,
        description='The token used to access the API.  When the token is created, the full token is returned here.  Otherwise, only the first 16 characters are returned.\n',
        examples=['abcdefghijklmnop'],
    )


class AuthenticationType(Enum):
    password = 'password'
    github = 'github'


class LishAuthMethod(Enum):
    password_keys = 'password_keys'
    keys_only = 'keys_only'
    disabled = 'disabled'


class Referrals(BaseModel):
    code: Optional[str] = Field(
        None,
        description='Your referral code.  If others use this when signing up for Linode, you will receive account credit.\n',
        examples=['871be32f49c1411b14f29f618aaf0c14637fb8d3'],
    )
    completed: Optional[int] = Field(
        None,
        description='The number of completed signups with your referral code.\n',
        examples=[0],
    )
    credit: Optional[int] = Field(
        None,
        description='The amount of account credit in US Dollars issued to you through the referral program.\n',
        examples=[0],
    )
    pending: Optional[int] = Field(
        None,
        description='The number of pending signups with your referral code.  You will not receive credit for these signups until they are completed.\n',
        examples=[0],
    )
    total: Optional[int] = Field(
        None,
        description='The number of users who have signed up with your referral code.\n',
        examples=[0],
    )
    url: Optional[str] = Field(
        None,
        description='Your referral url, used to direct others to sign up for Linode with your referral code.\n',
        examples=['https://www.linode.com/?r=871be32f49c1411b14f29f618aaf0c14637fb8d3'],
    )


class Profile(BaseModel):
    authentication_type: Optional[AuthenticationType] = Field(
        None,
        description="This account's Cloud Manager authentication type. Authentication types are chosen through\nCloud Manager and authorized when logging into your account. These authentication types are either\nthe user's password (in conjunction with their username), or the name of their\nindentity provider such as GitHub. For example, if a user:\n\n- Has never used Third-Party Authentication, their authentication type will be `password`.\n- Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`).\n- Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.\n\n\n**Note:** This functionality may not yet be available in Cloud Manager.\nSee the [Cloud Manager Changelog](/changelog/cloud-manager/) for the latest updates.\n",
        examples=['password'],
    )
    authorized_keys: Optional[List[str]] = Field(
        None,
        description='The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is "disabled."\n',
        examples=[None],
    )
    email: Optional[EmailStr] = Field(
        None,
        description='Your email address.  This address will be used for communication with Linode as necessary.\n',
        examples=['example-user@gmail.com'],
    )
    email_notifications: Optional[bool] = Field(
        None,
        description='If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.\n',
        examples=[True],
    )
    ip_whitelist_enabled: Optional[bool] = Field(
        None,
        description='If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.\n\nIf you disable this setting, you will not be able to re-enable it.\n',
        examples=[False],
    )
    lish_auth_method: Optional[LishAuthMethod] = Field(
        None,
        description="The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](/docs/guides/lish/).\n* `keys_only` is the most secure if you intend to use Lish.\n* `disabled` is recommended if you do not intend to use Lish at all.\n* If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [View Profile](/docs/api/profile/#profile-view) endpoint.\n",
        examples=['keys_only'],
    )
    referrals: Optional[Referrals] = Field(
        None,
        description="Information about your status in our referral program.\n\nThis information becomes accessible after this Profile's Account has established at least $25.00 USD of total payments.\n",
    )
    restricted: Optional[bool] = Field(
        None,
        description='If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, see [/profile/grants](/docs/api/profile/#grants-list).\n',
        examples=[False],
    )
    timezone: Optional[str] = Field(
        None,
        description='The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.\n',
        examples=['US/Eastern'],
    )
    two_factor_auth: Optional[bool] = Field(
        None,
        description='If true, logins from untrusted computers will require Two Factor Authentication.  See [/profile/tfa-enable](/docs/api/profile/#two-factor-secret-create) to enable Two Factor Authentication.\n',
        examples=[True],
    )
    uid: Optional[int] = Field(
        None,
        description='Your unique ID in our system. This value will never change, and can safely be used to identify your User.\n',
        examples=[1234],
    )
    username: Optional[str] = Field(
        None,
        description='Your username, used for logging in to our system.\n',
        examples=['exampleUser'],
    )
    verified_phone_number: Optional[str] = Field(
        None,
        description='The phone number verified for this Profile with the **Phone Number Verify** ([POST /profile/phone-number/verify](/docs/api/profile/#phone-number-verify)) command.\n\n`null` if this Profile has no verified phone number.\n',
        examples=['+5555555555'],
    )


class ServiceType1(Enum):
    all = 'all'
    backup = 'backup'
    blockstorage = 'blockstorage'
    db_mysql = 'db_mysql'
    ip_v4 = 'ip_v4'
    linode = 'linode'
    linode_disk = 'linode_disk'
    linode_memory = 'linode_memory'
    longview = 'longview'
    managed = 'managed'
    nodebalancer = 'nodebalancer'
    objectstorage = 'objectstorage'
    transfer_tx = 'transfer_tx'


class Promotion(BaseModel):
    credit_monthly_cap: Optional[str] = Field(
        None,
        description='The amount available to spend per month.\n',
        examples=['10.00'],
    )
    credit_remaining: Optional[str] = Field(
        None,
        description='The total amount of credit left for this promotion.\n',
        examples=['50.00'],
    )
    description: Optional[str] = Field(
        None,
        description='A detailed description of this promotion.\n',
        examples=[
            'Receive up to $10 off your services every month for 6 months! Unused credits will expire once this promotion period ends.'
        ],
    )
    expire_dt: Optional[str] = Field(
        None,
        description="When this promotion's credits expire.\n",
        examples=['2018-01-31T23:59:59'],
    )
    image_url: Optional[str] = Field(
        None,
        description='The location of an image for this promotion.\n',
        examples=['https://linode.com/10_a_month_promotion.svg'],
    )
    service_type: Optional[ServiceType1] = Field(
        None,
        description='The service to which this promotion applies.\n',
        examples=['all'],
    )
    summary: Optional[str] = Field(
        None,
        description='Short details of this promotion.\n',
        examples=['$10 off your Linode a month!'],
    )
    this_month_credit_remaining: Optional[str] = Field(
        None,
        description='The amount of credit left for this month for this promotion.\n',
        examples=['10.00'],
    )


class Resolvers(BaseModel):
    ipv4: Optional[str] = Field(
        None,
        description="The IPv4 addresses for this region's DNS resolvers, separated by commas.\n",
        examples=['192.0.2.0,192.0.2.1'],
    )
    ipv6: Optional[str] = Field(
        None,
        description="The IPv6 addresses for this region's DNS resolvers, separated by commas.\n",
        examples=['2001:0db8::,2001:0db8::1'],
    )


class Status15(Enum):
    ok = 'ok'
    outage = 'outage'


class Region1(BaseModel):
    capabilities: Optional[List[str]] = Field(
        None,
        description='A list of capabilities of this region.\n',
        examples=[['Linodes', 'NodeBalancers', 'Block Storage', 'Object Storage']],
    )
    country: Optional[str] = Field(
        None, description='The country where this Region resides.', examples=['us']
    )
    id: Optional[str] = Field(
        None, description='The unique ID of this Region.', examples=['us-east']
    )
    label: Optional[str] = Field(
        None,
        description='Detailed location information for this Region, including city, state or region, and country.',
        examples=['Newark, NJ, USA'],
    )
    resolvers: Optional[Resolvers] = None
    status: Optional[Status15] = Field(
        None, description="This region's current operational status.\n", examples=['ok']
    )


class RescueDevices(BaseModel):
    sda: Optional[Device] = None
    sdb: Optional[Device] = None
    sdc: Optional[Device] = None
    sdd: Optional[Device] = None
    sde: Optional[Device] = None
    sdf: Optional[Device] = None
    sdg: Optional[Device] = None


class SSHKey(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='The date this key was added.\n',
        examples=['2018-01-01T00:01:01'],
    )
    id: Optional[int] = Field(
        None, description='The unique identifier of an SSH Key object.\n', examples=[42]
    )
    label: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='A label for the SSH Key.\n', examples=['My SSH Key']
    )
    ssh_key: Optional[str] = Field(
        None,
        description='The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n\nAccepted formats:\n* ssh-dss\n* ssh-rsa\n* ecdsa-sha2-nistp\n* ssh-ed25519\n* sk-ecdsa-sha2-nistp256 (Akamai-specific)\n',
        examples=['ssh-rsa AAAA_valid_public_ssh_key_123456785== user@their-computer'],
    )


class SecurityQuestion(BaseModel):
    id: Optional[int] = Field(
        None, description='The ID representing the security question.', examples=[1]
    )
    question: Optional[str] = Field(
        None,
        description='The security question.',
        examples=['In what city were you born?'],
    )
    response: Optional[constr(min_length=3, max_length=17)] = Field(
        None, description='The security question response.\n', examples=['Gotham City']
    )


class Status16(Enum):
    accepted = 'accepted'
    cancelled = 'cancelled'
    completed = 'completed'
    failed = 'failed'
    pending = 'pending'
    stale = 'stale'


class ServiceTransfer(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this transfer was created.\n',
        examples=['2021-02-11T16:37:03'],
    )
    entities: Optional[Entities] = Field(
        None,
        description='A collection of the services to include in this transfer request, separated by type.\n',
    )
    expiry: Optional[datetime_aliased] = Field(
        None,
        description='When this transfer expires. Transfers will automatically expire 24 hours after creation.\n',
        examples=['2021-02-12T16:37:03'],
    )
    is_sender: Optional[bool] = Field(
        None,
        description='If the requesting account created this transfer.\n',
        examples=[True],
    )
    status: Optional[Status16] = Field(
        None,
        description='The status of the transfer request.\n\n`accepted`: The transfer has been accepted by another user and is currently in progress.\nTransfers can take up to 3 hours to complete.\n\n`cancelled`: The transfer has been cancelled by the sender.\n\n`completed`: The transfer has completed successfully.\n\n`failed`: The transfer has failed after initiation.\n\n`pending`: The transfer is ready to be accepted.\n\n`stale`: The transfer has exceeded its expiration date. It can no longer be accepted or\ncancelled.\n',
        examples=['pending'],
    )
    token: Optional[UUID] = Field(
        None,
        description='The token used to identify and accept or cancel this transfer.\n',
        examples=['123E4567-E89B-12D3-A456-426614174000'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this transfer was last updated.\n',
        examples=['2021-02-11T16:37:03'],
    )


class StatsData(BaseModel):
    x: Optional[int] = Field(
        None, description='A stats graph data point.\n', examples=[11513761600000]
    )
    y: Optional[int] = Field(
        None, description='A stats graph data point.\n', examples=[29.94]
    )


class StatsDataAvailable(BaseModel):
    cpu: Optional[List[StatsData]] = Field(
        None, description='CPU usage stats from the last 24 hours.'
    )
    disk: Optional[List[StatsData]] = Field(
        None, description='Disk usage stats from the last 24 hours.'
    )
    net_in: Optional[List[StatsData]] = Field(
        None, description='Inbound network traffic stats from the last 24 hours.'
    )
    net_out: Optional[List[StatsData]] = Field(
        None, description='Outbound network traffic stats from the last 24 hours.'
    )
    swap: Optional[List[StatsData]] = Field(
        None, description='Swap usage stats from the last 24 hours.'
    )
    x_linode_ref_name: Literal['StatsDataAvailable'] = Field(
        ..., alias='x-linode-ref-name'
    )


class StatsDataUnavailable(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description='An array of error messages if managed stats are unavaliable.\n',
    )


class Entity5(BaseModel):
    id: Optional[int] = Field(
        None, description="The unique ID for this Ticket's entity.\n", examples=[10400]
    )
    label: Optional[str] = Field(
        None,
        description='The current label of this entity.\n',
        examples=['linode123456'],
    )
    type: Optional[str] = Field(
        None,
        description='The type of entity this is related to.\n',
        examples=['linode'],
    )
    url: Optional[str] = Field(
        None,
        description='The URL where you can access the object this event is for. If a relative URL, it is relative to the domain you retrieved the entity from.\n',
        examples=['/v4/linode/instances/123456'],
    )


class Status17(Enum):
    closed = 'closed'
    new = 'new'
    open = 'open'


class SupportTicket(BaseModel):
    attachments: Optional[List[str]] = Field(
        None,
        description='A list of filenames representing attached files associated with this Ticket.\n',
    )
    closable: Optional[bool] = Field(
        None,
        description='Whether the Support Ticket may be closed.\n',
        examples=[False],
    )
    closed: Optional[datetime_aliased] = Field(
        None,
        description='The date and time this Ticket was closed.\n',
        examples=['2015-06-04T16:07:03'],
    )
    description: Optional[constr(min_length=1, max_length=65000)] = Field(
        None,
        description='The full details of the issue or question.\n',
        examples=[
            "I'm having trouble setting the root password on my Linode. I tried following the instructions but something is not working and I'm not sure what I'm doing wrong. Can you please help me figure out how I can reset it?\n"
        ],
    )
    entity: Optional[Entity5] = Field(
        None, description='The entity this Ticket was opened for.\n'
    )
    gravatar_id: Optional[str] = Field(
        None,
        description='The Gravatar ID of the User who opened this Ticket.\n',
        examples=['474a1b7373ae0be4132649e69c36ce30'],
    )
    id: Optional[int] = Field(
        None, description='The ID of the Support Ticket.\n', examples=[11223344]
    )
    opened: Optional[datetime_aliased] = Field(
        None,
        description='The date and time this Ticket was created.\n',
        examples=['2015-06-04T14:16:44'],
    )
    opened_by: Optional[str] = Field(
        None, description='The User who opened this Ticket.\n', examples=['some_user']
    )
    status: Optional[Status17] = Field(
        None, description='The current status of this Ticket.', examples=['open']
    )
    summary: Optional[constr(min_length=1, max_length=64)] = Field(
        None,
        description='The summary or title for this Ticket.\n',
        examples=['Having trouble resetting root password on my Linode\n'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='The date and time this Ticket was last updated.\n',
        examples=['2015-06-04T16:07:03'],
    )
    updated_by: Optional[str] = Field(
        None,
        description='The User who last updated this Ticket.\n',
        examples=['some_other_user'],
    )


class SupportTicketReply(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='The date and time this Ticket reply was created.\n',
        examples=['2015-06-02T14:31:41'],
    )
    created_by: Optional[str] = Field(
        None,
        description='The User who submitted this reply.\n',
        examples=['John Q. Linode'],
    )
    description: Optional[str] = Field(
        None,
        description='The body of this Support Ticket reply.\n',
        examples=[
            "Hello,\\nI'm sorry to hear that you are having trouble resetting the root password of your Linode. Just to be sure, have you tried to follow the instructions in our online documentation? The link is here:\\n \\nhttps://linode.com/docs/guides/reset-the-root-password-on-your-linode/ \\n\\nIf you have, please reply with any additional steps you have also taken.\\n\\nRegards, Linode Support Team\n"
        ],
    )
    from_linode: Optional[bool] = Field(
        None,
        description='If set to true, this reply came from a Linode employee.\n',
        examples=[True],
    )
    gravatar_id: Optional[str] = Field(
        None,
        description='The Gravatar ID of the User who created this reply.\n',
        examples=['474a1b7373ae0be4132649e69c36ce30'],
    )
    id: Optional[int] = Field(
        None,
        description='The unique ID of this Support Ticket reply.\n',
        examples=[11223345],
    )


class SupportTicketRequest(BaseModel):
    database_id: Optional[int] = Field(
        None,
        description='The ID of the Managed Database this ticket is regarding, if relevant.\n',
    )
    description: constr(min_length=1, max_length=65000) = Field(
        ...,
        description='The full details of the issue or question.\n',
        examples=[
            "I'm having trouble setting the root password on my Linode. I tried following the instructions but something is not working and I'm not sure what I'm doing wrong. Can you please help me figure out how I can reset it?\n"
        ],
    )
    domain_id: Optional[int] = Field(
        None,
        description='The ID of the Domain this ticket is regarding, if relevant.\n',
        examples=[None],
    )
    firewall_id: Optional[int] = Field(
        None,
        description='The ID of the Firewall this ticket is regarding, if relevant.\n',
    )
    linode_id: Optional[int] = Field(
        None,
        description='The ID of the Linode this ticket is regarding, if relevant.\n',
        examples=[123],
    )
    lkecluster_id: Optional[int] = Field(
        None,
        description='The ID of the Kubernetes cluster this ticket is regarding, if relevant.\n',
        examples=[123],
    )
    longviewclient_id: Optional[int] = Field(
        None,
        description='The ID of the Longview client this ticket is regarding, if relevant.\n',
        examples=[None],
    )
    managed_issue: Optional[bool] = Field(
        None,
        description='Designates if this ticket is related to a [Managed service](https://www.linode.com/products/managed/). If `true`, the following constraints will apply:\n* No ID attributes (i.e. `linode_id`, `domain_id`, etc.) should be provided with this request.\n* Your account must have a [Managed service enabled](/docs/api/managed/#managed-service-enable).\n',
        examples=[False],
    )
    nodebalancer_id: Optional[int] = Field(
        None,
        description='The ID of the NodeBalancer this ticket is regarding, if relevant.\n',
        examples=[None],
    )
    region: Optional[str] = Field(
        None,
        description='The [Region](/docs/api/regions/) ID for the associated VLAN this ticket is regarding.\n\nOnly allowed when submitting a VLAN ticket.\n',
        examples=[None],
    )
    summary: constr(min_length=1, max_length=64) = Field(
        ...,
        description='The summary or title for this SupportTicket.\n',
        examples=['Having trouble resetting root password on my Linode\n'],
    )
    vlan: Optional[str] = Field(
        None,
        description='The label of the VLAN this ticket is regarding, if relevant. To view your VLANs, use the VLANs List ([GET /networking/vlans](/docs/api/networking/#vlans-list)) endpoint.\n\nRequires a specified `region` to identify the VLAN.\n',
        examples=[None],
    )
    volume_id: Optional[int] = Field(
        None,
        description='The ID of the Volume this ticket is regarding, if relevant.\n',
        examples=[None],
    )


class Tag1(BaseModel):
    label: Optional[str] = Field(
        None,
        description='A Label used for organization of objects on your Account.\n',
        examples=['example tag'],
    )


class Transfer1(BaseModel):
    billable: Optional[int] = Field(
        None,
        description='The amount of your transfer pool that is billable this billing cycle.\n',
        examples=[0],
    )
    quota: Optional[int] = Field(
        None,
        description='The amount of network usage allowed this billing cycle.\n',
        examples=[9141],
    )
    used: Optional[int] = Field(
        None,
        description='The amount of network usage you have used this billing cycle.\n',
        examples=[2],
    )


class TrustedDevice(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Remember Me session was started.  This corresponds to the time of login with the "Remember Me" box checked.\n',
        examples=['2018-01-01T01:01:01'],
    )
    expiry: Optional[datetime_aliased] = Field(
        None,
        description='When this TrustedDevice session expires.  Sessions typically last 30 days.\n',
        examples=['2018-01-31T01:01:01'],
    )
    id: Optional[int] = Field(
        None, description='The unique ID for this TrustedDevice', examples=[123]
    )
    last_authenticated: Optional[datetime_aliased] = Field(
        None,
        description='The last time this TrustedDevice was successfully used to authenticate to <a target="_top" href="https://login.linode.com">login.linode.com</a>.\n',
        examples=['2018-01-05T12:57:12'],
    )
    last_remote_addr: Optional[str] = Field(
        None,
        description='The last IP Address to successfully authenticate with this TrustedDevice.\n',
        examples=['203.0.113.1'],
    )
    user_agent: Optional[str] = Field(
        None,
        description='The User Agent of the browser that created this TrustedDevice session.\n',
        examples=[
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36 Vivaldi/2.1.1337.36\n'
        ],
    )


class User(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    email: Optional[EmailStr] = Field(
        None,
        description='The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.\n',
        examples=['example_user@linode.com'],
    )
    restricted: Optional[bool] = Field(
        None,
        description='If true, the User must be granted access to perform actions or access entities on this Account. See User Grants View ([GET /account/users/{username}/grants](/docs/api/account/#users-grants-view)) for details on how to configure grants for a restricted User.\n',
        examples=[True],
    )
    ssh_keys: Optional[List[str]] = Field(
        None,
        description='A list of SSH Key labels added by this User.\n\nUsers can add keys with the SSH Key Add ([POST /profile/sshkeys](/docs/api/profile/#ssh-key-add)) command.\n\nThese keys are deployed when this User is included in the `authorized_users`\nfield of the following requests:\n- Linode Create ([POST /linode/instances](/docs/api/linode-instances/#linode-create))\n- Linode Rebuild ([POST /linode/instances/{linodeId}/rebuild](/docs/api/linode-instances/#linode-rebuild))\n- Disk Create ([POST /linode/instances/{linodeId}/disks](/docs/api/linode-instances/#disk-create))\n',
        examples=[['home-pc', 'laptop']],
    )
    tfa_enabled: Optional[bool] = Field(
        None,
        description='A boolean value indicating if the User has Two Factor Authentication (TFA) enabled. See the Create Two Factor Secret ([POST /profile/tfa-enable](/docs/api/profile/#two-factor-secret-create)) endpoint to enable TFA.\n',
    )
    username: Optional[
        constr(
            pattern=r'^[a-zA-Z0-9]((?![_-]{2,})[a-zA-Z0-9-_])+[a-zA-Z0-9]$',
            min_length=3,
            max_length=32,
        )
    ] = Field(
        None,
        description="The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).\n",
        examples=['example_user'],
    )


class UserDefinedField(BaseModel):
    default: Optional[str] = Field(
        None,
        description='The default value.  If not specified, this value will be used.\n',
    )
    example: str = Field(
        ..., description='An example value for the field.\n', examples=['hunter2']
    )
    label: str = Field(
        ...,
        description='A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n',
        examples=['Enter the password'],
    )
    manyOf: Optional[str] = Field(
        None,
        description='A list of acceptable values for the field in any quantity, combination or order.\n',
        examples=['avalue,anothervalue,thirdvalue'],
    )
    name: str = Field(
        ..., description='The name of the field.\n', examples=['DB_PASSWORD']
    )
    oneOf: Optional[str] = Field(
        None,
        description='A list of acceptable single values for the field.\n',
        examples=['avalue,anothervalue,thirdvalue'],
    )


class Vlans(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='The date this VLAN was created.\n',
        examples=['2020-01-01T00:01:01'],
    )
    label: Optional[str] = Field(
        None, description='The name of this VLAN.', examples=['vlan-example']
    )
    linodes: Optional[List[int]] = Field(
        None,
        description='An array of Linode IDs attached to this VLAN.\n',
        examples=[[111, 222]],
    )
    region: Optional[str] = Field(
        None,
        description="This VLAN's data center region.\n\n**Note:** Currently, a VLAN can only be assigned to a Linode\nwithin the same data center region.\n",
        examples=['ap-west'],
    )


class HardwareType(Enum):
    hdd = 'hdd'
    nvme = 'nvme'


class Status18(Enum):
    creating = 'creating'
    active = 'active'
    resizing = 'resizing'


class WarningObject(BaseModel):
    details: Optional[str] = Field(
        None,
        description='Specific information related to the warning.\n',
        examples=['Linode 123 could not be rebooted.'],
    )
    title: Optional[str] = Field(
        None,
        description='The general warning message.\n',
        examples=['Unable to reboot Linode.'],
    )


class AccountGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountCancelPostRequest(BaseModel):
    comments: Optional[str] = Field(
        None,
        description='Any reason for cancelling the account, and any other comments you might have about your Linode service.\n',
        examples=["I'm consolidating multiple accounts into one."],
    )


class AccountCancelPostResponse(BaseModel):
    survey_link: Optional[str] = Field(
        None, description="A link to Linode's exit survey."
    )


class Error(BaseModel):
    reason: Optional[str] = Field(
        None,
        description='A string explaining that the account could not be cancelled because there is an outstanding balance on the account that must be paid first.\n',
        examples=[
            'We were unable to charge your credit card for services rendered. We cannot cancel this account until the balance has been paid.\n'
        ],
    )


class AccountCancelPostResponse1(BaseModel):
    errors: Optional[List[Error]] = None


class AccountCancelPostResponse2(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountCreditCardPostResponse(BaseModel):
    pass


class AccountCreditCardPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEntityTransfersGetResponse(PaginationEnvelope):
    data: Optional[List[EntityTransfer]] = None


class AccountEntityTransfersGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEntityTransfersPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEntityTransfersTokenDeleteResponse(BaseModel):
    pass


class AccountEntityTransfersTokenDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEntityTransfersTokenGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEntityTransfersTokenAcceptPostResponse(BaseModel):
    pass


class AccountEntityTransfersTokenAcceptPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEventsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEventsEventIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEventsEventIdReadPostResponse(BaseModel):
    pass


class AccountEventsEventIdReadPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountEventsEventIdSeenPostResponse(BaseModel):
    pass


class AccountEventsEventIdSeenPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountInvoicesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountInvoicesInvoiceIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountInvoicesInvoiceIdItemsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountLoginsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountLoginsLoginIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountMaintenanceGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountNotificationsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountOauthClientsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountOauthClientsPostRequest(OAuthClient):
    label: constr(min_length=1, max_length=512) = Field(
        ...,
        description='The name of this application.  This will be presented to users when they are asked to grant it access to their Account.\n',
        examples=['Test_Client_1'],
    )
    redirect_uri: str = Field(
        ...,
        description='The location a successful log in from <a target="_top" href="https://login.linode.com">https://login.linode.com</a> should be redirected to for this client.  The receiver of this redirect should be ready to accept an OAuth exchange code and finish the OAuth exchange.\n',
        examples=['https://example.org/oauth/callback'],
    )


class AccountOauthClientsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountOauthClientsClientIdDeleteResponse(BaseModel):
    pass


class AccountOauthClientsClientIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountOauthClientsClientIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountOauthClientsClientIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountOauthClientsClientIdResetSecretPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountOauthClientsClientIdThumbnailGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountOauthClientsClientIdThumbnailPutResponse(BaseModel):
    pass


class AccountOauthClientsClientIdThumbnailPutResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentMethodsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Type14(Enum):
    credit_card = 'credit_card'


class AccountPaymentMethodsPostResponse(BaseModel):
    pass


class AccountPaymentMethodsPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentMethodsPaymentMethodIdDeleteResponse(BaseModel):
    pass


class AccountPaymentMethodsPaymentMethodIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentMethodsPaymentMethodIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentMethodsPaymentMethodIdMakeDefaultPostResponse(BaseModel):
    pass


class AccountPaymentMethodsPaymentMethodIdMakeDefaultPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentsPostResponse(BaseModel):
    warnings: Optional[List[WarningObject]] = None


class AccountPaymentsPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentsPaypalPostResponse(BaseModel):
    checkout_token: Optional[str] = Field(
        None,
        description='The checkout token generated for this Payment.\n',
        examples=['EC-1A2B3C4D5E6F7G8H9'],
    )
    payment_id: Optional[str] = Field(
        None,
        description="The paypal-generated ID for this Payment. Used when authorizing the Payment in PayPal's interface.\n",
        examples=['PAY-1234567890ABCDEFGHIJKLMN'],
    )


class AccountPaymentsPaypalPostResponse1(BaseModel):
    warnings: Optional[List[WarningObject]] = None


class AccountPaymentsPaypalPostResponse2(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentsPaypalExecutePostResponse(BaseModel):
    pass


class AccountPaymentsPaypalExecutePostResponse1(BaseModel):
    warnings: Optional[List[WarningObject]] = None


class AccountPaymentsPaypalExecutePostResponse3(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPaymentsPaymentIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountPromoCodesPostRequest(BaseModel):
    promo_code: constr(min_length=1, max_length=32) = Field(
        ..., description='The Promo Code.\n'
    )


class AccountPromoCodesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountServiceTransfersGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountServiceTransfersPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountServiceTransfersTokenDeleteResponse(BaseModel):
    pass


class AccountServiceTransfersTokenDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountServiceTransfersTokenGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountServiceTransfersTokenAcceptPostResponse(BaseModel):
    pass


class AccountServiceTransfersTokenAcceptPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountSettingsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountSettingsPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountSettingsManagedEnablePostResponse(BaseModel):
    pass


class AccountSettingsManagedEnablePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountTransferGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountUsersGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountUsersPostRequest(User):
    username: constr(
        pattern=r'^[a-zA-Z0-9]((?![_-]{2,})[a-zA-Z0-9-_])+[a-zA-Z0-9]$',
        min_length=3,
        max_length=32,
    ) = Field(
        ...,
        description="The User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).\n",
        examples=['example_user'],
    )
    email: EmailStr = Field(
        ...,
        description='The email address for the User. Linode sends emails to this address for account management communications. May be used for other communications as configured.\n',
        examples=['example_user@linode.com'],
    )


class AccountUsersPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountUsersUsernameDeleteResponse(BaseModel):
    pass


class AccountUsersUsernameDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountUsersUsernameGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountUsersUsernamePutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountUsersUsernameGrantsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AccountUsersUsernameGrantsPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesEnginesGetResponse(PaginationEnvelope):
    data: Optional[List[DatabaseEngine]] = None


class DatabasesEnginesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesEnginesEngineIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesInstancesGetResponse(PaginationEnvelope):
    data: Optional[List[Database]] = None


class DatabasesInstancesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdDeleteResponse(BaseModel):
    pass


class DatabasesMongodbInstancesInstanceIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdBackupsGetResponse(PaginationEnvelope):
    data: Optional[List[DatabaseBackup]] = None


class DatabasesMongodbInstancesInstanceIdBackupsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdBackupsPostResponse(BaseModel):
    pass


class DatabasesMongodbInstancesInstanceIdBackupsPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdBackupsBackupIdDeleteResponse(BaseModel):
    pass


class DatabasesMongodbInstancesInstanceIdBackupsBackupIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdBackupsBackupIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdBackupsBackupIdRestorePostResponse(BaseModel):
    pass


class DatabasesMongodbInstancesInstanceIdBackupsBackupIdRestorePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdCredentialsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdCredentialsResetPostResponse(BaseModel):
    pass


class DatabasesMongodbInstancesInstanceIdCredentialsResetPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdPatchPostResponse(BaseModel):
    pass


class DatabasesMongodbInstancesInstanceIdPatchPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMongodbInstancesInstanceIdSslGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdDeleteResponse(BaseModel):
    pass


class DatabasesMysqlInstancesInstanceIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdBackupsGetResponse(PaginationEnvelope):
    data: Optional[List[DatabaseBackup]] = None


class DatabasesMysqlInstancesInstanceIdBackupsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdBackupsPostResponse(BaseModel):
    pass


class DatabasesMysqlInstancesInstanceIdBackupsPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdBackupsBackupIdDeleteResponse(BaseModel):
    pass


class DatabasesMysqlInstancesInstanceIdBackupsBackupIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdBackupsBackupIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdBackupsBackupIdRestorePostResponse(BaseModel):
    pass


class DatabasesMysqlInstancesInstanceIdBackupsBackupIdRestorePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdCredentialsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdCredentialsResetPostResponse(BaseModel):
    pass


class DatabasesMysqlInstancesInstanceIdCredentialsResetPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdPatchPostResponse(BaseModel):
    pass


class DatabasesMysqlInstancesInstanceIdPatchPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesMysqlInstancesInstanceIdSslGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdDeleteResponse(BaseModel):
    pass


class DatabasesPostgresqlInstancesInstanceIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdBackupsGetResponse(PaginationEnvelope):
    data: Optional[List[DatabaseBackup]] = None


class DatabasesPostgresqlInstancesInstanceIdBackupsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdBackupsPostResponse(BaseModel):
    pass


class DatabasesPostgresqlInstancesInstanceIdBackupsPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdBackupsBackupIdDeleteResponse(BaseModel):
    pass


class DatabasesPostgresqlInstancesInstanceIdBackupsBackupIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdBackupsBackupIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdBackupsBackupIdRestorePostResponse(
    BaseModel
):
    pass


class DatabasesPostgresqlInstancesInstanceIdBackupsBackupIdRestorePostResponse1(
    BaseModel
):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdCredentialsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdCredentialsResetPostResponse(BaseModel):
    pass


class DatabasesPostgresqlInstancesInstanceIdCredentialsResetPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdPatchPostResponse(BaseModel):
    pass


class DatabasesPostgresqlInstancesInstanceIdPatchPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesPostgresqlInstancesInstanceIdSslGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesTypesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DatabasesTypesTypeIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsPostRequest(Domain):
    domain: constr(
        pattern=r'\A(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)\Z',
        min_length=1,
        max_length=253,
    ) = Field(
        ...,
        description="The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.\n",
        examples=['example.org'],
    )
    type: Type2 = Field(
        ...,
        description='Whether this Domain represents the authoritative source of information for the domain it describes ("master"), or whether it is a read-only copy of a master ("slave").\n',
        examples=['master'],
    )


class DomainsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsImportPostRequest(BaseModel):
    domain: str = Field(
        ..., description='The domain to import.\n', examples=['example.com']
    )
    remote_nameserver: str = Field(
        ...,
        description='The remote nameserver that allows zone transfers (AXFR).\n',
        examples=['examplenameserver.com'],
    )


class DomainsImportPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdDeleteResponse(BaseModel):
    pass


class DomainsDomainIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdClonePostRequest(BaseModel):
    domain: constr(
        pattern=r'\A(\*\.)?([a-zA-Z0-9-_]{1,63}\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)\Z',
        min_length=1,
        max_length=253,
    ) = Field(
        ...,
        description="The new domain for the clone. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.\n",
        examples=['example.org'],
    )


class DomainsDomainIdClonePostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdRecordsPostRequest(DomainRecord):
    type: Type3 = Field(
        ...,
        description='The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. For more information, see the guides on [DNS Record Types](/docs/products/networking/dns-manager/guides/#dns-record-types).\n',
        examples=['A'],
    )


class DomainsDomainIdRecordsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdRecordsRecordIdDeleteResponse(BaseModel):
    pass


class DomainsDomainIdRecordsRecordIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdRecordsRecordIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdRecordsRecordIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class DomainsDomainIdZoneFileGetResponse(BaseModel):
    zone_file: Optional[List[str]] = Field(
        None,
        description='The lines of the zone file for the last rendered zone for this domain.\n',
        examples=[
            [
                '; example.com [123]',
                '$TTL 864000',
                '@  IN  SOA  ns1.linode.com. user.example.com. 2021000066 14400 14400 1209600 86400',
                '@    NS  ns1.linode.com.',
                '@    NS  ns2.linode.com.',
                '@    NS  ns3.linode.com.',
                '@    NS  ns4.linode.com.',
                '@    NS  ns5.linode.com.',
            ]
        ],
    )


class DomainsDomainIdZoneFileGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ImagesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ImagesPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='A detailed description of this Image.\n'
    )
    disk_id: int = Field(
        ...,
        description='The ID of the Linode Disk that this Image will be created from.\n',
        examples=[42],
    )
    label: Optional[str] = Field(
        None,
        description='A short title of this Image. Defaults to the label of the Disk it is being created from if not provided.\n',
    )


class ImagesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ImagesUploadPostRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Description for the uploaded Image.',
        examples=['This is an example image in the docs.'],
    )
    label: str = Field(
        ..., description='Label for the uploaded Image.', examples=['my-image-label']
    )
    region: str = Field(
        ...,
        description='The region to upload to. Once uploaded, the Image can be used in any region.\n',
        examples=['eu-central'],
    )


class ImagesUploadPostResponse(BaseModel):
    image: Optional[Image] = None
    upload_to: Optional[str] = Field(
        None, description='The URL to upload the Image to.'
    )


class ImagesUploadPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ImagesImageIdDeleteResponse(BaseModel):
    pass


class ImagesImageIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ImagesImageIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ImagesImageIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDeleteResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdBackupsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdBackupsPostRequest(BaseModel):
    label: constr(min_length=1, max_length=255) = Field(
        ..., description='The label for the new snapshot.', examples=['SnapshotLabel']
    )


class LinodeInstancesLinodeIdBackupsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdBackupsCancelPostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdBackupsCancelPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdBackupsEnablePostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdBackupsEnablePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdBackupsBackupIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdBackupsBackupIdRestorePostRequest(BaseModel):
    linode_id: int = Field(
        ...,
        description='The ID of the Linode to restore a Backup to.\n',
        examples=[234],
    )
    overwrite: Optional[bool] = Field(
        None,
        description='If True, deletes all Disks and Configs on the target Linode\nbefore restoring.\n\nIf False, and the Disk image size is larger than the available\nspace on the Linode, an error message indicating insufficient\nspace is returned.\n',
        examples=[True],
    )


class LinodeInstancesLinodeIdBackupsBackupIdRestorePostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdBackupsBackupIdRestorePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdBootPostRequest(BaseModel):
    config_id: Optional[int] = Field(
        None, description='The Linode Config ID to boot into.\n', examples=[None]
    )


class LinodeInstancesLinodeIdBootPostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdBootPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdClonePostRequest(BaseModel):
    backups_enabled: Optional[bool] = Field(
        None,
        description='If this field is set to `true`, the created Linode will\nautomatically be enrolled in the Linode Backup service. This\nwill incur an additional charge. Pricing is included in the\nresponse from\n[/linodes/types](/docs/api/linode-types/#types-list).\n\n* Can only be included when cloning to a new Linode.\n',
        examples=[True],
    )
    configs: Optional[List[int]] = Field(
        None,
        description='An array of configuration profile IDs.\n* If the `configs` parameter **is not provided**, then **all configuration profiles and their associated disks will be cloned** from the source Linode. Any disks specified by the `disks` parameter will also be cloned.\n* **If an empty array is provided** for the `configs` parameter, then **no configuration profiles (nor their associated disks) will be cloned** from the source Linode. Any disks specified by the `disks` parameter will still be cloned.\n* **If a non-empty array is provided** for the `configs` parameter, then **the configuration profiles specified in the array (and their associated disks) will be cloned** from the source Linode. Any disks specified by the `disks` parameter will also be cloned.\n',
    )
    disks: Optional[List[int]] = Field(
        None,
        description='An array of disk IDs.\n* If the `disks` parameter **is not provided**, then **no extra disks will be cloned** from the source Linode. All disks associated with the configuration profiles specified by the `configs` parameter will still be cloned.\n* **If an empty array is provided** for the `disks` parameter, then **no extra disks will be cloned** from the source Linode. All disks associated with the configuration profiles specified by the `configs` parameter will still be cloned.\n* **If a non-empty array is provided** for the `disks` parameter, then **the disks specified in the array will be cloned** from the source Linode, in addition to any disks associated with the configuration profiles specified by the `configs` parameter.\n',
    )
    group: Optional[str] = Field(
        None,
        description='A label used to group Linodes for display. Linodes are not required to have a group.\n',
        examples=['Linode-Group'],
    )
    label: Optional[constr(min_length=3, max_length=64)] = Field(
        None,
        description='The label to assign this Linode when cloning to a new Linode.\n* Can only be provided when cloning to a new Linode.\n* Defaults to "linode".\n',
        examples=['cloned-linode'],
    )
    linode_id: Optional[int] = Field(
        None,
        description='If an existing Linode is the target for the clone, the ID of that Linode. The existing Linode must have enough resources to accept the clone.\n',
        examples=[124],
    )
    private_ip: Optional[bool] = Field(
        None,
        description='If true, the created Linode will have private networking enabled and assigned a private IPv4 address.\n* Can only be provided when cloning to a new Linode.\n',
        examples=[True],
    )
    region: Optional[str] = Field(
        None,
        description='This is the Region where the Linode will be deployed.\nTo view all available Regions you can deploy to see [/regions](/docs/api/regions/#regions-list).\n* Region can only be provided and is required when cloning to a new Linode.\n',
        examples=['us-east'],
    )
    type: Optional[str] = Field(
        None,
        description="A Linode's Type determines what resources are available to\nit, including disk space, memory, and virtual cpus. The\namounts available to a specific Linode are returned as\n`specs` on the Linode object.\n\nTo view all available Linode Types you can deploy with\nsee [/linode/types](/docs/api/linode-types/#types-list).\n\n* Type can only be provided and is required when cloning to a new Linode.\n",
        examples=['g6-standard-2'],
    )


class LinodeInstancesLinodeIdClonePostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdConfigsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdConfigsConfigIdDeleteResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdConfigsConfigIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdConfigsConfigIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdConfigsConfigIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDisksGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDisksPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDisksDiskIdDeleteResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdDisksDiskIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDisksDiskIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDisksDiskIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDisksDiskIdClonePostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDisksDiskIdPasswordPostRequest(BaseModel):
    password: str = Field(
        ...,
        description='The new root password for the OS installed on this Disk.\nThe password must meet the complexity strength validation requirements for a strong password.\n',
        examples=['another@complex^Password123'],
    )


class LinodeInstancesLinodeIdDisksDiskIdPasswordPostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdDisksDiskIdPasswordPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdDisksDiskIdResizePostRequest(BaseModel):
    size: conint(ge=1) = Field(
        ..., description='The desired size, in MB, of the disk.\n', examples=[2048]
    )


class LinodeInstancesLinodeIdDisksDiskIdResizePostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdDisksDiskIdResizePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdFirewallsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Ipv4(BaseModel):
    private: Optional[List[IPAddressPrivate]] = Field(
        None,
        description='A list of private IP Address objects belonging to this Linode.\n',
    )
    public: Optional[List[IPAddress]] = Field(
        None,
        description='A list of public IP Address objects belonging to this Linode.\n',
    )
    reserved: Optional[List[IPAddress]] = Field(
        None,
        description='A list of reserved IP Address objects belonging to this Linode.\n',
    )
    shared: Optional[List[IPAddress]] = Field(
        None,
        description='A list of shared IP Address objects assigned to this Linode.\n',
    )


class Ipv6(BaseModel):
    global_: Optional[IPv6Pool] = Field(None, alias='global')
    link_local: Optional[IPAddressV6LinkLocal] = None
    slaac: Optional[IPAddressV6Slaac] = None


class LinodeInstancesLinodeIdIpsGetResponse(BaseModel):
    ipv4: Optional[Ipv4] = Field(
        None, description="Information about this Linode's IPv4 addresses.\n"
    )
    ipv6: Optional[Ipv6] = Field(
        None, description="Information about this Linode's IPv6 addresses.\n"
    )


class LinodeInstancesLinodeIdIpsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Type15(Enum):
    ipv4 = 'ipv4'


class LinodeInstancesLinodeIdIpsPostRequest(BaseModel):
    public: bool = Field(
        ...,
        description='Whether to create a public or private IPv4 address.\n',
        examples=[True],
    )
    type: Type15 = Field(
        ...,
        description='The type of address you are allocating. Only IPv4 addresses may be allocated through this endpoint.\n',
        examples=['ipv4'],
    )


class LinodeInstancesLinodeIdIpsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdIpsAddressDeleteResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdIpsAddressDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdIpsAddressGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdIpsAddressPutRequest(BaseModel):
    rdns: str = Field(
        ...,
        description='The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.\n',
        examples=['test.example.org'],
    )


class LinodeInstancesLinodeIdIpsAddressPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdMigratePostRequest(BaseModel):
    region: Optional[str] = Field(
        None,
        description='The region to which the Linode will be migrated. Must be a valid region slug. A list of regions can be viewed by using the [GET /regions](/docs/api/regions/#regions-list) endpoint. A cross data center migration will cancel a pending migration that has not yet been initiated.\nA cross data center migration will initiate a `linode_migrate_datacenter_create` event.\n',
        examples=['us-east'],
    )
    upgrade: Optional[bool] = Field(
        False,
        description="When initiating a cross DC migration, setting this value to true will also ensure that the Linode is upgraded to the latest generation of hardware that corresponds to your Linode's Type, if any free upgrades are available for it.\nIf no free upgrades are available, and this value is set to true, then the endpoint will return a 400 error code and the migration will not be performed.\nIf the data center set in the `region` field does not allow upgrades, then the endpoint will return a 400 error code and the migration will not be performed.\n",
        examples=[False],
    )


class LinodeInstancesLinodeIdMigratePostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdMigratePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdMutatePostRequest(BaseModel):
    allow_auto_disk_resize: Optional[bool] = Field(
        True,
        description="Automatically resize disks when resizing a Linode. When resizing down to a smaller plan your Linode's data must fit within the smaller disk size.\n",
        examples=[True],
    )


class LinodeInstancesLinodeIdMutatePostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdMutatePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdPasswordPostRequest(BaseModel):
    root_pass: str = Field(
        ...,
        description="The root user's password on this Linode. Linode passwords must meet a password strength score requirement that is calculated internally by the API. If the strength requirement is not met, you will receive a Password does not meet strength requirement error.\n",
        examples=['a$eCure4assw0rd!43v51'],
    )


class LinodeInstancesLinodeIdPasswordPostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdPasswordPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdRebootPostRequest(BaseModel):
    config_id: Optional[int] = Field(
        None,
        description='The Linode Config ID to reboot into.  If null or omitted, the last booted config will be used.  If there was no last booted config and this Linode only has one config, it will be used.  If a config cannot be determined, an error will be returned.\n',
        examples=[None],
    )


class LinodeInstancesLinodeIdRebootPostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdRebootPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdRebuildPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdRescuePostRequest(BaseModel):
    devices: Optional[RescueDevices] = None


class LinodeInstancesLinodeIdRescuePostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdRescuePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdResizePostRequest(BaseModel):
    allow_auto_disk_resize: Optional[bool] = Field(
        True,
        description="Automatically resize disks when resizing a Linode. When resizing down to a smaller plan your Linode's data must fit within the smaller disk size.\n",
        examples=[True],
    )
    type: str = Field(
        ...,
        description='The ID representing the Linode Type.',
        examples=['g6-standard-2'],
    )


class LinodeInstancesLinodeIdResizePostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdResizePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdShutdownPostResponse(BaseModel):
    pass


class LinodeInstancesLinodeIdShutdownPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdStatsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdStatsYearMonthGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdTransferGetResponse(BaseModel):
    billable: Optional[int] = Field(
        None,
        description='The amount of network transfer this Linode has used, in GB, past your monthly quota.\n',
        examples=[0],
    )
    quota: Optional[int] = Field(
        None,
        description="The amount of network transfer this Linode adds to your transfer pool, in GB, for the current month's billing cycle.\n",
        examples=[2000],
    )
    used: Optional[int] = Field(
        None,
        description="The amount of network transfer used by this Linode, in bytes, for the current month's billing cycle.\n",
        examples=[22956600198],
    )


class LinodeInstancesLinodeIdTransferGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdTransferYearMonthGetResponse(BaseModel):
    bytes_in: Optional[int] = Field(
        None,
        description='The amount of inbound public network traffic received by this Linode, in bytes, for a specific year/month.\n',
        examples=[30471077120],
    )
    bytes_out: Optional[int] = Field(
        None,
        description='The amount of outbound public network traffic sent by this Linode, in bytes, for a specific year/month.\n',
        examples=[22956600198],
    )
    bytes_total: Optional[int] = Field(
        None,
        description='The total amount of public network traffic sent and received by this Linode, in bytes, for a specific year/month.\n',
        examples=[53427677318],
    )


class LinodeInstancesLinodeIdTransferYearMonthGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeInstancesLinodeIdVolumesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeKernelsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeKernelsKernelIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeStackscriptsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeStackscriptsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeStackscriptsStackscriptIdDeleteResponse(BaseModel):
    pass


class LinodeStackscriptsStackscriptIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeStackscriptsStackscriptIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeStackscriptsStackscriptIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeTypesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LinodeTypesTypeIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdDeleteResponse(BaseModel):
    pass


class LkeClustersClusterIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Datum(BaseModel):
    endpoint: Optional[str] = Field(
        None,
        description='A Kubernetes API server endpoint for this cluster.\n',
        examples=['https://192.0.2.1:6443'],
    )


class LkeClustersClusterIdApiEndpointsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdDashboardGetResponse(BaseModel):
    url: Optional[str] = Field(
        None,
        description='The Cluster Dashboard access URL.',
        examples=['https://example.dashboard.linodelke.net'],
    )


class LkeClustersClusterIdDashboardGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdKubeconfigDeleteResponse(BaseModel):
    pass


class LkeClustersClusterIdKubeconfigDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdKubeconfigGetResponse(BaseModel):
    kubeconfig: Optional[str] = Field(
        None, description='The Base64-encoded Kubeconfig file for this Cluster.\n'
    )


class LkeClustersClusterIdKubeconfigGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdNodesNodeIdDeleteResponse(BaseModel):
    pass


class LkeClustersClusterIdNodesNodeIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Status19(Enum):
    ready = 'ready'
    not_ready = 'not_ready'


class LkeClustersClusterIdNodesNodeIdGetResponse(BaseModel):
    id: Optional[str] = Field(
        None, description="The Node's ID.\n", examples=['12345-6aa78910bc']
    )
    instance_id: Optional[int] = Field(
        None,
        description="The Linode's ID. If no Linode is currently provisioned for this Node, this is `null`.\n",
        examples=[123456],
    )
    status: Optional[Status19] = Field(
        None,
        description="The creation status of this Node. This status is distinct from this Node's readiness as a Kubernetes Node Object as determined by the command `kubectl get nodes`.\n\n`not_ready` indicates that the Linode is still being created.\n\n`ready` indicates that the Linode has successfully been created and is running Kubernetes software.\n",
        examples=['ready'],
    )


class LkeClustersClusterIdNodesNodeIdGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdNodesNodeIdRecyclePostResponse(BaseModel):
    pass


class LkeClustersClusterIdNodesNodeIdRecyclePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdPoolsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdPoolsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdPoolsPoolIdDeleteResponse(BaseModel):
    pass


class LkeClustersClusterIdPoolsPoolIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdPoolsPoolIdRecyclePostResponse(BaseModel):
    pass


class LkeClustersClusterIdPoolsPoolIdRecyclePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdRecyclePostResponse(BaseModel):
    pass


class LkeClustersClusterIdRecyclePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdRegeneratePostRequest(BaseModel):
    kubeconfig: Optional[bool] = Field(
        False,
        description='Whether to delete and regenerate the Kubeconfig file for this Cluster.\n',
        examples=[True],
    )
    servicetoken: Optional[bool] = Field(
        False,
        description='Whether to delete and regenerate the service access token for this Cluster.\n',
        examples=[True],
    )


class LkeClustersClusterIdRegeneratePostResponse(BaseModel):
    pass


class LkeClustersClusterIdRegeneratePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeClustersClusterIdServicetokenDeleteResponse(BaseModel):
    pass


class LkeClustersClusterIdServicetokenDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeVersionsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LkeVersionsVersionGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewClientsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewClientsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewClientsClientIdDeleteResponse(BaseModel):
    pass


class LongviewClientsClientIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewClientsClientIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewClientsClientIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewPlanGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewPlanPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewSubscriptionsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class LongviewSubscriptionsSubscriptionIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedContactsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedContactsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedContactsContactIdDeleteResponse(BaseModel):
    pass


class ManagedContactsContactIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedContactsContactIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedContactsContactIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedCredentialsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedCredentialsPostRequest(ManagedCredential):
    password: str = Field(
        ...,
        description='The password to use when accessing the Managed Service.\n',
        examples=['s3cur3P@ssw0rd'],
    )
    username: Optional[constr(min_length=0, max_length=5000)] = Field(
        None,
        description='The username to use when accessing the Managed Service.\n',
        examples=['johndoe'],
    )
    label: constr(pattern=r'[a-zA-Z0-9-_ \.]{2,75}', min_length=2, max_length=75) = (
        Field(
            ...,
            description='The unique label for this Credential. This is for display purposes only.\n',
            examples=['prod-password-1'],
        )
    )


class ManagedCredentialsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedCredentialsSshkeyGetResponse(BaseModel):
    ssh_key: Optional[str] = Field(
        None,
        description="The unique SSH public key assigned to your Linode account's Managed service.\n",
        examples=['ssh-rsa AAAAB...oD2ZQ== managedservices@linode'],
    )


class ManagedCredentialsSshkeyGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedCredentialsCredentialIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedCredentialsCredentialIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedCredentialsCredentialIdRevokePostResponse(BaseModel):
    pass


class ManagedCredentialsCredentialIdRevokePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedCredentialsCredentialIdUpdatePostRequest(BaseModel):
    password: str = Field(
        ...,
        description='The password to use when accessing the Managed Service.\n',
        examples=['s3cur3P@ssw0rd'],
    )
    username: Optional[constr(min_length=0, max_length=5000)] = Field(
        None,
        description='The username to use when accessing the Managed Service.\n',
        examples=['johndoe'],
    )


class ManagedCredentialsCredentialIdUpdatePostResponse(BaseModel):
    pass


class ManagedCredentialsCredentialIdUpdatePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedIssuesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedIssuesIssueIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedLinodeSettingsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedLinodeSettingsLinodeIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedLinodeSettingsLinodeIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedServicesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedServicesPostRequest(ManagedService):
    label: constr(pattern=r'[a-zA-Z0-9-_ \.]{3,64}', min_length=3, max_length=64) = (
        Field(
            ...,
            description='The label for this Service. This is for display purposes only.\n',
            examples=['prod-1'],
        )
    )
    service_type: ServiceType = Field(
        ..., description='How this Service is monitored.\n', examples=['url']
    )
    address: constr(min_length=3, max_length=100) = Field(
        ...,
        description='The URL at which this Service is monitored.\n\nURL parameters such as `?no-cache=1` are preserved.\n\nURL fragments/anchors such as `#monitor` are **not** preserved.\n',
        examples=['https://example.org'],
    )
    timeout: conint(ge=1, le=255) = Field(
        ...,
        description='How long to wait, in seconds, for a response before considering the Service to be down.\n',
        examples=[30],
    )


class ManagedServicesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedServicesServiceIdDeleteResponse(BaseModel):
    pass


class ManagedServicesServiceIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedServicesServiceIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedServicesServiceIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedServicesServiceIdDisablePostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedServicesServiceIdEnablePostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ManagedStatsGetResponse(BaseModel):
    data: Optional[Union[StatsDataAvailable, StatsDataUnavailable]] = Field(
        None, discriminator='x_linode_ref_name'
    )


class ManagedStatsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Devices1(BaseModel):
    linodes: Optional[List[int]] = Field(
        None,
        description='An array of Linode IDs. A Firewall Device is created for each ID.\n',
        examples=[[123, 456]],
    )


class Rules1(BaseModel):
    inbound: Optional[Any] = None
    outbound: Optional[Any] = None


class NetworkingFirewallsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsFirewallIdDeleteResponse(BaseModel):
    pass


class NetworkingFirewallsFirewallIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsFirewallIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Status20(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class NetworkingFirewallsFirewallIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsFirewallIdDevicesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsFirewallIdDevicesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsFirewallIdDevicesDeviceIdDeleteResponse(BaseModel):
    pass


class NetworkingFirewallsFirewallIdDevicesDeviceIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsFirewallIdDevicesDeviceIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsFirewallIdRulesGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingFirewallsFirewallIdRulesPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpsPostRequest(BaseModel):
    linode_id: int = Field(
        ...,
        description='The ID of a Linode you you have access to that this address will be allocated to.\n',
        examples=[123],
    )
    public: bool = Field(
        ...,
        description='Whether to create a public or private IPv4 address.\n',
        examples=[True],
    )
    type: Type15 = Field(
        ...,
        description='The type of address you are requesting. Only IPv4 addresses may be allocated through this endpoint.\n',
        examples=['ipv4'],
    )


class NetworkingIpsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpsAssignPostResponse(BaseModel):
    pass


class NetworkingIpsAssignPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpsSharePostResponse(BaseModel):
    pass


class NetworkingIpsSharePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpsAddressGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpsAddressPutRequest(BaseModel):
    rdns: str = Field(
        ...,
        description='The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.\n',
        examples=['test.example.org'],
    )


class NetworkingIpsAddressPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpv4AssignPostResponse(BaseModel):
    pass


class NetworkingIpv4AssignPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpv4SharePostResponse(BaseModel):
    pass


class NetworkingIpv4SharePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpv6PoolsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpv6RangesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class PrefixLength(Enum):
    integer_56 = 56
    integer_64 = 64


class NetworkingIpv6RangesPostRequest(BaseModel):
    linode_id: Optional[int] = Field(
        None,
        description="The ID of the Linode to assign this range to. The SLAAC address for the provided Linode is used as the range's `route_target`.\n\n* **Required** if `route_target` is omitted from the request.\n\n* Mutually exclusive with `route_target`. Submitting values for both properties in a request results in an error.\n",
        examples=[123],
    )
    prefix_length: PrefixLength = Field(
        ..., description='The prefix length of the IPv6 range.\n'
    )
    route_target: Optional[IPv6Address] = Field(
        None,
        description='The IPv6 SLAAC address to assign this range to.\n\n* **Required** if `linode_id` is omitted from the request.\n\n* Mutually exclusive with `linode_id`. Submitting values for both properties in a request results in an error.\n\n* **Note**: Omit the `/128` prefix length of the SLAAC address when using this property.\n',
        examples=['2001:0db8::1'],
    )


class NetworkingIpv6RangesPostResponse(BaseModel):
    range: Optional[str] = Field(
        None,
        description='The IPv6 network range, including subnet and prefix length.\n',
        examples=['2001:0db8::/64'],
    )
    route_target: Optional[IPv6Address] = Field(
        None,
        description='The route target IPV6 SLAAC address for this range. Does not include the prefix length.\n',
        examples=['2001:0db8::1'],
    )


class NetworkingIpv6RangesPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpv6RangesRangeDeleteResponse(BaseModel):
    pass


class NetworkingIpv6RangesRangeDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingIpv6RangesRangeGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NetworkingVlansGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdDeleteResponse(BaseModel):
    pass


class NodebalancersNodeBalancerIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdDeleteResponse(BaseModel):
    pass


class NodebalancersNodeBalancerIdConfigsConfigIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdNodesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdNodesPostRequest(NodeBalancerNode):
    label: constr(pattern=r'[a-zA-Z0-9-_.]{3,32}', min_length=3, max_length=32) = Field(
        ...,
        description='The label for this node.  This is for display purposes only.\n',
        examples=['node54321'],
    )
    address: str = Field(
        ...,
        description='The private IP Address where this backend can be reached. This _must_ be a private IP address.\n',
        examples=['192.168.210.120:80'],
    )


class NodebalancersNodeBalancerIdConfigsConfigIdNodesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdNodesNodeIdDeleteResponse(BaseModel):
    pass


class NodebalancersNodeBalancerIdConfigsConfigIdNodesNodeIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdNodesNodeIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdNodesNodeIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdConfigsConfigIdRebuildPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class NodebalancersNodeBalancerIdStatsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Acl(Enum):
    private = 'private'
    public_read = 'public-read'
    authenticated_read = 'authenticated-read'
    public_read_write = 'public-read-write'


class ObjectStorageBucketsPostRequest(BaseModel):
    acl: Optional[Acl] = Field(
        'private',
        description='The Access Control Level of the bucket using a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.\n',
        examples=['private'],
    )
    cluster: str = Field(
        ...,
        description='The ID of the Object Storage Cluster where this bucket should be created.\n',
        examples=['us-east-1'],
    )
    cors_enabled: Optional[bool] = Field(
        False,
        description='If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.\n',
        examples=[True],
    )
    label: constr(pattern=r'^[a-z0-09][a-z0-9-]*[a-z0-9]?$') = Field(
        ...,
        description="The name for this bucket. Must be unique in the cluster you are creating the bucket in, or an error will be returned. Labels will be reserved only for the cluster that active buckets are created and stored in. If you want to reserve this bucket's label in another cluster, you must create a new bucket with the same label in the new cluster.\n",
        examples=['example-bucket'],
    )


class ObjectStorageBucketsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketDeleteResponse(BaseModel):
    pass


class ObjectStorageBucketsClusterIdBucketDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class Acl1(Enum):
    private = 'private'
    public_read = 'public-read'
    authenticated_read = 'authenticated-read'
    public_read_write = 'public-read-write'
    custom = 'custom'


class ObjectStorageBucketsClusterIdBucketAccessPostRequest(BaseModel):
    acl: Optional[Acl1] = Field(
        None,
        description='The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.\n',
        examples=['private'],
    )
    cors_enabled: Optional[bool] = Field(
        None,
        description='If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.\n',
        examples=[True],
    )


class ObjectStorageBucketsClusterIdBucketAccessPostResponse(BaseModel):
    pass


class ObjectStorageBucketsClusterIdBucketAccessPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketAccessPutRequest(BaseModel):
    acl: Optional[Acl1] = Field(
        None,
        description='The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.\n',
        examples=['private'],
    )
    cors_enabled: Optional[bool] = Field(
        None,
        description='If true, the bucket will be created with CORS enabled for all origins. For more fine-grained controls of CORS, use the S3 API directly.\n',
        examples=[True],
    )


class ObjectStorageBucketsClusterIdBucketAccessPutResponse(BaseModel):
    pass


class ObjectStorageBucketsClusterIdBucketAccessPutResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketObjectAclGetResponse(BaseModel):
    acl: Optional[Acl1] = Field(
        None,
        description='The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.\n',
        examples=['public-read'],
    )
    acl_xml: Optional[str] = Field(
        None,
        description="The full XML of the object's ACL policy.\n",
        examples=['<AccessControlPolicy>...</AccessControlPolicy>'],
    )


class ObjectStorageBucketsClusterIdBucketObjectAclGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketObjectAclPutRequest(BaseModel):
    acl: Acl1 = Field(
        ...,
        description='The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.\n',
        examples=['public-read'],
    )
    name: str = Field(
        ...,
        description='The `name` of the object for which to update its Access Control List (ACL). Use the [Object Storage Bucket Contents List](/docs/api/object-storage/#object-storage-bucket-contents-list) endpoint to access all object names in a bucket.\n',
    )


class ObjectStorageBucketsClusterIdBucketObjectAclPutResponse(BaseModel):
    acl: Optional[Acl1] = Field(
        None,
        description='The Access Control Level of the bucket, as a canned ACL string. For more fine-grained control of ACLs, use the S3 API directly.\n',
        examples=['public-read'],
    )
    acl_xml: Optional[str] = Field(
        None,
        description="The full XML of the object's ACL policy.\n",
        examples=['<AccessControlPolicy>...</AccessControlPolicy>'],
    )


class ObjectStorageBucketsClusterIdBucketObjectAclPutResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketObjectListGetResponse(BaseModel):
    data: Optional[List[ObjectStorageObject]] = Field(
        None, description='This page of objects in the bucket.'
    )


class ObjectStorageBucketsClusterIdBucketObjectListGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketObjectUrlPostRequest(BaseModel):
    content_type: Optional[str] = Field(
        None,
        description='The expected `Content-type` header of the request this signed URL will be valid for.  If provided, the `Content-type` header _must_ be sent with the request when this URL is used, and _must_ be the same as it was when the signed URL was created. Required for all methods *except* "GET" or "DELETE".\n',
        examples=[None],
    )
    expires_in: Optional[conint(ge=360, le=86400)] = Field(
        3600,
        description='How long this signed URL will be valid for, in seconds.  If omitted, the URL will be valid for 3600 seconds (1 hour).\n',
        examples=[None],
    )
    method: str = Field(
        ...,
        description='The HTTP method allowed to be used with the pre-signed URL.',
        examples=['GET'],
    )
    name: str = Field(
        ...,
        description='The name of the object that will be accessed with the pre-signed URL. This object need not exist, and no error will be returned if it doesn\'t. This behavior is useful for generating pre-signed URLs to upload new objects to by setting the `method` to "PUT".\n',
        examples=['example'],
    )


class ObjectStorageBucketsClusterIdBucketObjectUrlPostResponse(BaseModel):
    url: Optional[str] = Field(
        None,
        description='The signed URL to perform the request at.',
        examples=[
            'https://us-east-1.linodeobjects.com/example-bucket/example?Signature=qr98TEucCntPgEG%2BsZQGDsJg93c%3D&Expires=1567609905&AWSAccessKeyId=G4YAF81XWY61DQM94SE0'
        ],
    )


class ObjectStorageBucketsClusterIdBucketObjectUrlPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketSslDeleteResponse(BaseModel):
    pass


class ObjectStorageBucketsClusterIdBucketSslDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketSslGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageBucketsClusterIdBucketSslPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageCancelPostResponse(BaseModel):
    pass


class ObjectStorageCancelPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageClustersGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageClustersClusterIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageKeysGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageKeysPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageKeysKeyIdDeleteResponse(BaseModel):
    pass


class ObjectStorageKeysKeyIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageKeysKeyIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageKeysKeyIdPutRequest(BaseModel):
    label: Optional[str] = Field(
        None,
        description='The label for this keypair, for display purposes only.',
        examples=['my-key'],
    )


class ObjectStorageKeysKeyIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ObjectStorageTransferGetResponse(BaseModel):
    used: Optional[int] = Field(
        None,
        description="The amount of outbound data transfer used by your account's Object Storage buckets, in bytes, for the current month's billing cycle.\n",
        examples=[12956600198],
    )


class ObjectStorageTransferGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfilePutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileAppsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileAppsAppIdDeleteResponse(BaseModel):
    pass


class ProfileAppsAppIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileAppsAppIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileDevicesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileDevicesDeviceIdDeleteResponse(BaseModel):
    pass


class ProfileDevicesDeviceIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileDevicesDeviceIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileGrantsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileLoginsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileLoginsLoginIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfilePhoneNumberDeleteResponse(BaseModel):
    pass


class ProfilePhoneNumberDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfilePhoneNumberPostRequest(BaseModel):
    iso_code: str = Field(
        ...,
        description='The two-letter ISO 3166 country code associated with the phone number.',
        examples=['US'],
    )
    phone_number: str = Field(
        ..., description='A valid phone number.', examples=['555-555-5555']
    )


class ProfilePhoneNumberPostResponse(BaseModel):
    pass


class ProfilePhoneNumberPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfilePhoneNumberVerifyPostRequest(BaseModel):
    otp_code: str = Field(
        ...,
        description='The one-time code received via SMS message after accessing the **Phone Verification Code Send** ([POST /profile/phone-number](/docs/api/profile/#phone-number-verification-code-send)) command.',
        examples=['US'],
    )


class ProfilePhoneNumberVerifyPostResponse(BaseModel):
    pass


class ProfilePhoneNumberVerifyPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfilePreferencesGetResponse(BaseModel):
    pass


class ProfilePreferencesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfilePreferencesPutRequest(BaseModel):
    pass


class ProfilePreferencesPutResponse(BaseModel):
    pass


class ProfilePreferencesPutResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileSecurityQuestionsGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileSecurityQuestionsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileSshkeysGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileSshkeysPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileSshkeysSshKeyIdDeleteResponse(BaseModel):
    pass


class ProfileSshkeysSshKeyIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileSshkeysSshKeyIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileSshkeysSshKeyIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileTfaDisablePostResponse(BaseModel):
    pass


class ProfileTfaDisablePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileTfaEnablePostResponse(BaseModel):
    expiry: Optional[datetime_aliased] = Field(
        None,
        description='When this Two Factor secret expires.\n',
        examples=['2018-03-01T00:01:01'],
    )
    secret: Optional[str] = Field(
        None,
        description='Your Two Factor secret. This is used to generate time-based two factor codes required for logging in. Doing this will be required to confirm TFA an actually enable it.\n',
        examples=['5FXX6KLACOC33GTC'],
    )


class ProfileTfaEnablePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileTfaEnableConfirmPostRequest(BaseModel):
    tfa_code: Optional[str] = Field(
        None,
        description='The Two Factor code you generated with your Two Factor secret. These codes are time-based, so be sure it is current.\n',
        examples=['213456'],
    )


class ProfileTfaEnableConfirmPostResponse(BaseModel):
    scratch: Optional[str] = Field(
        None,
        description='A one-use code that can be used in place of your Two Factor code, in case you are unable to generate one.  Keep this in a safe place to avoid being locked out of your Account.\n',
        examples=['sample two factor scratch'],
    )


class ProfileTfaEnableConfirmPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileTokensGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileTokensPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileTokensTokenIdDeleteResponse(BaseModel):
    pass


class ProfileTokensTokenIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileTokensTokenIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class ProfileTokensTokenIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class RegionsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class RegionsRegionIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class SupportTicketsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class SupportTicketsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class SupportTicketsTicketIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class SupportTicketsTicketIdAttachmentsPostRequest(BaseModel):
    file: str = Field(
        ...,
        description='The local, absolute path to the file you want to attach to your Support Ticket.\n',
        examples=['/Users/LinodeGuy/pictures/screen_shot.jpg'],
    )


class SupportTicketsTicketIdAttachmentsPostResponse(BaseModel):
    pass


class SupportTicketsTicketIdAttachmentsPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class SupportTicketsTicketIdClosePostResponse(BaseModel):
    pass


class SupportTicketsTicketIdClosePostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class SupportTicketsTicketIdRepliesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class SupportTicketsTicketIdRepliesPostRequest(BaseModel):
    description: constr(min_length=1, max_length=65535) = Field(
        ...,
        description='The content of your reply.\n',
        examples=[
            'Thank you for your help. I was able to figure out what the problem was and I successfully reset my password. You guys are the best!\n'
        ],
    )


class SupportTicketsTicketIdRepliesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class TagsGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class TagsPostRequest(BaseModel):
    domains: Optional[List[int]] = Field(
        None,
        description='A list of Domain IDs to apply the new Tag to.  You must be allowed to `read_write` all of the requested Domains, or the Tag will not be created and an error will be returned.\n',
        examples=[[564, 565]],
    )
    label: constr(min_length=3, max_length=50) = Field(
        ..., description='The new Tag.\n', examples=['example tag']
    )
    linodes: Optional[List[int]] = Field(
        None,
        description='A list of Linode IDs to apply the new Tag to.  You must be allowed to `read_write` all of the requested Linodes, or the Tag will not be created and an error will be returned.\n',
        examples=[[123, 456]],
    )
    nodebalancers: Optional[List[int]] = Field(
        None,
        description='A list of NodeBalancer IDs to apply the new Tag to. You must be allowed to `read_write` all of the requested NodeBalancers, or the Tag will not be created and an error will be returned.\n',
        examples=[[10301, 10501]],
    )
    volumes: Optional[List[int]] = Field(
        None,
        description='A list of Volume IDs to apply the new Tag to.  You must be allowed to `read_write` all of the requested Volumes, or the Tag will not be created and an error will be returned.\n',
        examples=[[9082, 10003]],
    )


class TagsPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class TagsLabelDeleteResponse(BaseModel):
    pass


class TagsLabelDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class TagsLabelGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesGetResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    config_id: Optional[int] = Field(
        None,
        description="When creating a Volume attached to a Linode, the ID of the Linode Config to include the new Volume in. This Config must belong to the Linode referenced by `linode_id`. Must _not_ be provided if `linode_id` is not sent. If a `linode_id` is sent without a `config_id`, the volume will be attached:\n\n  * to the Linode's only config if it only has one config.\n  * to the Linode's last used config, if possible.\n\nIf no config can be selected for attachment, an error will be returned.\n",
        examples=[23456],
    )
    label: constr(
        pattern=r'^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+$', min_length=1, max_length=32
    ) = Field(
        ...,
        description="The Volume's label, which is also used in the `filesystem_path` of the resulting volume.\n",
        examples=['my-volume'],
    )
    linode_id: Optional[int] = Field(
        None,
        description='The Linode this volume should be attached to upon creation. If not given, the volume will be created without an attachment.\n',
        examples=[123],
    )
    region: Optional[str] = Field(
        None,
        description='The Region to deploy this Volume in. This is only required if a linode_id is not given.\n',
        examples=[None],
    )
    size: Optional[int] = Field(
        20,
        description='The initial size of this volume, in GB.  Be aware that volumes may only be resized up after creation.\n',
        examples=[20],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='An array of Tags applied to this object.  Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )


class VolumesPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesVolumeIdDeleteResponse(BaseModel):
    pass


class VolumesVolumeIdDeleteResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesVolumeIdGetResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesVolumeIdPutResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesVolumeIdAttachPostRequest(BaseModel):
    config_id: Optional[int] = Field(
        None,
        description='The ID of the Linode Config to include this Volume in. Must belong to the Linode referenced by `linode_id`. If not given, the last booted Config will be chosen.\n',
        examples=[23456],
    )
    linode_id: int = Field(
        ..., description='The ID of the Linode to attach the volume to.'
    )
    persist_across_boots: Optional[bool] = Field(
        None,
        description='Defaults to true, if false is provided, the Volume will not be attached to the Linode Config. In this case more than 8 Volumes may be attached to a Linode if a Linode has 16GB of RAM or more. The number of volumes that can be attached is equal to the number of GB of RAM that the Linode has, up to a maximum of 64. `config_id` should not be passed if this is set to false and linode_id must be passed. The Linode must be running.\n',
    )


class VolumesVolumeIdAttachPostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesVolumeIdClonePostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesVolumeIdDetachPostResponse(BaseModel):
    pass


class VolumesVolumeIdDetachPostResponse1(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class VolumesVolumeIdResizePostResponse(BaseModel):
    errors: Optional[List[ErrorObject]] = None


class AllowList(
    RootModel[
        List[
            constr(
                pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
            )
        ]
    ]
):
    root: List[
        constr(pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$')
    ] = Field(
        ...,
        description='A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n\nBy default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.\n\nIf `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.\n',
        examples=[['203.0.113.1/32', '192.0.1.0/24']],
    )


class Created(RootModel[datetime_aliased]):
    root: datetime_aliased = Field(
        ...,
        description='When this Managed Database was created.',
        examples=['2022-01-01T00:01:01'],
    )


class Encrypted(RootModel[bool]):
    root: bool = Field(
        ..., description='Whether the Managed Databases is encrypted.', examples=[False]
    )


class HostsModel(BaseModel):
    primary: Optional[str] = Field(
        None,
        description='The primary host for the Managed Database.',
        examples=['lin-123-456-mysql-mysql-primary.servers.linodedb.net'],
    )
    secondary: Optional[str] = Field(
        None,
        description='The secondary/private network host for the Managed Database.\n\nA private network host and a private IP can only be used to access a Database Cluster from Linodes in the same data center and will not incur transfer costs.\n\n**Note**: The secondary hostname is publicly viewable and accessible.\n',
        examples=['lin-123-456-mysql-primary-private.servers.linodedb.net'],
    )


class Id(RootModel[int]):
    root: int = Field(
        ...,
        description='A unique ID that can be used to identify and reference the Managed Database.',
        examples=[123],
    )


class Label(RootModel[constr(min_length=3, max_length=32)]):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(min_length=3, max_length=32) = Field(
        ...,
        description='A unique, user-defined string referring to the Managed Database.',
        examples=['example-db'],
    )


class Region(RootModel[str]):
    root: str = Field(
        ...,
        description='The [Region](/docs/api/regions/) ID for the Managed Database.',
        examples=['us-east'],
    )


class StatusModel(Enum):
    provisioning = 'provisioning'
    active = 'active'
    suspending = 'suspending'
    suspended = 'suspended'
    resuming = 'resuming'
    restoring = 'restoring'
    failed = 'failed'
    degraded = 'degraded'
    updating = 'updating'
    backing_up = 'backing_up'


class TypeModel(RootModel[str]):
    root: str = Field(
        ...,
        description='The Linode Instance type used by the Managed Database for its nodes.',
        examples=['g6-dedicated-2'],
    )


class Updated(RootModel[datetime_aliased]):
    root: datetime_aliased = Field(
        ...,
        description='When this Managed Database was last updated.',
        examples=['2022-01-01T00:01:01'],
    )


class UpdatesModel(BaseModel):
    day_of_week: Optional[conint(ge=1, le=7)] = Field(
        None,
        description='The day to perform maintenance. 1=Monday, 2=Tuesday, etc.',
        examples=[1],
    )
    duration: Optional[conint(ge=1, le=3)] = Field(
        None, description='The maximum maintenance window time in hours.', examples=[3]
    )
    frequency: Optional[Frequency] = Field(
        'weekly',
        description='Whether maintenance occurs on a weekly or monthly basis.',
        examples=['weekly'],
    )
    hour_of_day: Optional[conint(ge=0, le=23)] = Field(
        None,
        description='The hour to begin maintenance based in UTC time.',
        examples=[0],
    )
    week_of_month: Optional[conint(ge=1, le=4)] = Field(
        None,
        description='The week of the month to perform `monthly` frequency updates. Defaults to `null`.\n\n* Required for `monthly` frequency updates.\n\n* Must be `null` for `weekly` frequency updates.\n',
        examples=[None],
    )


class ReplicaSet(RootModel[Optional[constr(max_length=64)]]):
    root: Optional[constr(max_length=64)] = Field(
        None,
        description='Label for configuring a MongoDB [replica set](https://www.mongodb.com/docs/manual/replication/). Choose the same label on multiple Databases to include them in the same replica set.\n\nIf `null`, the Database is not included in any replica set.\n',
        examples=[None],
    )


class SslConnection(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether to require SSL credentials to establish a connection to the Managed Database.\n\nUse the **Managed MongoDB Database Credentials View** ([GET /databases/mongodb/instances/{instanceId}/credentials](/docs/api/databases/#managed-mongodb-database-credentials-view)) command for access information.\n',
        examples=[True],
    )


class SslConnectionModel(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether to require SSL credentials to establish a connection to the Managed Database.\n\nUse the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.\n',
        examples=[True],
    )


class SslConnectionModel1(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether to require SSL credentials to establish a connection to the Managed Database.\n\nUse the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.\n',
        examples=[True],
    )


class LabelModel(RootModel[constr(min_length=1, max_length=48)]):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(min_length=1, max_length=48) = Field(
        ...,
        description="The Disk's label is for display purposes only.\n",
        examples=['Debian 9 Disk'],
    )


class AuthorizedKeys(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description="A list of public SSH keys that will be automatically appended\nto the root user's `~/.ssh/authorized_keys` file when deploying from an Image.\n",
        examples=[
            ['ssh-rsa AAAA_valid_public_ssh_key_123456785== user@their-computer']
        ],
    )


class AuthorizedUsers(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description='A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.\n',
        examples=[['myUser', 'secondaryUser']],
    )


class ImageModel(RootModel[str]):
    root: str = Field(
        ...,
        description="An Image ID to deploy the Linode Disk from.\n\nAccess the Images List ([GET /images](/docs/api/images/#images-list)) endpoint with authentication to view\nall available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating\na disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Access the User's\nGrant Update ([PUT /account/users/{username}/grants](/docs/api/account/#users-grants-update)) endpoint to\nadjust permissions for an Account Image.\n",
        examples=['linode/debian9'],
    )


class RootPass(RootModel[SecretStr]):
    root: SecretStr = Field(
        ...,
        description="This sets the root user's password on a newly-created Linode Disk when deploying from an Image.\n\n* **Required** when creating a Linode Disk from an Image, including when using a StackScript.\n\n* Must meet a password strength score requirement that is calculated internally by the API.\nIf the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.\n",
        examples=['aComplexP@ssword'],
    )


class StackscriptData(BaseModel):
    pass


class StackscriptId(RootModel[int]):
    root: int = Field(
        ...,
        description='A StackScript ID that will cause the referenced StackScript to be run during\ndeployment of this Linode. A compatible `image` is required to use a\nStackScript. To get a list of available StackScript and their permitted Images\nsee [/stackscripts](/docs/api/stackscripts/#stackscripts-list).\nThis field cannot be used when deploying from a Backup or a Private Image.\n',
        examples=[10079],
    )


class Name(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100) = Field(
        ...,
        description='The name of this Record. For requests, this property\'s actual usage and whether it is required depends\non the type of record this represents:\n\n`A` and `AAAA`: The hostname or FQDN of the Record.\n\n`NS`: The subdomain, if any, to use with the Domain of the Record. Wildcard NS records (`*`) are not supported.\n\n`MX`: The mail subdomain. For example, `sub` for the address `user@sub.example.com` under the `example.com`\nDomain. Must be an empty string (`""`) for a Null MX Record.\n\n`CNAME`: The hostname. Must be unique. Required.\n\n`TXT`: The hostname.\n\n`SRV`: Unused. Use the `service` property to set the service name for this record.\n\n`CAA`: The subdomain. Omit or enter an empty string (`""`) to apply to the entire Domain.\n\n`PTR`: See our guide on how to [Configure Your Linode for Reverse DNS\n(rDNS)](/docs/guides/configure-rdns/).\n',
        examples=['test'],
    )


class Port(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535) = Field(
        ...,
        description='The port this Record points to. Only valid and required for SRV record requests.\n',
        examples=[80],
    )


class Priority(RootModel[conint(ge=0, le=255)]):
    root: conint(ge=0, le=255) = Field(
        ...,
        description='The priority of the target host for this Record. Lower values are preferred. Only valid for\nMX and SRV record requests. Required for SRV record requests.\n\nDefaults to `0` for MX record requests. Must be `0` for Null MX records.\n',
        examples=[50],
    )


class ProtocolModel(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description="The protocol this Record's service communicates with. An underscore (`_`) is prepended automatically to the submitted value for this property. Only valid for SRV record requests.\n",
        examples=[None],
    )


class Service(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The name of the service. An underscore (`_`) is prepended and a period (`.`) is appended automatically to the submitted value for this property. Only valid and required for SRV record requests.\n',
        examples=[None],
    )


class TagModel(Enum):
    issue = 'issue'
    issuewild = 'issuewild'
    iodef = 'iodef'


class TargetModel(RootModel[constr(max_length=65535)]):
    root: constr(max_length=65535) = Field(
        ...,
        description='The target for this Record. For requests, this property\'s actual usage and whether it is required depends\non the type of record this represents:\n\n`A` and `AAAA`: The IP address. Use `[remote_addr]` to submit the IPv4 address of the request. Required.\n\n`NS`: The name server. Must be a valid domain. Required.\n\n`MX`: The mail server. Must be a valid domain unless creating a Null MX Record. To create a\n[Null MX Record](https://datatracker.ietf.org/doc/html/rfc7505), first\n[remove](/docs/api/domains/#domain-record-delete) any additional MX records, create an MX record with empty strings\n(`""`) for the `target` and `name`. If a Domain has a Null MX record, new MX records cannot be created. Required.\n\n`CNAME`: The alias. Must be a valid domain. Required.\n\n`TXT`: The value. Required.\n\n`SRV`: The target domain or subdomain. If a subdomain is entered, it is automatically used with the Domain.\nTo configure for a different domain, enter a valid FQDN. For example, the value `www` with a Domain for\n`example.com` results in a target set to `www.example.com`, whereas the value `sample.com` results in a\ntarget set to `sample.com`. Required.\n\n`CAA`: The value. For `issue` or `issuewild` tags, the domain of your certificate issuer. For the `iodef`\ntag, a contact or submission URL (domain, http, https, or mailto). Requirements depend on the tag for this record:\n  * `issue`: The domain of your certificate issuer. Must be a valid domain.\n  * `issuewild`: Must begin with `*`.\n  * `iodef`: Must be either (1) a valid domain, (2) a valid domain prepended with `http://` or `https://`, or (3) a valid email address prepended with `mailto:`.\n\n`PTR`: Required. See our guide on how to [Configure Your Linode for Reverse DNS\n(rDNS)](/docs/guides/configure-rdns/).\n\nWith the exception of A, AAAA, and CAA records, this field accepts a trailing period.\n',
        examples=['192.0.2.0'],
    )


class TtlSec(RootModel[int]):
    root: int = Field(
        ...,
        description='"Time to Live" - the amount of time in seconds that this Domain\'s records may be cached by resolvers or other domain servers. Valid values are 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n',
        examples=[604800],
    )


class Weight(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535) = Field(
        ...,
        description='The relative weight of this Record used in the case of identical priority. Higher values are preferred. Only valid and required for SRV record requests.\n',
        examples=[50],
    )


class LabelModel1(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$',
            min_length=3,
            max_length=32,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$', min_length=3, max_length=32
    ) = Field(
        ...,
        description="The Firewall's label, for display purposes only.\n\nFirewall labels have the following constraints:\n\n  * Must begin and end with an alphanumeric character.\n  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).\n  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.\n  * Must be between 3 and 32 characters.\n  * Must be unique.\n",
        examples=['firewall123'],
    )


class Rules(BaseModel):
    inbound: Optional[List[FirewallRuleConfig]] = Field(
        None, description='The inbound rules for the firewall, as a JSON array.\n'
    )
    inbound_policy: Optional[InboundPolicy] = Field(
        None,
        description='The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.\n',
        examples=['DROP'],
    )
    outbound: Optional[List[FirewallRuleConfig]] = Field(
        None, description='The outbound rules for the firewall, as a JSON array.\n'
    )
    outbound_policy: Optional[OutboundPolicy] = Field(
        None,
        description='The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.\n',
        examples=['DROP'],
    )


class Tags(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description='An array of tags applied to this object. Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )


class Type17(Enum):
    linode = 'linode'


class EntityModel(BaseModel):
    id: Optional[int] = Field(None, description="The entity's ID", examples=[123])
    label: Optional[str] = Field(
        None, description="The entity's label.", examples=['my-linode']
    )
    type: Optional[Type17] = Field(
        None, description="The entity's type.", examples=['linode']
    )
    url: Optional[str] = Field(
        None,
        description='The URL you can use to access this entity.\n',
        examples=['/v4/linode/instances/123'],
    )


class CreatedModel(RootModel[datetime_aliased]):
    root: datetime_aliased = Field(
        ...,
        description='When this Kubernetes cluster was created.',
        examples=['2019-09-12T21:25:30Z'],
    )


class K8sVersion(RootModel[str]):
    root: str = Field(
        ...,
        description='The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.\n',
        examples=['1.25'],
    )


class LabelModel2(RootModel[constr(min_length=1, max_length=32)]):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(min_length=1, max_length=32) = Field(
        ...,
        description='This Kubernetes cluster\'s unique label for display purposes only.\nLabels have the following constraints:\n\n  * UTF-8 characters will be returned by the API using escape\n    sequences of their Unicode code points. For example, the\n    Japanese character *か* is 3 bytes in UTF-8 (`0xE382AB`). Its\n    Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this\n    character and the API will return it as the escape sequence\n    using six 1 byte characters which represent 2 bytes of Unicode\n    code point (`"\\u30ab"`).\n  * 4 byte UTF-8 characters are not supported.\n  * If the label is entirely composed of UTF-8 characters, the API\n    response will return the code points using up to 193 1 byte\n    characters.\n',
        examples=['lkecluster12345'],
    )


class RegionModel(RootModel[str]):
    root: str = Field(
        ..., description="This Kubernetes cluster's location.", examples=['us-central']
    )


class TagsModel(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description='An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.\n',
        examples=[['ecomm', 'blogs']],
    )


class UpdatedModel(RootModel[datetime_aliased]):
    root: datetime_aliased = Field(
        ...,
        description='When this Kubernetes cluster was updated.',
        examples=['2019-09-13T21:24:16Z'],
    )


class Count(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100) = Field(
        ..., description='The number of nodes in the Node Pool.', examples=[6]
    )


class Type18(Enum):
    raw = 'raw'
    ext4 = 'ext4'


class Items(BaseModel):
    size: Optional[int] = Field(
        None,
        description="The size of this custom disk partition in MB.\n\n  * The size of this disk partition must not exceed the capacity of the node's plan type.\n",
        examples=[1024],
    )
    type: Optional[Type18] = Field(
        None,
        description="This custom disk partition's filesystem type.\n",
        examples=['ext-4'],
    )


class TagsModel1(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description='An array of tags applied to this object. Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )


class TypeModel1(RootModel[str]):
    root: str = Field(
        ...,
        description='The Linode Type for all of the nodes in the Node Pool.',
        examples=['g6-standard-4'],
    )


class Group(RootModel[str]):
    root: str = Field(
        ...,
        description='A deprecated property denoting a group label for this Linode.\n',
        examples=['Linode-Group'],
    )


class LabelModel3(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$',
            min_length=3,
            max_length=64,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$', min_length=3, max_length=64
    ) = Field(
        ...,
        description="The Linode's label is for display purposes only. If no label is provided for a Linode,\na default will be assigned.\n\nLinode labels have the following constraints:\n\n  * Must begin and end with an alphanumeric character.\n  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).\n  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.\n",
        examples=['linode123'],
    )


class TagsModel2(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description='An array of tags applied to this object.  Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )


class ClientConnThrottle(RootModel[conint(ge=0, le=20)]):
    root: conint(ge=0, le=20) = Field(
        ...,
        description='Throttle connections per second.  Set to 0 (zero) to disable throttling.\n',
        examples=[0],
    )


class LabelModel4(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_]{3,32}', min_length=3, max_length=32)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'[a-zA-Z0-9-_]{3,32}', min_length=3, max_length=32) = Field(
        ...,
        description="This NodeBalancer's label. These must be unique on your Account.\n",
        examples=['balancer12345'],
    )


class CheckAttempts(RootModel[conint(ge=1, le=30)]):
    root: conint(ge=1, le=30) = Field(
        ...,
        description='How many times to attempt a check before considering a backend to be down.\n',
        examples=[3],
    )


class CheckBody(RootModel[str]):
    root: str = Field(
        ...,
        description='This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.\n',
        examples=['it works'],
    )


class CheckInterval(RootModel[int]):
    root: int = Field(
        ...,
        description='How often, in seconds, to check that backends are up and serving requests.\n\nMust be greater than `check_timeout`.\n',
        examples=[90],
    )


class CheckPassive(RootModel[bool]):
    root: bool = Field(
        ...,
        description='If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation.\n',
        examples=[True],
    )


class CheckPath(RootModel[constr(pattern=r'^[a-zA-Z0-9\/\-%?&=.]*$')]):
    root: constr(pattern=r'^[a-zA-Z0-9\/\-%?&=.]*$') = Field(
        ...,
        description='The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n',
        examples=['/test'],
    )


class CheckTimeout(RootModel[conint(ge=1, le=30)]):
    root: conint(ge=1, le=30) = Field(
        ...,
        description='How long, in seconds, to wait for a check attempt before considering it failed.\n\nMust be less than `check_interval`.\n',
        examples=[10],
    )


class PortModel(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535) = Field(
        ...,
        description="The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.\n",
        examples=[80],
    )


class ProtocolModel1(Enum):
    http = 'http'
    https = 'https'
    tcp = 'tcp'


class SslCert(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL\ncertificate and Certificate Authority chain) that should be served on this\nNodeBalancerConfig\'s port.\n\nLine breaks must be represented as "\\n" in the string for requests (but not when using the Linode CLI).\n\n[Diffie-Hellman Parameters](/docs/products/networking/nodebalancers/guides/ssl-termination/#diffie-hellman-parameters) can be included in this value to enable forward secrecy.\n\nThe contents of this field will not be shown in any responses that display\nthe NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field\nappears.\n\nThe read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig\nresponse are automatically derived from your certificate. Please refer to these fields to\nverify that the appropriate certificate was assigned to your NodeBalancerConfig.\n',
        examples=['<REDACTED>'],
    )


class SslKey(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.\n\nLine breaks must be represented as "\\n" in the string for requests (but not when using the Linode CLI).\n\nThe contents of this field will not be shown in any responses that display\nthe NodeBalancerConfig. Instead, `<REDACTED>` will be printed where the field\nappears.\n\nThe read-only `ssl_commonname` and `ssl_fingerprint` fields in a NodeBalancerConfig\nresponse are automatically derived from your certificate. Please refer to these fields to\nverify that the appropriate certificate was assigned to your NodeBalancerConfig.\n',
        examples=['<REDACTED>'],
    )


class Address(RootModel[str]):
    root: str = Field(
        ...,
        description='The private IP Address where this backend can be reached. This _must_ be a private IP address.\n',
        examples=['192.168.210.120:80'],
    )


class LabelModel5(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_.]{3,32}', min_length=3, max_length=32)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'[a-zA-Z0-9-_.]{3,32}', min_length=3, max_length=32) = Field(
        ...,
        description='The label for this node.  This is for display purposes only.\n',
        examples=['node54321'],
    )


class WeightModel(RootModel[conint(ge=1, le=255)]):
    root: conint(ge=1, le=255) = Field(
        ...,
        description='Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.\n',
        examples=[50],
    )


class Page(RootModel[int]):
    root: int = Field(
        ..., description='The current [page](/docs/api/#pagination).', examples=[1]
    )


class Pages(RootModel[int]):
    root: int = Field(
        ...,
        description='The total number of [pages](/docs/api/#pagination).',
        examples=[1],
    )


class Results(RootModel[int]):
    root: int = Field(..., description='The total number of results.', examples=[1])


class IsDefault(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether this Payment Method is the default method for automatically processing service charges.\n',
        examples=[True],
    )


class LabelModel6(RootModel[constr(min_length=1, max_length=100)]):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(min_length=1, max_length=100) = Field(
        ...,
        description="This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.\n",
        examples=['linode-cli'],
    )


class IdModel(RootModel[str]):
    root: str = Field(
        ..., description='The unique ID of this Region.', examples=['us-east']
    )


class LabelModel7(RootModel[constr(min_length=0, max_length=64)]):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(min_length=0, max_length=64) = Field(
        ..., description='A label for the SSH Key.\n', examples=['My SSH Key']
    )


class IdModel1(RootModel[int]):
    root: int = Field(
        ..., description='The ID representing the security question.', examples=[1]
    )


class Question(RootModel[str]):
    root: str = Field(
        ...,
        description='The security question.',
        examples=['In what city were you born?'],
    )


class Response(RootModel[constr(min_length=3, max_length=17)]):
    root: constr(min_length=3, max_length=17) = Field(
        ..., description='The security question response.\n', examples=['Gotham City']
    )


class LabelModel8(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+$', min_length=1, max_length=32
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+$', min_length=1, max_length=32
    ) = Field(
        ...,
        description="The Volume's label is for display purposes only.\n",
        examples=['my-volume'],
    )


class Size(RootModel[conint(le=10240)]):
    root: conint(le=10240) = Field(
        ..., description="The Volume's size, in GiB.\n", examples=[30]
    )


class Account(BaseModel):
    active_promotions: Optional[List[Promotion]] = None
    active_since: Optional[datetime_aliased] = Field(
        None,
        description='The datetime of when the account was activated.',
        examples=['2018-01-01T00:01:01'],
    )
    address_1: Optional[constr(max_length=64)] = Field(
        None,
        description="First line of this Account's billing address.",
        examples=['123 Main Street'],
    )
    address_2: Optional[constr(max_length=64)] = Field(
        None,
        description="Second line of this Account's billing address.",
        examples=['Suite A'],
    )
    balance: Optional[float] = Field(
        None, description="This Account's balance, in US dollars.", examples=[200]
    )
    balance_uninvoiced: Optional[float] = Field(
        None,
        description="This Account's current estimated invoice in US dollars. This is not your final invoice balance. Transfer charges are not included in the estimate.\n",
        examples=[145],
    )
    billing_source: Optional[BillingSource] = Field(
        None,
        description='The source of service charges for this Account, as determined by its relationship with Akamai.\nAccounts that are associated with Akamai-specific customers return a value of `akamai`.\nAll other Accounts return a value of `linode`.\n',
        examples=['akamai'],
    )
    capabilities: Optional[List[str]] = Field(
        None,
        description='A list of capabilities your account supports.\n',
        examples=[['Linodes', 'NodeBalancers', 'Block Storage', 'Object Storage']],
    )
    city: Optional[constr(max_length=24)] = Field(
        None,
        description="The city for this Account's billing address.",
        examples=['Philadelphia'],
    )
    company: Optional[constr(max_length=128)] = Field(
        None,
        description='The company name associated with this Account.',
        examples=['Linode LLC'],
    )
    country: Optional[str] = Field(
        None,
        description="The two-letter ISO 3166 country code of this Account's billing address.\n",
        examples=['US'],
    )
    credit_card: Optional[CreditCard] = Field(
        None, description='Credit Card information associated with this Account.'
    )
    email: Optional[constr(max_length=128)] = Field(
        None,
        description='The email address of the person associated with this Account.',
        examples=['john.smith@linode.com'],
    )
    euuid: Optional[UUID] = Field(
        None,
        description='An external unique identifier for this account.\n',
        examples=['E1AF5EEC-526F-487D-B317EBEB34C87D71'],
    )
    first_name: Optional[constr(max_length=50)] = Field(
        None,
        description='The first name of the person associated with this Account.',
        examples=['John'],
    )
    last_name: Optional[constr(max_length=50)] = Field(
        None,
        description='The last name of the person associated with this Account.',
        examples=['Smith'],
    )
    phone: Optional[constr(max_length=32)] = Field(
        None,
        description='The phone number associated with this Account.',
        examples=['215-555-1212'],
    )
    state: Optional[constr(max_length=24)] = Field(
        None,
        description="If billing address is in the United States (US) or Canada (CA), only the two-letter ISO 3166 State or Province code are accepted. If entering a US military address, state abbreviations (AA, AE, AP) should be entered. If the address is outside the US or CA, this is the Province associated with the Account's billing address.\n",
        examples=['PA'],
    )
    tax_id: Optional[constr(max_length=25)] = Field(
        None,
        description='The tax identification number associated with this Account, for tax calculations in some countries. If you do not live in a country that collects tax, this should be an empty string (`""`).\n',
        examples=['ATU99999999'],
    )
    zip: Optional[str] = Field(
        None,
        description="The zip code of this Account's billing address. The following restrictions apply:\n\n- May only consist of letters, numbers, spaces, and hyphens.\n- Must not contain more than 9 letter or number characters.\n",
        examples=['19102-1234'],
    )


class Disk(BaseModel):
    filesystem: Optional[Filesystem] = None
    label: Optional[str] = Field(None, examples=['My Debian 9 Disk'])
    size: Optional[int] = Field(None, examples=[9001])


class Backup(BaseModel):
    available: Optional[bool] = Field(
        None,
        description='Whether this Backup is available for restoration.\n\nBackups undergoing maintenance are not available for restoration.\n',
        examples=[True],
    )
    configs: Optional[List[str]] = Field(
        None,
        description='A list of the labels of the Configuration profiles that are part of the Backup.\n',
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='The date the Backup was taken.',
        examples=['2018-01-15T00:01:01'],
    )
    disks: Optional[List[Disk]] = Field(
        None, description='A list of the disks that are part of the Backup.\n'
    )
    finished: Optional[datetime_aliased] = Field(
        None,
        description='The date the Backup completed.',
        examples=['2018-01-15T00:01:01'],
    )
    id: Optional[int] = Field(
        None, description='The unique ID of this Backup.', examples=[123456]
    )
    label: Optional[str] = Field(
        None,
        description='A label for Backups that are of type `snapshot`.',
        examples=['Webserver-Backup-2018'],
    )
    status: Optional[Status] = Field(
        None,
        description='The current state of a specific Backup.',
        examples=['successful'],
    )
    type: Optional[Type] = Field(
        None,
        description='This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time.\n',
        examples=['snapshot'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='The date the Backup was most recently updated.',
        examples=['2018-01-15T00:01:01'],
    )


class DatabaseMongoDB(BaseModel):
    allow_list: Optional[AllowList] = None
    cluster_size: Optional[ClusterSize] = 1
    compression_type: Optional[CompressionType] = Field(
        'none',
        description='The type of data compression for this Database.\n\nSnappy has a lower comparative compression ratio and resource consumption rate.\n\nZlip has a higher comparative compression ratio and resource consumption rate.\n',
        examples=['none'],
    )
    created: Optional[Created] = None
    encrypted: Optional[Encrypted] = False
    engine: Optional[str] = Field(
        None, description='The Managed Database engine type.', examples=['mongodb']
    )
    hosts: Optional[Hosts1] = Field(
        None,
        description='The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.',
    )
    id: Optional[Id] = None
    label: Optional[Label] = None
    peers: Optional[List[str]] = Field(
        None,
        description='An array of peer addresses for this Database.\n',
        examples=[
            [
                'lin-0000-0000.servers.linodedb.net',
                'lin-0000-0001.servers.linodedb.net',
                'lin-0000-0002.servers.linodedb.net',
            ]
        ],
    )
    port: Optional[int] = Field(
        None, description='The access port for this Managed Database.', examples=[27017]
    )
    region: Optional[Region] = None
    replica_set: Optional[constr(max_length=64)] = Field(
        None,
        description='Label for configuring a MongoDB [replica set](https://www.mongodb.com/docs/manual/replication/). Choose the same label on multiple Databases to include them in the same replica set.\n\nIf `null`, the Database is not included in any replica set.\n',
        examples=[None],
    )
    ssl_connection: Optional[bool] = Field(
        True,
        description='Whether to require SSL credentials to establish a connection to the Managed Database.\n\nUse the **Managed MongoDB Database Credentials View** ([GET /databases/mongodb/instances/{instanceId}/credentials](/docs/api/databases/#managed-mongodb-database-credentials-view)) command for access information.\n',
        examples=[True],
    )
    status: Optional[StatusModel] = None
    storage_engine: Optional[StorageEngine] = Field(
        'wiredtiger',
        description='The type of storage engine for this Database.\n\n**Note:** MMAPV1 is not available for MongoDB versions 4.0 and above.\n',
        examples=['wiredtiger'],
    )
    type: Optional[TypeModel] = None
    updated: Optional[Updated] = None
    updates: Optional[UpdatesModel] = None
    version: Optional[str] = Field(
        None, description='The Managed Database engine version.', examples=['4.4.10']
    )


class DatabaseMongoDBRequest(BaseModel):
    allow_list: Optional[AllowList] = None
    cluster_size: Optional[ClusterSize] = 1
    compression_type: Optional[CompressionType] = 'none'
    encrypted: Optional[Encrypted] = False
    engine: str = Field(
        ...,
        description='The Managed Database engine in engine/version format.',
        examples=['mongodb/4.4.10'],
    )
    label: Label
    region: Region
    replica_set: Optional[ReplicaSet] = None
    ssl_connection: Optional[SslConnection] = Field(
        default_factory=lambda: SslConnection.model_validate(True)
    )
    storage_engine: Optional[StorageEngine] = 'wiredtiger'
    type: TypeModel


class DatabaseMySQL(BaseModel):
    allow_list: Optional[AllowList] = None
    cluster_size: Optional[ClusterSize] = 1
    created: Optional[Created] = None
    encrypted: Optional[Encrypted] = False
    engine: Optional[str] = Field(
        None, description='The Managed Database engine type.', examples=['mysql']
    )
    hosts: Optional[HostsModel] = None
    id: Optional[Id] = None
    label: Optional[Label] = None
    port: Optional[int] = Field(
        None, description='The access port for this Managed Database.', examples=[3306]
    )
    region: Optional[Region] = None
    replication_type: Optional[ReplicationType] = Field(
        None,
        description='The replication method used for the Managed Database.\n\nDefaults to `none` for a single cluster and `semi_synch` for a high availability cluster.\n\nMust be `none` for a single node cluster.\n\nMust be `asynch` or `semi_synch` for a high availability cluster.\n',
        examples=['semi_synch'],
    )
    ssl_connection: Optional[bool] = Field(
        True,
        description='Whether to require SSL credentials to establish a connection to the Managed Database.\n\nUse the **Managed MySQL Database Credentials View** ([GET /databases/mysql/instances/{instanceId}/credentials](/docs/api/databases/#managed-mysql-database-credentials-view)) command for access information.\n',
        examples=[True],
    )
    status: Optional[StatusModel] = None
    type: Optional[TypeModel] = None
    updated: Optional[Updated] = None
    updates: Optional[UpdatesModel] = None
    version: Optional[str] = Field(
        None, description='The Managed Database engine version.', examples=['8.0.26']
    )


class DatabaseMySQLRequest(BaseModel):
    allow_list: Optional[AllowList] = None
    cluster_size: Optional[ClusterSize] = 1
    encrypted: Optional[Encrypted] = False
    engine: str = Field(
        ...,
        description='The Managed Database engine in engine/version format.',
        examples=['mysql/8.0.26'],
    )
    label: Label
    region: Region
    replication_type: Optional[ReplicationType] = None
    ssl_connection: Optional[SslConnectionModel] = Field(
        default_factory=lambda: SslConnectionModel.model_validate(True)
    )
    type: TypeModel


class DatabasePostgreSQL(BaseModel):
    allow_list: Optional[AllowList] = None
    cluster_size: Optional[ClusterSize] = 1
    created: Optional[Created] = None
    encrypted: Optional[Encrypted] = False
    engine: Optional[str] = Field(
        None, description='The Managed Database engine type.', examples=['postgresql']
    )
    hosts: Optional[Hosts2] = Field(
        None,
        description='The primary and secondary hosts for the Managed Database. These are assigned after provisioning is complete.',
    )
    id: Optional[Id] = None
    label: Optional[Label] = None
    port: Optional[int] = Field(
        None, description='The access port for this Managed Database.', examples=[3306]
    )
    region: Optional[Region] = None
    replication_commit_type: Optional[ReplicationCommitType] = Field(
        'local',
        description='The synchronization level of the replicating server.\n\nMust be `local` or `off` for the `asynch` replication type.\n\nMust be `on`, `remote_write`, or `remote_apply` for the `semi_synch` replication type.\n',
        examples=['local'],
    )
    replication_type: Optional[ReplicationType] = Field(
        None,
        description='The replication method used for the Managed Database.\n\nDefaults to `none` for a single cluster and `semi_synch` for a high availability cluster.\n\nMust be `none` for a single node cluster.\n\nMust be `asynch` or `semi_synch` for a high availability cluster.\n',
        examples=['semi_synch'],
    )
    ssl_connection: Optional[bool] = Field(
        True,
        description='Whether to require SSL credentials to establish a connection to the Managed Database.\n\nUse the **Managed PostgreSQL Database Credentials View** ([GET /databases/postgresql/instances/{instanceId}/credentials](/docs/api/databases/#managed-postgresql-database-credentials-view)) command for access information.\n',
        examples=[True],
    )
    status: Optional[StatusModel] = None
    type: Optional[TypeModel] = None
    updated: Optional[Updated] = None
    updates: Optional[UpdatesModel] = None
    version: Optional[str] = Field(
        None, description='The Managed Database engine version.', examples=['13.2']
    )


class DatabasePostgreSQLRequest(BaseModel):
    allow_list: Optional[AllowList] = None
    cluster_size: Optional[ClusterSize] = 1
    encrypted: Optional[Encrypted] = False
    engine: str = Field(
        ...,
        description='The Managed Database engine in engine/version format.',
        examples=['postgresql/13.2'],
    )
    label: Label
    region: Region
    replication_commit_type: Optional[ReplicationCommitType] = 'local'
    replication_type: Optional[ReplicationType] = None
    ssl_connection: Optional[SslConnectionModel1] = Field(
        default_factory=lambda: SslConnectionModel1.model_validate(True)
    )
    type: TypeModel


class Engines(BaseModel):
    mongodb: Optional[List[DatabaseTypeEngine]] = Field(
        None, description='Pricing details for MongoDB Managed Databases.'
    )
    mysql: Optional[List[DatabaseTypeEngine]] = Field(
        None, description='Pricing details for MySQL Managed Databases.'
    )
    postgresql: Optional[List[DatabaseTypeEngine]] = Field(
        None, description='Pricing details for PostgreSQL Managed Databases.'
    )


class DatabaseType(BaseModel):
    class_: Optional[str] = Field(
        None,
        alias='class',
        description='The compute class category.',
        examples=['nanode'],
    )
    deprecated: Optional[bool] = Field(
        None,
        description='Whether this Database plan type has been deprecated and is no longer available.',
        examples=[False],
    )
    disk: Optional[int] = Field(
        None,
        description='The amount of disk space set aside for Databases of this plan type. The value is represented in megabytes.',
        examples=[25600],
    )
    engines: Optional[Engines] = None
    id: Optional[str] = Field(
        None,
        description='The ID representing the Managed Database node plan type.',
        examples=['g6-nanode-1'],
    )
    label: Optional[str] = Field(
        None,
        description='A human-readable string that describes each plan type. For display purposes only.',
        examples=['DBaaS - Nanode 1GB'],
    )
    memory: Optional[int] = Field(
        None,
        description='The amount of RAM allocated to Database created of this plan type. The value is represented in megabytes.',
        examples=[1024],
    )
    vcpus: Optional[int] = Field(
        None,
        description='The integer of number CPUs allocated to databases of this plan type.',
        examples=[1],
    )


class DiskRequest(BaseModel):
    authorized_keys: Optional[List[str]] = Field(
        None,
        description="A list of public SSH keys that will be automatically appended\nto the root user's `~/.ssh/authorized_keys` file when deploying from an Image.\n",
        examples=[
            ['ssh-rsa AAAA_valid_public_ssh_key_123456785== user@their-computer']
        ],
    )
    authorized_users: Optional[List[str]] = Field(
        None,
        description='A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.\n',
        examples=[['myUser', 'secondaryUser']],
    )
    filesystem: Optional[Filesystem] = None
    image: Optional[str] = Field(
        None,
        description="An Image ID to deploy the Linode Disk from.\n\nAccess the Images List ([GET /images](/docs/api/images/#images-list)) endpoint with authentication to view\nall available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating\na disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Access the User's\nGrant Update ([PUT /account/users/{username}/grants](/docs/api/account/#users-grants-update)) endpoint to\nadjust permissions for an Account Image.\n",
        examples=['linode/debian9'],
    )
    label: Optional[LabelModel] = None
    root_pass: Optional[SecretStr] = Field(
        None,
        description="This sets the root user's password on a newly-created Linode Disk when deploying from an Image.\n\n* **Required** when creating a Linode Disk from an Image, including when using a StackScript.\n\n* Must meet a password strength score requirement that is calculated internally by the API.\nIf the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.\n",
        examples=['aComplexP@ssword'],
    )
    size: Optional[int] = Field(
        None,
        description='The size of the Disk in MB.\n\nImages require a minimum size. Access the Image View ([GET /images/{imageID}](/docs/api/images/#image-view)) endpoint to view its size.\n',
        examples=[48640],
    )
    stackscript_data: Optional[Dict[str, Any]] = Field(
        None,
        description='This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](/docs/guides/writing-scripts-for-use-with-linode-stackscripts-a-tutorial/#user-defined-fields-udfs) for more details.\n\nThis field is required to be valid JSON.\n\nTotal length cannot exceed 65,535 characters.\n',
        examples=[{'gh_username': 'linode'}],
    )
    stackscript_id: Optional[int] = Field(
        None,
        description='A StackScript ID that will cause the referenced StackScript to be run during\ndeployment of this Linode. A compatible `image` is required to use a\nStackScript. To get a list of available StackScript and their permitted Images\nsee [/stackscripts](/docs/api/stackscripts/#stackscripts-list).\nThis field cannot be used when deploying from a Backup or a Private Image.\n',
        examples=[10079],
    )


class RulesModel(BaseModel):
    inbound: Optional[List[FirewallRuleConfig]] = Field(
        None, description='The inbound rules for the firewall, as a JSON array.\n'
    )
    inbound_policy: Optional[InboundPolicy] = Field(
        None,
        description='The default behavior for inbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `inbound.action` property of the Firewall Rule.\n',
        examples=['DROP'],
    )
    outbound: Optional[List[FirewallRuleConfig]] = Field(
        None, description='The outbound rules for the firewall, as a JSON array.\n'
    )
    outbound_policy: Optional[OutboundPolicy] = Field(
        None,
        description='The default behavior for outbound traffic. This setting can be overridden by [updating](/docs/api/networking/#firewall-rules-update) the `outbound.action` property of the Firewall Rule.\n',
        examples=['DROP'],
    )


class Firewall(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Firewall was created.\n',
        examples=['2018-01-01T00:01:01'],
    )
    id: Optional[int] = Field(
        None, description="The Firewall's unique ID.\n", examples=[123]
    )
    label: Optional[
        constr(
            pattern=r'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$',
            min_length=3,
            max_length=32,
        )
    ] = Field(
        None,
        description="The Firewall's label, for display purposes only.\n\nFirewall labels have the following constraints:\n\n  * Must begin and end with an alphanumeric character.\n  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).\n  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.\n  * Must be between 3 and 32 characters.\n  * Must be unique.\n",
        examples=['firewall123'],
    )
    rules: Optional[RulesModel] = Field(
        None,
        description='The inbound and outbound access rules to apply to the Firewall.\n\nA Firewall may have up to 25 rules across its inbound and outbound rulesets.\n',
    )
    status: Optional[Status6] = Field(
        None,
        description="The status of this Firewall.\n\n  * When a Firewall is first created its status is `enabled`.\n  * Use the [Update Firewall](/docs/api/networking/#firewall-update) endpoint to set a Firewall's status to `enabled` or `disabled`.\n  * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.\n",
        examples=['enabled'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='An array of tags applied to this object. Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Firewall was last updated.\n',
        examples=['2018-01-02T00:01:01'],
    )


class LKENodePool(BaseModel):
    autoscaler: Optional[Autoscaler] = Field(
        None,
        description='When enabled, the number of nodes autoscales within the defined minimum and maximum values.\n',
    )
    count: Optional[conint(ge=1, le=100)] = Field(
        None, description='The number of nodes in the Node Pool.', examples=[6]
    )
    disks: Optional[List[Disk2]] = Field(
        None, description="This Node Pool's custom disk layout.\n"
    )
    id: Optional[int] = Field(
        None, description="This Node Pool's unique ID.\n", examples=[456]
    )
    nodes: Optional[List[LKENodeStatus]] = Field(
        None,
        description='Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the instance_id will be returned as null.\n',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='An array of tags applied to this object. Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )
    type: Optional[str] = Field(
        None,
        description='The Linode Type for all of the nodes in the Node Pool.',
        examples=['g6-standard-4'],
    )


class LKENodePoolRequestBody(BaseModel):
    autoscaler: Optional[Autoscaler1] = Field(
        None,
        description='When enabled, the number of nodes autoscales within the defined minimum and maximum values.\n\nWhen making a request, `max` and `min` require each other.\n',
    )
    count: Optional[Count] = None
    disks: Optional[List[Items]] = Field(
        None,
        description="**Note**: This field should be omitted except for special use cases. The disks specified here are\npartitions in *addition* to the primary partition and reduce the size of the primary partition,\nwhich can lead to stability problems for the Node.\n\nThis Node Pool's custom disk layout. Each item in this array will create a new disk\npartition for each node in this Node Pool.\n\n  * The custom disk layout is applied to each node in this Node Pool.\n  * The maximum number of custom disk partitions that can be configured is 7.\n  * Once the requested disk paritions are allocated, the remaining disk space is allocated to the node's boot disk.\n  * A Node Pool's custom disk layout is immutable over the lifetime of the Node Pool.\n",
    )
    tags: Optional[TagsModel1] = None
    type: Optional[TypeModel1] = None


class Linode(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    alerts: Optional[Alerts] = None
    backups: Optional[Backups] = Field(
        None,
        description="Information about this Linode's backups status. For information about available backups, see [/linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list).\n",
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Linode was created.',
        examples=['2018-01-01T00:01:01'],
    )
    group: Optional[str] = Field(
        None,
        description='A deprecated property denoting a group label for this Linode.\n',
        examples=['Linode-Group'],
    )
    host_uuid: Optional[UUID] = Field(
        None,
        description="The Linode's host machine, as a UUID.",
        examples=['3a3ddd59d9a78bb8de041391075df44de62bfec8'],
    )
    hypervisor: Optional[Hypervisor] = Field(
        None,
        description='The virtualization software powering this Linode.\n',
        examples=['kvm'],
    )
    id: Optional[int] = Field(
        None,
        description="This Linode's ID which must be provided for all operations impacting this Linode.\n",
        examples=[123],
    )
    image: Optional[ImageModel] = Field(None, examples=['linode/debian10'])
    ipv4: Optional[List[str]] = Field(
        None,
        description="This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address\nupon creation, and may get a single private IPv4 address if needed. You may need to\n[open a support ticket](/docs/api/support/#support-ticket-open)\nto get additional IPv4 addresses.\n\nIPv4 addresses may be reassigned between your Linodes, or shared with other Linodes.\nSee the [/networking](/docs/api/networking/) endpoints for details.\n",
        examples=[['203.0.113.1', '192.0.2.1']],
    )
    ipv6: Optional[str] = Field(
        None,
        description="This Linode's IPv6 SLAAC address. This address is specific to a Linode, and may not be shared. If the Linode has not been assigned an IPv6 address, the return value will be `null`.\n",
        examples=['c001:d00d::1337/128'],
    )
    label: Optional[
        constr(
            pattern=r'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$',
            min_length=3,
            max_length=64,
        )
    ] = Field(
        None,
        description="The Linode's label is for display purposes only. If no label is provided for a Linode,\na default will be assigned.\n\nLinode labels have the following constraints:\n\n  * Must begin and end with an alphanumeric character.\n  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).\n  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.\n",
        examples=['linode123'],
    )
    region: Optional[str] = Field(
        None,
        description="This is the [Region](/docs/api/regions/#regions-list) where the Linode was deployed. A Linode's region can only be changed by initiating a [cross data center migration](/docs/api/linode-instances/#dc-migrationpending-host-migration-initiate).\n",
        examples=['us-east'],
    )
    specs: Optional[Specs] = Field(
        None, description='Information about the resources available to this Linode.'
    )
    status: Optional[Status9] = Field(
        None,
        description='A brief description of this Linode\'s current state. This field may change without direct action from you. For example, when a Linode goes into maintenance mode its status will display "stopped".\n',
        examples=['running'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='An array of tags applied to this object.  Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )
    type: Literal['Linode'] = Field(
        ...,
        description="This is the [Linode Type](/docs/api/linode-types/#types-list) that this Linode was deployed with.\nTo change a Linode's Type, use [POST /linode/instances/{linodeId}/resize](/docs/api/linode-instances/#linode-resize).\n",
        examples=['g6-standard-1'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Linode was last updated.',
        examples=['2018-01-01T00:01:01'],
    )
    watchdog_enabled: Optional[bool] = Field(
        None,
        description='The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible.\nTo prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n',
        examples=[True],
    )


class LinodeConfig(BaseModel):
    comments: Optional[str] = Field(
        None,
        description='Optional field for arbitrary User comments on this Config.',
        examples=['This is my main Config'],
    )
    devices: Optional[Devices] = None
    helpers: Optional[Helpers] = Field(
        None, description='Helpers enabled when booting to this Linode Config.'
    )
    id: Optional[int] = Field(
        None, description='The ID of this Config.', examples=[23456]
    )
    interfaces: Optional[LinodeConfigInterfaces] = None
    kernel: Optional[str] = Field(
        None,
        description='A Kernel ID to boot a Linode with. Defaults to "linode/latest-64bit".',
        examples=['linode/latest-64bit'],
    )
    label: Optional[constr(min_length=1, max_length=48)] = Field(
        None,
        description="The Config's label is for display purposes only.\n",
        examples=['My Config'],
    )
    memory_limit: Optional[int] = Field(
        None, description='Defaults to the total RAM of the Linode.\n', examples=[2048]
    )
    root_device: Optional[constr(pattern=r'a-z, A-Z, 0-9, /, _, -')] = Field(
        None,
        description='The root device to boot.\n* If no value or an invalid value is provided, root device will default to `/dev/sda`.\n* If the device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.\n',
        examples=['/dev/sda'],
    )
    run_level: Optional[RunLevel] = Field(
        None,
        description='Defines the state of your Linode after booting. Defaults to `default`.\n',
        examples=['default'],
    )
    virt_mode: Optional[VirtMode] = Field(
        None,
        description='Controls the virtualization mode. Defaults to `paravirt`.\n* `paravirt` is suitable for most cases. Linodes running in paravirt mode\n  share some qualities with the host, ultimately making it run faster since\n  there is less transition between it and the host.\n* `fullvirt` affords more customization, but is slower because 100% of the VM\n  is virtualized.\n',
        examples=['paravirt'],
    )


class LinodeRequest(BaseModel):
    authorized_keys: Optional[AuthorizedKeys] = None
    authorized_users: Optional[AuthorizedUsers] = None
    booted: Optional[bool] = Field(
        True,
        description='This field defaults to `true` if the Linode is created with an Image or from a Backup.\nIf it is deployed from an Image or a Backup and you wish it to remain `offline` after deployment, set this to `false`.\n',
    )
    image: Optional[ImageModel] = None
    root_pass: Optional[RootPass] = None
    stackscript_data: Optional[StackscriptData] = None
    stackscript_id: Optional[StackscriptId] = None


class SecurityQuestion1(BaseModel):
    id: Optional[IdModel1] = None
    question: Optional[Question] = None
    response: Optional[Response] = None


class SecurityQuestionsGet(BaseModel):
    security_questions: Optional[List[SecurityQuestion1]] = None


class SecurityQuestion2(BaseModel):
    question_id: Optional[IdModel1] = None
    response: Optional[Response] = None
    security_question: Optional[Question] = None


class SecurityQuestionsPost(BaseModel):
    security_questions: Optional[List[SecurityQuestion2]] = None


class StackScript(BaseModel):
    created: Optional[datetime_aliased] = Field(
        None,
        description='The date this StackScript was created.\n',
        examples=['2018-01-01T00:01:01'],
    )
    deployments_active: Optional[int] = Field(
        None,
        description='Count of currently active, deployed Linodes created from this StackScript.\n',
        examples=[1],
    )
    deployments_total: Optional[int] = Field(
        None,
        description='The total number of times this StackScript has been deployed.\n',
        examples=[12],
    )
    description: Optional[str] = Field(
        None,
        description='A description for the StackScript.\n',
        examples=['This StackScript installs and configures MySQL\n'],
    )
    id: Optional[int] = Field(
        None, description='The unique ID of this StackScript.', examples=[10079]
    )
    images: Optional[List[str]] = Field(
        None,
        description='An array of Image IDs. These are the Images that can be deployed with this StackScript.\n\n`any/all` indicates that all available Images, including private Images, are accepted.\n',
        examples=[['linode/debian9', 'linode/debian8']],
    )
    is_public: Optional[bool] = Field(
        None,
        description='This determines whether other users can use your StackScript. **Once a StackScript is made public, it cannot be made private.**\n',
        examples=[True],
    )
    label: Optional[constr(min_length=3, max_length=128)] = Field(
        None,
        description="The StackScript's label is for display purposes only.\n",
        examples=['a-stackscript'],
    )
    mine: Optional[bool] = Field(
        None,
        description='Returns `true` if this StackScript is owned by the account of the user making the request, and the user\nmaking the request is unrestricted or has access to this StackScript.\n',
        examples=[True],
    )
    rev_note: Optional[str] = Field(
        None,
        description='This field allows you to add notes for the set of revisions made to this StackScript.\n',
        examples=['Set up MySQL'],
    )
    script: Optional[str] = Field(
        None,
        description='The script to execute when provisioning a new Linode with this StackScript.\n',
        examples=['"#!/bin/bash"\n'],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='The date this StackScript was last updated.\n',
        examples=['2018-01-01T00:01:01'],
    )
    user_defined_fields: Optional[List[UserDefinedField]] = Field(
        None,
        description='This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment. See [Declare User-Defined Fields (UDFs)](/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more information.\n',
        examples=[
            {
                'example': 'hunter2',
                'label': 'Enter the DB password',
                'name': 'DB_PASSWORD',
            }
        ],
    )
    user_gravatar_id: Optional[str] = Field(
        None,
        description='The Gravatar ID for the User who created the StackScript.\n',
        examples=['a445b305abda30ebc766bc7fda037c37'],
    )
    username: Optional[str] = Field(
        None, description='The User who created the StackScript.\n', examples=['myuser']
    )


class Volume(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    created: Optional[datetime_aliased] = Field(
        None,
        description='When this Volume was created.',
        examples=['2018-01-01T00:01:01'],
    )
    filesystem_path: Optional[str] = Field(
        None,
        description="The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.\n",
        examples=['/dev/disk/by-id/scsi-0Linode_Volume_my-volume'],
    )
    hardware_type: Optional[HardwareType] = Field(
        None, description='The storage type of this Volume.', examples=['nvme']
    )
    id: Optional[int] = Field(
        None, description='The unique ID of this Volume.', examples=[12345]
    )
    label: Optional[
        constr(
            pattern=r'^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+$', min_length=1, max_length=32
        )
    ] = Field(
        None,
        description="The Volume's label is for display purposes only.\n",
        examples=['my-volume'],
    )
    linode_id: Optional[int] = Field(
        None,
        description='If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.\n',
        examples=[12346],
    )
    linode_label: Optional[str] = Field(
        None,
        description='If a Volume is attached to a specific Linode, the label of that Linode will be displayed here.\n',
        examples=['linode123'],
    )
    region: Optional[IdModel] = None
    size: Optional[conint(le=10240)] = Field(
        None, description="The Volume's size, in GiB.\n", examples=[30]
    )
    status: Optional[Status18] = Field(
        None,
        description='The current status of the volume.  Can be one of:\n\n  * `creating` - the Volume is being created and is not yet available\n    for use.\n  * `active` - the Volume is online and available for use.\n  * `resizing` - the Volume is in the process of upgrading\n    its current capacity.\n',
        examples=['active'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='An array of Tags applied to this object.  Tags are for organizational purposes only.\n',
        examples=[['example tag', 'another example']],
    )
    updated: Optional[datetime_aliased] = Field(
        None,
        description='When this Volume was last updated.',
        examples=['2018-01-01T00:01:01'],
    )
    type: Literal['Volume']


class AccountEntityTransfersPostRequest(BaseModel):
    entities: Entities


class AccountEventsGetResponse(BaseModel):
    data: Optional[List[Event]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountInvoicesGetResponse(BaseModel):
    data: Optional[List[Invoice]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountInvoicesInvoiceIdItemsGetResponse(BaseModel):
    data: Optional[List[InvoiceItem]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountLoginsGetResponse(BaseModel):
    data: Optional[List[Login]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountMaintenanceGetResponse(BaseModel):
    data: Optional[List[Maintenance]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountNotificationsGetResponse(BaseModel):
    data: Optional[List[Notification]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountOauthClientsGetResponse(BaseModel):
    data: Optional[List[OAuthClient]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountPaymentMethodsGetResponse(BaseModel):
    data: Optional[List[PaymentMethod]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountPaymentMethodsPostRequest(BaseModel):
    data: CreditCard1
    is_default: IsDefault
    type: Type14 = Field(
        ...,
        description='The type of Payment Method.\n\nAlternative Payment Methods including Google Pay and PayPal can be added using the Cloud Manager. See the [Manage Payment Methods](/docs/products/platform/billing/guides/payment-methods/) guide\nfor details and instructions.\n',
        examples=['credit_card'],
    )


class AccountPaymentsGetResponse(BaseModel):
    data: Optional[List[Payment]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountServiceTransfersGetResponse(BaseModel):
    data: Optional[List[ServiceTransfer]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class AccountServiceTransfersPostRequest(BaseModel):
    entities: Entities


class AccountUsersGetResponse(BaseModel):
    data: Optional[List[User]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class DatabasesMongodbInstancesGetResponse(PaginationEnvelope):
    data: Optional[List[DatabaseMongoDB]] = None


class DatabasesMongodbInstancesInstanceIdPutRequest(BaseModel):
    allow_list: Optional[AllowList] = None
    label: Optional[Label] = None
    updates: Optional[UpdatesModel] = None


class DatabasesMysqlInstancesGetResponse(PaginationEnvelope):
    data: Optional[List[DatabaseMySQL]] = None


class DatabasesMysqlInstancesInstanceIdPutRequest(BaseModel):
    allow_list: Optional[AllowList] = None
    label: Optional[Label] = None
    updates: Optional[UpdatesModel] = None


class DatabasesPostgresqlInstancesGetResponse(PaginationEnvelope):
    data: Optional[List[DatabasePostgreSQL]] = None


class DatabasesPostgresqlInstancesInstanceIdPutRequest(BaseModel):
    allow_list: Optional[AllowList] = None
    label: Optional[Label] = None
    updates: Optional[UpdatesModel] = None


class DatabasesTypesGetResponse(PaginationEnvelope):
    data: Optional[List[DatabaseType]] = None


class DomainsGetResponse(BaseModel):
    data: Optional[List[Domain]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class DomainsDomainIdRecordsGetResponse(BaseModel):
    data: Optional[List[DomainRecord]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class DomainsDomainIdRecordsRecordIdPutRequest(BaseModel):
    name: Optional[Name] = None
    port: Optional[Port] = None
    priority: Optional[Priority] = None
    protocol: Optional[ProtocolModel] = None
    service: Optional[Service] = None
    tag: Optional[TagModel] = None
    target: Optional[TargetModel] = None
    ttl_sec: Optional[TtlSec] = None
    weight: Optional[Weight] = None


class ImagesGetResponse(BaseModel):
    data: Optional[List[Image]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeInstancesGetResponse(BaseModel):
    data: Optional[List[Linode]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeInstancesPostRequest(LinodeRequest):
    backup_id: Optional[int] = Field(
        None,
        description="A Backup ID from another Linode's available backups. Your User must have\n`read_write` access to that Linode, the Backup must have a `status` of\n`successful`, and the Linode must be deployed to the same `region` as the Backup.\nSee [GET /linode/instances/{linodeId}/backups](/docs/api/linode-instances/#backups-list)\nfor a Linode's available backups.\n\nThis field and the `image` field are mutually exclusive.\n",
        examples=[1234],
    )
    backups_enabled: Optional[bool] = Field(
        None,
        description='If this field is set to `true`, the created Linode will automatically be\nenrolled in the Linode Backup service. This will incur an additional charge.\nThe cost for the Backup service is dependent on the Type of Linode deployed.\n\nThis option is always treated as `true` if the account-wide `backups_enabled`\nsetting is `true`.  See [account settings](/docs/api/account/#account-settings-view)\nfor more information.\n\nBackup pricing is included in the response from [/linodes/types](/docs/api/linode-types/#types-list)\n',
    )
    group: Optional[Group] = None
    interfaces: Optional[LinodeConfigInterfaces] = None
    label: Optional[LabelModel3] = None
    private_ip: Optional[bool] = Field(
        None,
        description='If true, the created Linode will have private networking enabled and assigned a private IPv4 address.\n',
        examples=[True],
    )
    region: str = Field(
        ...,
        description='The [Region](/docs/api/regions/#regions-list) where the Linode will be located.\n',
        examples=['us-east'],
    )
    swap_size: Optional[int] = Field(
        512,
        description='When deploying from an Image, this field is optional, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.\n',
        examples=[512],
    )
    tags: Optional[TagsModel2] = None
    type: str = Field(
        ...,
        description='The [Linode Type](/docs/api/linode-types/#types-list) of the Linode you are creating.\n',
        examples=['g6-standard-2'],
    )


class AutomaticItem(Backup):
    type: Optional[str] = Field(None, examples=['automatic'])


class Snapshot(BaseModel):
    current: Optional[Backup] = None
    in_progress: Optional[Backup] = None


class LinodeInstancesLinodeIdBackupsGetResponse(BaseModel):
    automatic: Optional[List[AutomaticItem]] = None
    snapshot: Optional[Snapshot] = None


class LinodeInstancesLinodeIdConfigsGetResponse(BaseModel):
    data: Optional[List[LinodeConfig]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeInstancesLinodeIdConfigsPostRequest(LinodeConfig):
    label: constr(min_length=1, max_length=48) = Field(
        ...,
        description="The Config's label is for display purposes only.\n",
        examples=['My Config'],
    )
    devices: Devices


class LinodeInstancesLinodeIdDisksGetResponse(BaseModel):
    data: Optional[List[Disk1]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeInstancesLinodeIdDisksPostRequest(DiskRequest):
    size: int = Field(
        ...,
        description='The size of the Disk in MB.\n\nImages require a minimum size. Access the Image View ([GET /images/{imageID}](/docs/api/images/#image-view)) endpoint to view its size.\n',
        examples=[48640],
    )


class LinodeInstancesLinodeIdFirewallsGetResponse(BaseModel):
    data: Optional[List[Firewall]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeInstancesLinodeIdNodebalancersGetResponse(BaseModel):
    data: Optional[List[NodeBalancer]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeInstancesLinodeIdRebuildPostRequest(LinodeRequest):
    image: ImageModel
    root_pass: RootPass


class LinodeInstancesLinodeIdVolumesGetResponse(BaseModel):
    data: Optional[List[Volume]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeKernelsGetResponse(BaseModel):
    data: Optional[List[Kernel]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeStackscriptsGetResponse(BaseModel):
    data: Optional[List[StackScript]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LinodeStackscriptsPostRequest(StackScript):
    script: str = Field(
        ...,
        description='The script to execute when provisioning a new Linode with this StackScript.\n',
        examples=['"#!/bin/bash"\n'],
    )
    label: constr(min_length=3, max_length=128) = Field(
        ...,
        description="The StackScript's label is for display purposes only.\n",
        examples=['a-stackscript'],
    )
    images: List[str] = Field(
        ...,
        description='An array of Image IDs. These are the Images that can be deployed with this StackScript.\n\n`any/all` indicates that all available Images, including private Images, are accepted.\n',
        examples=[['linode/debian9', 'linode/debian8']],
    )


class LinodeTypesGetResponse(BaseModel):
    data: Optional[List[LinodeType]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LkeClustersGetResponse(BaseModel):
    data: Optional[List[LKECluster]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LkeClustersPostRequest(BaseModel):
    control_plane: Optional[ControlPlane] = Field(
        None,
        description='Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components. Enabling High Availability for LKE is an **irreversible** change.\n',
    )
    k8s_version: K8sVersion
    label: LabelModel2
    node_pools: List[LKENodePoolRequestBody]
    region: RegionModel
    tags: Optional[TagsModel] = None


class LkeClustersClusterIdPutRequest(BaseModel):
    control_plane: Optional[ControlPlane] = Field(
        None,
        description='Defines settings for the Kubernetes Control Plane. Allows for the enabling of High Availability (HA) for Control Plane Components.\n\nEnabling High Availability for LKE is an **irreversible** change.\n\nWhen upgrading pre-existing LKE clusters to use the HA Control Plane, the following changes will additionally occur:\n\n- All nodes will be deleted and new nodes will be created to replace them.\n\n- Any local storage (such as `hostPath` volumes) will be erased.\n\n- The upgrade process may take several minutes to complete, as nodes will be replaced on a rolling basis.\n',
    )
    k8s_version: Optional[str] = Field(
        None,
        description="The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;. New and recycled Nodes in this cluster will be installed with the latest available patch for the Cluster's Kubernetes version.\n\nWhen upgrading the Kubernetes version, only the next latest minor version following the current version can be deployed. For example, a cluster with Kubernetes version 1.19 can be upgraded to version 1.20, but not directly to 1.21.\n\nThe Kubernetes version of a cluster can not be downgraded.\n",
    )
    label: Optional[LabelModel2] = None
    tags: Optional[List[str]] = Field(
        None,
        description='An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only. To delete a tag, exclude it from your `tags` array.\n',
        examples=[['prod', 'monitoring', 'ecomm', 'blog']],
    )


class LkeClustersClusterIdPutResponse(BaseModel):
    created: Optional[CreatedModel] = None
    k8s_version: Optional[K8sVersion] = None
    label: Optional[LabelModel2] = None
    region: Optional[RegionModel] = None
    tags: Optional[List[str]] = Field(
        None,
        description='An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only. To delete a tag, exclude it from your `tags` array.\n',
        examples=[['prod', 'monitoring', 'ecomm', 'blog']],
    )
    updated: Optional[UpdatedModel] = None


class LkeClustersClusterIdApiEndpointsGetResponse(BaseModel):
    data: Optional[List[Datum]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LkeClustersClusterIdPoolsGetResponse(BaseModel):
    data: Optional[List[LKENodePool]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LkeClustersClusterIdPoolsPostRequest(LKENodePoolRequestBody):
    type: TypeModel1
    count: Count


class LkeClustersClusterIdPoolsPoolIdPutRequest(BaseModel):
    autoscaler: Optional[Autoscaler1] = None
    count: Optional[Count] = None


class LkeVersionsGetResponse(BaseModel):
    data: Optional[List[LKEVersion]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LongviewClientsGetResponse(BaseModel):
    data: Optional[List[LongviewClient]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class LongviewSubscriptionsGetResponse(BaseModel):
    data: Optional[List[LongviewSubscription1]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ManagedContactsGetResponse(BaseModel):
    data: Optional[List[ManagedContact]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ManagedCredentialsGetResponse(BaseModel):
    data: Optional[List[ManagedCredential]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ManagedIssuesGetResponse(BaseModel):
    data: Optional[List[ManagedIssue]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ManagedLinodeSettingsGetResponse(BaseModel):
    data: Optional[List[ManagedLinodeSettings]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ManagedServicesGetResponse(BaseModel):
    data: Optional[List[ManagedService]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class NetworkingFirewallsGetResponse(BaseModel):
    data: Optional[List[Firewall]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class NetworkingFirewallsPostRequest(Firewall):
    devices: Optional[Devices1] = Field(
        None,
        description='Devices to create for this Firewall.\nWhen a Device is created, the Firewall is assigned to its associated service.\nCurrently, Devices can only be created for Linode instances.\n',
    )
    rules: Rules1
    label: constr(
        pattern=r'^[a-zA-Z]((?!--|__|..)[a-zA-Z0-9-_.])+$', min_length=3, max_length=32
    ) = Field(
        ...,
        description="The Firewall's label, for display purposes only.\n\nFirewall labels have the following constraints:\n\n  * Must begin and end with an alphanumeric character.\n  * May only consist of alphanumeric characters, dashes (`-`), underscores (`_`) or periods (`.`).\n  * Cannot have two dashes (`--`), underscores (`__`) or periods (`..`) in a row.\n  * Must be between 3 and 32 characters.\n  * Must be unique.\n",
        examples=['firewall123'],
    )


class NetworkingFirewallsFirewallIdPutRequest(BaseModel):
    label: Optional[LabelModel1] = None
    status: Optional[Status20] = Field(
        None,
        description='The status to be applied to this Firewall.\n \n * When a Firewall is first created its status is `enabled`.\n * Use the [Delete Firewall](/docs/api/networking/#firewall-delete) endpoint to delete a Firewall.\n',
        examples=['enabled'],
    )
    tags: Optional[Tags] = None


class NetworkingFirewallsFirewallIdDevicesGetResponse(BaseModel):
    data: Optional[List[FirewallDevices]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class NetworkingFirewallsFirewallIdDevicesPostRequest(EntityModel):
    id: int = Field(..., description="The entity's ID", examples=[123])
    type: Type17 = Field(..., description="The entity's type.", examples=['linode'])


class NetworkingFirewallsFirewallIdRulesPutRequest(Rules):
    inbound: Optional[Any] = None
    outbound: Optional[Any] = None


class NetworkingIpsGetResponse(BaseModel):
    data: Optional[List[IPAddress]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class NetworkingIpv6PoolsGetResponse(BaseModel):
    data: Optional[List[IPv6Pool]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class NetworkingIpv6RangesGetResponse(BaseModel):
    data: Optional[List[IPv6Range]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class NetworkingVlansGetResponse(BaseModel):
    data: Optional[List[Vlans]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class NodebalancersGetResponse(BaseModel):
    data: Optional[List[NodeBalancer]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class Config(BaseModel):
    algorithm: Optional[Algorithm] = 'roundrobin'
    check: Optional[Check] = 'none'
    check_attempts: Optional[CheckAttempts] = Field(
        default_factory=lambda: CheckAttempts.model_validate(3)
    )
    check_body: Optional[CheckBody] = None
    check_interval: Optional[CheckInterval] = Field(
        default_factory=lambda: CheckInterval.model_validate(31)
    )
    check_passive: Optional[CheckPassive] = Field(
        default_factory=lambda: CheckPassive.model_validate(True)
    )
    check_path: Optional[CheckPath] = None
    check_timeout: Optional[CheckTimeout] = Field(
        default_factory=lambda: CheckTimeout.model_validate(30)
    )
    cipher_suite: Optional[CipherSuite] = 'recommended'
    nodes: Optional[List[NodeBalancerNode]] = Field(
        None, description='The NodeBalancer Node(s) that serve this Config.\n'
    )
    port: Optional[PortModel] = Field(
        default_factory=lambda: PortModel.model_validate(80)
    )
    protocol: Optional[ProtocolModel1] = 'http'
    proxy_protocol: Optional[ProxyProtocol] = 'none'
    ssl_cert: Optional[SslCert] = None
    ssl_key: Optional[SslKey] = None
    stickiness: Optional[Stickiness] = 'none'


class NodebalancersPostRequest(BaseModel):
    client_conn_throttle: Optional[ClientConnThrottle] = None
    configs: Optional[List[Config]] = Field(
        None,
        description='The port Config(s) to create for this NodeBalancer.\n\nEach Config must have a unique port and at least one Node.\n',
    )
    label: Optional[LabelModel4] = None
    region: str = Field(
        ...,
        description='The ID of the Region to create this NodeBalancer in.\n',
        examples=['us-east'],
    )


class NodebalancersNodeBalancerIdConfigsGetResponse(BaseModel):
    data: Optional[List[NodeBalancerConfig]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class NodebalancersNodeBalancerIdConfigsConfigIdNodesGetResponse(BaseModel):
    data: Optional[List[NodeBalancerNode]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class Node(BaseModel):
    address: Optional[Address] = None
    id: Optional[int] = Field(
        None, description='The unique ID of the Node to update.', examples=[54321]
    )
    label: Optional[LabelModel5] = None
    mode: Optional[Mode] = None
    weight: Optional[WeightModel] = None


class NodebalancersNodeBalancerIdConfigsConfigIdRebuildPostRequest(NodeBalancerConfig):
    nodes: List[Node] = Field(
        ...,
        description='The NodeBalancer Node(s) that serve this Config.\n\nSome considerations for Nodes when rebuilding a config:\n  * Current Nodes excluded from the request body will be deleted from the Config.\n  * Current Nodes (identified by their Node ID) will be updated.\n  * New Nodes (included without a Node ID) will be created.\n',
    )


class ObjectStorageBucketsGetResponse(BaseModel):
    data: Optional[List[ObjectStorageBucket]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ObjectStorageBucketsClusterIdGetResponse(BaseModel):
    data: Optional[List[ObjectStorageBucket]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ObjectStorageClustersGetResponse(BaseModel):
    data: Optional[List[ObjectStorageCluster]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ObjectStorageKeysGetResponse(BaseModel):
    data: Optional[List[ObjectStorageKey]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ProfileAppsGetResponse(BaseModel):
    data: Optional[List[AuthorizedApp]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ProfileDevicesGetResponse(BaseModel):
    data: Optional[List[TrustedDevice]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ProfileLoginsGetResponse(BaseModel):
    data: Optional[List[Login]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ProfileSshkeysGetResponse(BaseModel):
    data: Optional[List[SSHKey]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ProfileSshkeysSshKeyIdPutRequest(BaseModel):
    label: Optional[LabelModel7] = None


class ProfileTokensGetResponse(BaseModel):
    data: Optional[List[PersonalAccessToken]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class ProfileTokensPostRequest(BaseModel):
    expiry: Optional[datetime_aliased] = Field(
        None,
        description='When this token should be valid until.  If omitted, the new token will be valid until it is manually revoked.\n',
        examples=[None],
    )
    label: Optional[LabelModel6] = None
    scopes: Optional[str] = Field(
        None,
        description='The scopes to create the token with.  These cannot be changed after creation, and may not exceed the scopes of the acting token. If omitted, the new token will have the same scopes as the acting token.\n',
        examples=['*'],
    )


class RegionsGetResponse(BaseModel):
    data: Optional[List[Region1]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class SupportTicketsGetResponse(BaseModel):
    data: Optional[List[SupportTicket]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class SupportTicketsTicketIdRepliesGetResponse(BaseModel):
    data: Optional[List[SupportTicketReply]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class TagsGetResponse(BaseModel):
    data: Optional[List[Tag1]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class Datum1(BaseModel):
    data: Optional[Union[Linode, Domain, Volume, NodeBalancer]] = Field(
        None, discriminator='type'
    )
    type: Optional[str] = Field(None, examples=['linode'])


class TagsLabelGetResponse(BaseModel):
    data: Optional[List[Datum1]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class VolumesGetResponse(BaseModel):
    data: Optional[List[Volume]] = None
    page: Optional[Page] = None
    pages: Optional[Pages] = None
    results: Optional[Results] = None


class VolumesVolumeIdPutRequest(Volume):
    linode_id: Optional[Any] = None
    size: Optional[Any] = None


class VolumesVolumeIdClonePostRequest(BaseModel):
    label: LabelModel8


class VolumesVolumeIdResizePostRequest(BaseModel):
    size: Size
